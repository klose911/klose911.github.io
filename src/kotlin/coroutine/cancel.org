#+TITLE: 取消和超时
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./basic.html
#+HTML_LINK_HOME: ./coroutine.html
#+OPTIONS: num:nil timestamp:nil

* 取消协程的执行

  在一个长时间运行的应用程序中，也许需要对后台协程进行细粒度的控制 

  #+BEGIN_EXAMPLE
    比如说，一个用户也许关闭了一个启动了协程的界面，那么现在协程的执行结果已经不再被需要了，这时，它应该是可以被取消的
  #+END_EXAMPLE

  下面的 launch 函数返回了一个可以被用来取消运行中的协程的 Job：

  #+BEGIN_SRC kotlin 
  import kotlinx.coroutines.delay
  import kotlinx.coroutines.launch
  import kotlinx.coroutines.runBlocking

  fun main() = runBlocking {
      val job = launch {
	  repeat(1000) { i ->
	      println("job: I'm sleeping $i ...")
	      delay(500L)
	  }
      }

      delay(1300L) // 延迟一段时间
      println("main: I'm tired of waiting!")
      job.cancel() // 取消该作业
      job.join() // 等待作业执行结束
      println("main: Now I can quit.")
  } 
  #+END_SRC

  程序执行后的输出如下：

  #+BEGIN_SRC sh 
  job: I'm sleeping 0 ...
  job: I'm sleeping 1 ...
  job: I'm sleeping 2 ...
  main: I'm tired of waiting!
  main: Now I can quit.
  #+END_SRC


  一旦 main 函数调用了 _job.cancel_ ，在其它的协程中就看不到任何输出，因为它被取消了

  #+BEGIN_EXAMPLE
    这里也有一个可以使 Job 挂起的函数 cancelAndJoin 它合并了对 cancel 以及 join 的调用
  #+END_EXAMPLE

** 取消是协作的
   协程的取消是 *协作* 的。一段协程代码必须协作才能被取消。 所有 kotlinx.coroutines 中的 _挂起_ 函数都是 *可被取消的* 

   #+BEGIN_EXAMPLE
     它们检查协程的取消， 并在取消时抛出 CancellationException 
   #+END_EXAMPLE

   然而，如果协程正在 *执行* _计算任务_ ，并且没有 *检查* _取消_ 的话，那么它是不能被取消的，就如如下示例代码所示： 

   #+BEGIN_SRC kotlin 
  import kotlinx.coroutines.*

  fun main() = runBlocking {
      val startTime = System.currentTimeMillis()
      val job = launch(Dispatchers.Default) {
	  var nextPrintTime = startTime
	  var i = 0
	  while (i < 5) {
	  // 一个执行计算的循环，只是为了占用 CPU
	  // 每秒打印消息两次
	  if (System.currentTimeMillis() >= nextPrintTime) {
	      println("job: I'm sleeping ${i++} ...")
	      nextPrintTime += 500L
	  }
	}
      }
      delay(1300L) // 等待一段时间
      println("main: I'm tired of waiting!")
      job.cancelAndJoin() // 取消一个作业并且等待它结束
      println("main: Now I can quit.")
  } 
   #+END_SRC

   #+BEGIN_EXAMPLE
     运行示例代码，可以看到它连续打印出了“I'm sleeping”，甚至在调用取消后， 作业仍然执行了五次循环迭代并运行到了它结束为止
   #+END_EXAMPLE

** 取消计算代码
   有两种方法来使执行计算的代码可以被取消：
   1. *定期* _调用_ *挂起* 函数来检查取消。对于这种目的 _yield_ 是一个好的选择
   2. *显式* 的 _检查_ *取消* 状态

   先来试试第二种方法：

   #+BEGIN_SRC kotlin 
  import kotlinx.coroutines.*

  fun main() = runBlocking {
      val startTime = System.currentTimeMillis()
      val job = launch(Dispatchers.Default) {
	  var nextPrintTime = startTime
	  var i = 0
	  while (isActive) {
	      // 可以被取消的计算循环
	      // 每秒打印消息两次
	      if (System.currentTimeMillis() >= nextPrintTime) {
		  println("job: I'm sleeping ${i++} ...")
		  nextPrintTime += 500L
	      }
	  }
      }
      delay(1300L) // 等待一段时间
      println("main: I'm tired of waiting!")
      job.cancelAndJoin() // 取消该作业并等待它结束
      println("main: Now I can quit.")
  }
   #+END_SRC

   _isActive_ 是一个可以被使用在 CoroutineScope 中的 *扩展* 属性
   #+BEGIN_EXAMPLE
     可以看到，现在循环被取消了
   #+END_EXAMPLE

*** 在 finally 中释放资源
    通常使用如下的方法处理在被取消时抛出 CancellationException 的可被取消的挂起函数。比如说， _try {……} finally {……}_  表达式以及 Kotlin 的 _use_ 函数一般在协程被取消的时候执行它们的终结动作：

    #+BEGIN_SRC kotlin 
  import kotlinx.coroutines.cancelAndJoin
  import kotlinx.coroutines.delay
  import kotlinx.coroutines.launch
  import kotlinx.coroutines.runBlocking

  fun main() = runBlocking {
      //sampleStart
      val job = launch {
	  try {
	      repeat(1000) { i ->
		  println("job: I'm sleeping $i ...")
		  delay(500L)
	      }
	  } finally {
	      println("job: I'm running finally")
	  }
      }
      delay(1300L) // 延迟一段时间
      println("main: I'm tired of waiting!")
      job.cancelAndJoin() // 取消该作业并且等待它结束
      println("main: Now I can quit.")
  }
    #+END_SRC

    join 和 cancelAndJoin 等待了所有的终结动作执行完毕， 所以运行示例得到了下面的输出：

    #+BEGIN_SRC sh
  job: I'm sleeping 0 ...
  job: I'm sleeping 1 ...
  job: I'm sleeping 2 ...
  main: I'm tired of waiting!
  job: I'm running finally
  main: Now I can quit.
    #+END_SRC

** 运行不能取消的代码块

   #+BEGIN_EXAMPLE
     在前一个例子中任何尝试在 finally 块中调用挂起函数的行为都会抛出 CancellationException，因为这里持续运行的代码是可以被取消的

     通常，这并不是一个问题，所有良好的关闭操作（关闭一个文件、取消一个作业、或是关闭任何一种通信通道）通常都是非阻塞的，并且不会调用任何挂起函数
   #+END_EXAMPLE
   然而，在真实的案例中，当需要挂起一个被取消的协程，可以将相应的代码包装在 _withContext(NonCancellable) {……}_ 中，并使用 withContext 函数以及 NonCancellable 上下文：

   #+BEGIN_SRC kotlin 
  import kotlinx.coroutines.*

  fun main() = runBlocking {
      val job = launch {
	  try {
	      repeat(1000) { i ->
		  println("job: I'm sleeping $i ...")
		  delay(500L)
	      }
	  } finally {
	      withContext(NonCancellable) {
		  println("job: I'm running finally")
		  delay(1000L)
		  println("job: And I've just delayed for 1 sec because I'm non-cancellable")
	      }
	  }
      }
      delay(1300L) // 延迟一段时间
      println("main: I'm tired of waiting!")
      job.cancelAndJoin() // 取消该作业并等待它结束
      println("main: Now I can quit.")
  } 
   #+END_SRC

* 超时

  #+BEGIN_EXAMPLE
    在实践中绝大多数取消一个协程的理由是它有可能超时

    接下来一个例子是手动追踪一个相关 Job 的引用并启动了一个单独的协程在延迟后取消追踪
  #+END_EXAMPLE
  可以使用 _withTimeout_ 函数来做这件事：

  #+BEGIN_SRC kotlin 
  import kotlinx.coroutines.delay
  import kotlinx.coroutines.runBlocking
  import kotlinx.coroutines.withTimeout

  fun main() = runBlocking {
      withTimeout(1300L) {
	  repeat(1000) { i ->
	      println("I'm sleeping $i ...")
	      delay(500L)
	  }
      }
  } 
  #+END_SRC

  运行后得到如下输出：

  #+BEGIN_SRC sh 
  I'm sleeping 0 ...
  I'm sleeping 1 ...
  I'm sleeping 2 ...
  Exception in thread "main" kotlinx.coroutines.TimeoutCancellationException: Timed out waiting for 1300 ms
  #+END_SRC

  withTimeout 抛出了 TimeoutCancellationException，它是 CancellationException 的子类

  #+BEGIN_EXAMPLE
    之前没有在控制台上看到堆栈跟踪信息的打印，这是因为在被取消的协程中 CancellationException 被认为是协程执行结束的正常原因

    然而，在这个示例中在 main 函数中正确地使用了 withTimeout
  #+END_EXAMPLE

  由于取消只是一个例外，所有的资源都使用常用的方法来关闭。 如果需要做一些各类使用超时的特别的额外操作，可以使用类似 withTimeout 的 _withTimeoutOrNull_ 函数，并把这些会超时的代码包装在 _try {...} catch (e: TimeoutCancellationException) {...}_ 代码块中，而 withTimeoutOrNull 通过返回 null 来进行超时操作，从而替代抛出一个异常：

  #+BEGIN_SRC kotlin 
  fun main() = runBlocking {
      val result = withTimeoutOrNull(1300L) {
	  repeat(1000) { i ->
	      println("I'm sleeping $i ...")
	      delay(500L)
	  }
	  "Done" // 在它运行得到结果之前取消它
      }
      println("Result is $result")
  }
  #+END_SRC

  运行这段代码时不再抛出异常：

  #+BEGIN_SRC sh 
  I'm sleeping 0 ...
  I'm sleeping 1 ...
  I'm sleeping 2 ...
  Result is null
  #+END_SRC

  | [[file:combination.org][Next：组合挂起函数]] | [[file:basic.org][Previous：基础]] | [[file:coroutine.org][Home：协程]] |
