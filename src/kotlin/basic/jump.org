#+TITLE: 返回和跳转
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./control_flow.html
#+HTML_LINK_HOME: ./basic.html
#+OPTIONS: num:nil timestamp:nil 

Kotlin 有三种结构化跳转 *表达式* ：
+ _return_ : 默认从最直接包围它的函数或者匿名函数返回
+ _break_ : 终止最直接包围它的循环
+ _continue_ : 继续下一次最直接包围它的循环 

所有这些表达式都可以用作更大表达式的一部分：

#+BEGIN_SRC kotlin 
  val s = person.name ?: return
#+END_SRC

#+BEGIN_EXAMPLE
  这些表达式的类型是 Nothing 类型
#+END_EXAMPLE
* Break 与 Continue 标签

  在 Kotlin 中任何表达式都可以用标签 _label_ 来标记。 标签的格式为 _标识符_ 后跟 _@_ 符号

  #+BEGIN_EXAMPLE
    例如：abc@、fooBar@ 都是有效的标签
  #+END_EXAMPLE

  要为一个表达式加标签，只要在其前加标签即可：

  #+BEGIN_SRC kotlin 
  loop@ for (i in 1..100) {
      // ……
  }
  #+END_SRC

  可以用标签限制 break 或者continue：

  #+BEGIN_SRC kotlin 
  loop@ for (i in 1..100) {
      for (j in 1..100) {
	  if (……) break@loop
      }
  }
  #+END_SRC

  + break 标签跳转到刚好位于该标签指定的循环后面的执行点
  + continue 继续标签指定的循环的下一次迭代 
* return 到标签

  #+BEGIN_EXAMPLE
    Kotlin 有函数字面量、局部函数和对象表达式。因此 Kotlin 的函数可以被嵌套
  #+END_EXAMPLE

  标签限制的 return 允许从外层函数返回。 最重要的一个用途就是 从 _lambda 表达式_ 中 *返回* 。假如这么写的时候：

  #+BEGIN_SRC kotlin 

  //sampleStart
  fun foo() {
      listOf(1, 2, 3, 4, 5).forEach lit@{
	  if (it == 3) return@lit // 局部返回到该 lambda 表达式的调用者，即 forEach 循环
	  print(it)
      }
      print(" done with explicit label")
  }
  //sampleEnd

  fun main() {
      foo()
  }
  #+END_SRC

  #+BEGIN_EXAMPLE
    现在，它只会从 lambda 表达式中返回
  #+END_EXAMPLE

  通常情况下使用隐式标签更方便。 该标签与接受该 lambda 的函数同名：

  #+BEGIN_SRC kotlin 

  //sampleStart
  fun foo() {
      listOf(1, 2, 3, 4, 5).forEach {
	  if (it == 3) return@forEach // 局部返回到该 lambda 表达式的调用者，即 forEach 循环
	  print(it)
      }
      print(" done with implicit label")
  }
  //sampleEnd

  fun main() {
      foo()
  }
  #+END_SRC

  或者，用一个 *匿名函数* 替代 _lambda 表达式_ 。 匿名函数内部的 return 语句将从该匿名函数自身返回：

  #+BEGIN_SRC kotlin 
  //sampleStart
  fun foo() {
      listOf(1, 2, 3, 4, 5).forEach(fun(value: Int) {
	  if (value == 3) return  // 局部返回到匿名函数的调用者，即 forEach 循环
	  print(value)
      })
      print(" done with anonymous function")
  }
  //sampleEnd

  fun main() {
      foo()
  }
  #+END_SRC

  #+BEGIN_EXAMPLE
    请注意，这三个示例中使用的局部返回类似于在常规循环中使用 continue
  #+END_EXAMPLE


  并没有 break 的直接等价形式，不过可以通过增加另一层嵌套 lambda 表达式并从其中非局部返回来模拟：

  #+BEGIN_SRC kotlin 

  //sampleStart
  fun foo() {
      run loop@{
	  listOf(1, 2, 3, 4, 5).forEach {
	      if (it == 3) return@loop // 从传入 run 的 lambda 表达式非局部返回
	      print(it)
	  }
      }
      print(" done with nested loop")
  }
  //sampleEnd

  fun main() {
      foo()
  }
  #+END_SRC

  注意，当要返一个回值的时候，解析器优先选用 *标签限制* 的 return，例如：

  #+BEGIN_SRC kotlin 
  return@a 1
  #+END_SRC

  意为“返回 1 到 @a”

  #+BEGIN_EXAMPLE
    而不是“返回一个标签标注的表达式 (@a 1)”
  #+END_EXAMPLE

  | [[file:control_flow.org][Previous：控制流]] | [[file:basic.org][Home：基础]] |
