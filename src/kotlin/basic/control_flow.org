#+TITLE: 控制流：if、when、for、while
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./package.html
#+HTML_LINK_HOME: ./basic.html
#+OPTIONS: num:nil timestamp:nil 
* If 表达式

  在 Kotlin 中，if是一个表达式，即它会返回一个值

  #+BEGIN_SRC kotlin 
  // 传统用法
  var max = a 
  if (a < b) max = b

  // With else 
  var max: Int
  if (a > b) {
      max = a
  } else {
      max = b
  }

  // 作为表达式
  val max = if (a > b) a else b
  #+END_SRC

  #+BEGIN_EXAMPLE
    因此就不需要三元运算符（条件 ? 然后 : 否则），因为普通的 if 就能胜任这个角色
  #+END_EXAMPLE


  if 的分支可以是代码块，最后的表达式作为该块的值：

  #+BEGIN_SRC kotlin 
  val max = if (a > b) {
      print("Choose a")
      a
  } else {
      print("Choose b")
      b
  }
  #+END_SRC

  #+BEGIN_EXAMPLE
    如果使用 if 作为表达式而不是语句（例如：返回它的值或者把它赋给变量），该表达式需要有 else 分支
  #+END_EXAMPLE
* When 表达式

  when 取代了类 C 语言的 switch 操作符。其最简单的形式如下：

  #+BEGIN_SRC kotlin 
  when (x) {
      1 -> print("x == 1")
      2 -> print("x == 2")
      else -> { // 注意这个块
	  print("x is neither 1 nor 2")
      }
  }
  #+END_SRC

  when 将它的参数与所有的分支条件顺序比较，直到某个分支满足条件

  #+BEGIN_EXAMPLE
    when 既可以被当做表达式使用也可以被当做语句使用

    如果它被当做表达式， 符合条件的分支的值就是整个表达式的值

    如果当做语句使用， 则忽略个别分支的值。（像 if 一样，每一个分支可以是一个代码块，它的值是块中最后的表达式的值）
  #+END_EXAMPLE

  如果其他分支都不满足条件将会求值 else 分支。when 作为一个表达式使用，则必须有 else 分支

  #+BEGIN_EXAMPLE
    除非编译器能够检测出所有的可能情况都已经覆盖了［例如，对于 枚举（enum）类条目与密封（sealed）类子类型］
  #+END_EXAMPLE

  如果很多分支需要用相同的方式处理，则可以把多个分支条件放在一起，用逗号分隔：

  #+BEGIN_SRC kotlin 
  when (x) {
      0, 1 -> print("x == 0 or x == 1")
      else -> print("otherwise")
  }
  #+END_SRC

  可以用任意表达式（而不只是常量）作为分支条件：
  #+BEGIN_SRC kotlin 
  when (x) {
      parseInt(s) -> print("s encodes x")
      else -> print("s does not encode x")
  }
  #+END_SRC

  可以检测一个值在（in）或者不在（!in）一个区间或者集合中：

  #+BEGIN_SRC kotlin 
  when (x) {
      in 1..10 -> print("x is in the range")
      in validNumbers -> print("x is valid")
      !in 10..20 -> print("x is outside the range")
      else -> print("none of the above")
  }
  #+END_SRC

  另一种可能性是检测一个值是（is）或者不是（!is）一个特定类型的值

  #+BEGIN_SRC kotlin 
  fun hasPrefix(x: Any) = when(x) {
      is String -> x.startsWith("prefix")
      else -> false
  }
  #+END_SRC

  #+BEGIN_EXAMPLE
    注意： 由于智能转换，可以访问该类型的方法与属性而无需任何额外的检测
  #+END_EXAMPLE

  也可以用来取代 if-else 链。 如果不提供参数，所有的分支条件都是简单的布尔表达式，而当一个分支的条件为真时则执行该分支：

  #+BEGIN_SRC kotlin 
  when {
      x.isOdd() -> print("x is odd")
      x.isEven() -> print("x is even")
      else -> print("x is funny")
  }
  #+END_SRC

  自 Kotlin 1.3 起，可以使用以下语法将 when 的主语捕获到变量中：

  #+BEGIN_SRC kotlin 
  fun Request.getBody() =
  when (val response = executeRequest()) {
      is Success -> response.body
      is HttpError -> throw HttpException(response.status)
  }
  #+END_SRC

  #+BEGIN_EXAMPLE
	主语 指 when 所判断的表达式，在 when 主语中引入的变量的作用域仅限于 when 主体
  #+END_EXAMPLE
* for 循环
  #+BEGIN_EXAMPLE
    这相当于像 C# 这样的语言中的 foreach 循环
  #+END_EXAMPLE
  for 循环可以对任何提供迭代器（iterator）的对象进行遍历，语法如下：

  #+BEGIN_SRC kotlin 
  for (item in collection) print(item)
  #+END_SRC

  循环体可以是一个代码块：

  #+BEGIN_SRC kotlin 
  for (item: Int in ints) {
      // ……
  }
  #+END_SRC

  for 可以循环遍历任何提供了迭代器的对象。即：
  1. 有一个 成员函数或者扩展函数  _iterator()_ 返回类型为这个对象
  2. 有一个成员函数或者扩展函数 _next()_
  3. 有一个成员函数或者扩展函数 _hasNext()_ 返回 _Boolean_ 

  #+BEGIN_EXAMPLE
    这三个函数都需要标记为 operator
  #+END_EXAMPLE

  如需在数字区间上迭代，请使用区间表达式:

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      for (i in 1..3) {
	  println(i)
      }
      for (i in 6 downTo 0 step 2) {
	  println(i)
      }
  //sampleEnd
  }
  #+END_SRC

  #+BEGIN_EXAMPLE
    注意：对区间或者数组的 for 循环会被编译为并不创建迭代器的基于索引的循环
  #+END_EXAMPLE

  如果想要通过索引遍历一个数组或者一个 list，可以这么做：

  #+BEGIN_SRC kotlin 
  fun main() {
      val array = arrayOf("a", "b", "c")
      //sampleStart
      for (i in array.indices) {
	  println(array[i])
      }
      //sampleEnd
  }
  #+END_SRC

  或者可以用库函数 withIndex：

  #+BEGIN_SRC kotlin 
  fun main() {
      val array = arrayOf("a", "b", "c")
  //sampleStart
      for ((index, value) in array.withIndex()) {
	  println("the element at $index is $value")
      }
  //sampleEnd
  }
  #+END_SRC
* While 循环

  while 与 do..while 照常使用：

  #+BEGIN_SRC kotlin 
  while (x > 0) {
      x--
  }

  do {
      val y = retrieveData()
  } while (
  #+END_SRC

  | [[file:jump.org][Next：跳转]] | [[file:package.org][Previous：包]] |   [[file:basic.org][Home：基础]] | 
