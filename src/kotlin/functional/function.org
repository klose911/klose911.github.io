#+TITLE: 函数
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: ./functional.html
#+OPTIONS: num:nil timestamp:nil
* 声明

  Kotlin 中的函数使用 _fun_ 关键字声明：

  #+BEGIN_SRC kotlin 
  fun double(x: Int): Int {
      return 2 * x
  }
  #+END_SRC
* 用法
  调用函数使用传统的方法：

  #+BEGIN_SRC kotlin 
  val result = double(2)
  #+END_SRC

  调用成员函数使用 _点_ 表示法：

  #+BEGIN_SRC kotlin 
  Stream().read() // 创建类 Stream 实例并调用 read()
  #+END_SRC
* 参数

  函数参数使用 Pascal 表示法定义，即 _name: type_ 。参数用 _逗号_ 隔开。每个参数必须有 *显式* 类型：

  #+BEGIN_SRC kotlin 
  fun powerOf(number: Int, exponent: Int) { /*……*/ }
  #+END_SRC
** 默认参数
   函数参数可以有默认值，当省略相应的参数时使用默认值。与其他语言相比，这可以减少重载数量：

   #+BEGIN_SRC kotlin 
  fun read(b: Array<Byte>, off: Int = 0, len: Int = b.size) { /*……*/ }
   #+END_SRC

   #+BEGIN_EXAMPLE
     默认值通过类型后面的 = 及给出的值来定义
   #+END_EXAMPLE


   覆盖方法总是使用与基类型方法相同的默认参数值。 当覆盖一个带有默认参数值的方法时，签名中不能再有默认参数值：

   #+BEGIN_SRC kotlin 
  open class A {
      open fun foo(i: Int = 10) { /*……*/ }
  }

  class B : A() {
      override fun foo(i: Int) { /*……*/ }  // 不能有默认值
  }
   #+END_SRC

   如果一个默认参数在一个无默认值的参数之前，那么该默认值只能通过使用 _具名_ 参数调用该函数来使用：

   #+BEGIN_SRC kotlin 
  fun foo(bar: Int = 0, baz: Int) { /*……*/ }

  foo(baz = 1) // 使用默认值 bar = 0
   #+END_SRC


   如果在默认参数之后的 _最后一个_ 参数是 _lambda 表达式_ ，那么它既可以作为具名参数在括号内传入，也可以在括号外传入：

   #+BEGIN_SRC kotlin 
  fun foo(bar: Int = 0, baz: Int = 1, qux: () -> Unit) { /*……*/ }

  foo(1) { println("hello") }     // 使用默认值 baz = 1
  foo(qux = { println("hello") }) // 使用两个默认值 bar = 0 与 baz = 1
  foo { println("hello") }        // 使用两个默认值 bar = 0 与 baz = 1
   #+END_SRC
** 具名参数

   可以在调用函数时使用具名的函数参数

   #+BEGIN_EXAMPLE
     当一个函数有大量的参数或默认参数时这会非常方便
   #+END_EXAMPLE

   比如：
   #+BEGIN_SRC kotlin 
  fun reformat(str: String,
	       normalizeCase: Boolean = true,
	       upperCaseFirstLetter: Boolean = true,
	       divideByCamelHumps: Boolean = false,
	       wordSeparator: Char = ' ') {
  /*……*/
  }
   #+END_SRC

   可以使用默认参数来调用它：
   #+BEGIN_SRC kotlin 
  reformat(str)
   #+END_SRC

   然而，当使用非默认参数调用它时，该调用看起来就像：

   #+BEGIN_SRC kotlin 
  reformat(str, true, true, false, '_')
   #+END_SRC

   使用具名参数可以使代码更具有可读性：

   #+BEGIN_SRC kotlin 
  reformat(str,
      normalizeCase = true,
      upperCaseFirstLetter = true,
      divideByCamelHumps = false,
      wordSeparator = '_'
  )
   #+END_SRC

   并且如果不需要所有的参数：

   #+BEGIN_SRC kotlin 
  reformat(str, wordSeparator = '_')
   #+END_SRC


   当一个函数调用混用位置参数与具名参数时，所有位置参数都要放在 _第一个具名参数之前_ 

   #+BEGIN_EXAMPLE
     例如，允许调用 f(1, y = 2) 但不允许 f(x = 1, 2)
   #+END_EXAMPLE
   可以通过使用 _星号_ 操作符将 _可变数量参数_ (vararg) 以具名形式传入：

   #+BEGIN_SRC kotlin 
  fun foo(vararg strings: String) { /*……*/ }

  foo(strings = *arrayOf("a", "b", "c"))
   #+END_SRC


   #+BEGIN_EXAMPLE
     对于 JVM 平台：在调用 Java 函数时不能使用具名参数语法，因为 Java 字节码并不总是保留函数参数的名称
   #+END_EXAMPLE
** 可变数量的参数

   函数的参数（通常是最后一个）可以用 _vararg_ 修饰符标记：

   #+BEGIN_SRC kotlin 
  fun <T> asList(vararg ts: T): List<T> {
      val result = ArrayList<T>()
      for (t in ts) // ts is an Array
	  result.add(t)
      return result
  }
   #+END_SRC

   允许将可变数量的参数传递给函数：

   #+BEGIN_SRC kotlin 
  val list = asList(1, 2, 3)
   #+END_SRC

   #+BEGIN_EXAMPLE
     在函数内部，类型 T 的 vararg 参数的可见方式是作为 T 数组，即上例中的 ts 变量具有类型 Array <out T>
   #+END_EXAMPLE

   只有一个参数可以标注为 vararg。如果 vararg 参数不是列表中的最后一个参数：
   + 可以使用具名参数语法传递其后的参数的值
   + 或者，如果参数具有函数类型，则通过在括号外部传一个 lambda 

   #+BEGIN_EXAMPLE
     当调用 vararg 函数时，可以一个接一个地传参，例如 asList(1, 2, 3)
   #+END_EXAMPLE
   或者如果已经有一个数组并希望将其内容传给该函数，也可以使用 _伸展_ (spread) 操作符（在数组前面加 _*_ ）：

   #+BEGIN_SRC kotlin 
  val a = arrayOf(1, 2, 3)
  val list = asList(-1, 0, *a, 4)
   #+END_SRC

* 返回
  具有块代码体的函数必须始终 *显式* 指定返回类型 

  #+BEGIN_EXAMPLE
    除非他们旨在返回 Unit，在这种情况下它是可选的

    Kotlin 不推断具有块代码体的函数的返回类型，因为这样的函数在代码体中可能有复杂的控制流，并且返回类型对于读者（有时甚至对于编译器）是不明显的
  #+END_EXAMPLE

** 返回 Unit 的函数

   如果一个函数不返回任何有用的值，它的返回类型是 _Unit_ 。Unit 是一种只有一个值 Unit 的类型。这个值不需要显式返回：

   #+BEGIN_SRC kotlin 
  fun printHello(name: String?): Unit {
      if (name != null)
	  println("Hello ${name}")
      else
	  println("Hi there!")
      // `return Unit` 或者 `return` 是可选的
  }
   #+END_SRC

   Unit 返回类型声明也是可选的。上面的代码等同于：

   #+BEGIN_SRC kotlin 
  fun printHello(name: String?) { …… }
   #+END_SRC
** 单表达式函数

   当函数返回单个表达式时，可以 *省略* _花括号_ 并且在 _=_ 符号之后 *指定* _代码体_ 即可：

   #+BEGIN_SRC kotlin 
  fun double(x: Int): Int = x * 2
   #+END_SRC


   当返回值类型可由编译器推断时，显式声明返回类型是 _可选_ 的：

   #+BEGIN_SRC kotlin 
  fun double(x: Int) = x * 2
   #+END_SRC

* 中缀表示法
  标有 _infix_ 关键字的函数也可以使用中缀表示法（ *忽略* 该调用的 _点_ 与 _圆括号_ ）调用。中缀函数必须满足以下要求：
  + 它们 *必须* 是 _成员_ 函数或 _扩展_ 函数
  + 它们必须 *只有* _一个_ 参数
  + 其参数 *不得接受* _可变数量_ 的参数且 *不能* 有 _默认值_ 

  #+BEGIN_SRC kotlin 
  infix fun Int.shl(x: Int): Int { …… }

  // 用中缀表示法调用该函数
  1 shl 2

  // 等同于这样
  1.shl(2)
  #+END_SRC

  请注意：
  + 中缀函数总是要求指定 _接收者_ 与 _参数_
  + 当使用中缀表示法在当前接收者上调用方法时，需要显式使用 this
    #+BEGIN_EXAMPLE
      不能像常规方法调用那样省略。这是确保非模糊解析所必需的
    #+END_EXAMPLE

  #+BEGIN_SRC kotlin 
  class MyStringCollection {
      infix fun add(s: String) { /*……*/ }

      fun build() {
	  this add "abc"   // 正确
	  add("abc")       // 正确
	  //add "abc"        // 错误：必须指定接收者
      }
  }
  #+END_SRC

  #+BEGIN_EXAMPLE
    中缀函数调用的优先级低于算术操作符、类型转换以及 rangeTo 操作符。 以下表达式是等价的：

    1 shl 2 + 3 等价于 1 shl (2 + 3)
    0 until n * 2 等价于 0 until (n * 2)
    xs union ys as Set<*> 等价于 xs union (ys as Set<*>)

    另一方面，中缀函数调用的优先级高于布尔操作符 && 与 ||、is- 与 in- 检测以及其他一些操作符。这些表达式也是等价的：

    a && b xor c 等价于 a && (b xor c)
    a xor b in c 等价于 (a xor b) in c
  #+END_EXAMPLE
* 作用域
  在 Kotlin 中函数可以在文件 *顶层* 声明

  #+BEGIN_EXAMPLE
    这意味着你不需要像一些语言如 Java、C# 或 Scala 那样需要创建一个类来保存一个函数
  #+END_EXAMPLE

  此外除了顶层函数，Kotlin 中函数也可以声明在 *局部作用域* 、作为 _成员_ 函数以及 _扩展_ 函数 
** 局部函数

   Kotlin 支持局部函数，即一个函数在另一个函数内部：

   #+BEGIN_SRC kotlin 
  fun dfs(graph: Graph) {
      fun dfs(current: Vertex, visited: MutableSet<Vertex>) {
	  if (!visited.add(current)) return
	  for (v in current.neighbors)
	      dfs(v, visited)
      }

      dfs(graph.vertices[0], HashSet())
  }
   #+END_SRC

   局部函数可以访问外部函数（即 _闭包_ ）的局部变量，所以在上例中，visited 可以是局部变量：

   #+BEGIN_SRC kotlin 
  fun dfs(graph: Graph) {
      val visited = HashSet<Vertex>()
      fun dfs(current: Vertex) {
	  if (!visited.add(current)) return
	  for (v in current.neighbors)
	      dfs(v)
      }

      dfs(graph.vertices[0])
  }
   #+END_SRC
** 成员函数

   成员函数是在类或对象内部定义的函数：

   #+BEGIN_SRC kotlin 
  class Sample() {
      fun foo() { print("Foo") }
  }
   #+END_SRC

   成员函数以点表示法调用：

   #+BEGIN_SRC kotlin 
  Sample().foo() // 创建类 Sample 实例并调用 foo
   #+END_SRC
* 泛型函数

  函数可以有泛型参数，通过在函数名前使用尖括号指定：

  #+BEGIN_SRC kotlin 
  fun <T> singletonList(item: T): List<T> { /*……*/ }
  #+END_SRC
* 内联函数

* 扩展函数
  扩展函数在其 [[file:../oo/extension.org][这里]] 讲述
* 高阶函数
  高阶函数和 Lambda 表达式在 [[file:lambda.org][这里]] 讲述 
* 尾递归函数
  Kotlin 支持一种称为 _尾递归_ 的函数式编程风格。这允许一些通常用循环写的算法改用递归函数来写，而无堆栈溢出的风险。当一个函数用 _tailrec_ 修饰符标记并满足所需的形式时，编译器会优化该递归，留下一个快速而高效的基于循环的版本：

  #+BEGIN_SRC kotlin 
  val eps = 1E-10 // "good enough", could be 10^-15

  tailrec fun findFixPoint(x: Double = 1.0): Double
	  = if (Math.abs(x - Math.cos(x)) < eps) x else findFixPoint(Math.cos(x))
  #+END_SRC

  #+BEGIN_EXAMPLE
    这段代码计算余弦的不动点（fixpoint of cosine），这是一个数学常数

    它只是重复地从 1.0 开始调用 Math.cos，直到结果不再改变，对于这里指定的 eps 精度会产生 0.7390851332151611 的结果
  #+END_EXAMPLE

  最终代码相当于这种更传统风格的代码：

  #+BEGIN_SRC kotlin 
  val eps = 1E-10 // "good enough", could be 10^-15

  private fun findFixPoint(): Double {
      var x = 1.0
      while (true) {
	  val y = Math.cos(x)
	  if (Math.abs(x - y) < eps) return x
	  x = Math.cos(x)
      }
  }
  #+END_SRC

  要符合 tailrec 修饰符的条件的话，函数必须将其 _自身调用_ 作为它执行的 *最后一个* _操作_ 

  #+BEGIN_EXAMPLE
    在递归调用后有更多代码时，不能使用尾递归，并且不能用在 try/catch/finally 块中

    目前在 Kotlin for JVM 与 Kotlin/Native 中支持尾递归
  #+END_EXAMPLE

  | [[file:lambda.org][Next：Lambda表达式]] | [[file:functional.org][Home：函数式]] | 
