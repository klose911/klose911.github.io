#+TITLE: 嵌套类与内部类
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./generic_type.html
#+HTML_LINK_HOME: ./oo.html
#+OPTIONS: num:nil timestamp:nil

类可以 _嵌套_ 在其他类中：

#+BEGIN_SRC kotlin 
  class Outer {
      private val bar: Int = 1
      class Nested {
	  fun foo() = 2
      }
  }

  val demo = Outer.Nested().foo() // == 2
#+END_SRC
* 内部类

标记为 _inner_ 的嵌套类能够 *访问* 其 _外部类的成员_ 。内部类会带有一个对外部类的对象的引用：

#+BEGIN_SRC kotlin 
  class Outer {
      private val bar: Int = 1
      inner class Inner {
	  fun foo() = bar
      }
  }

  val demo = Outer().Inner().foo() // == 1
#+END_SRC
* 匿名内部类

使用 _对象表达式_ 创建匿名内部类实例：

#+BEGIN_SRC kotlin 
  window.addMouseListener(object : MouseAdapter() {

      override fun mouseClicked(e: MouseEvent) { …… }

      override fun mouseEntered(e: MouseEvent) { …… }
  })
#+END_SRC

#+BEGIN_EXAMPLE
  对于 JVM 平台, 如果对象是函数式 Java 接口（即具有单个抽象方法的 Java 接口）的实例， 可以使用带接口类型前缀的lambda表达式创建它
#+END_EXAMPLE

#+BEGIN_SRC kotlin 
  val listener = ActionListener { println("clicked") }
#+END_SRC


| [[file:enum.org][Next：枚举类]] | [[file:generic_type.org][Previous：范型]] | [[file:oo.org][Home：面向对象]] |
