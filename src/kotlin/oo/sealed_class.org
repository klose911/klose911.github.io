#+TITLE: 密封类
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./data_class.html
#+HTML_LINK_HOME: ./oo.html
#+OPTIONS: num:nil timestamp:nil

密封类用来表示 *受限* 的类继承结构：当一个值为有限几种的类型、而不能有任何其他类型时

#+BEGIN_EXAMPLE
  在某种意义上，他们是枚举类的扩展：枚举类型的值集合也是受限的，但每个枚举常量只存在一个实例，而密封类的一个子类可以有可包含状态的多个实例
#+END_EXAMPLE

要声明一个密封类，需要在类名前面添加 _sealed_ 修饰符。虽然密封类也可以有子类，但是 _所有子类_ 都 *必须* 在与 _密封类自身相同的文件_ 中声明

#+BEGIN_EXAMPLE
  在 Kotlin 1.1 之前， 该规则更加严格：子类必须嵌套在密封类声明的内部 
#+END_EXAMPLE

#+BEGIN_SRC kotlin 
  sealed class Expr
  data class Const(val number: Double) : Expr()
  data class Sum(val e1: Expr, val e2: Expr) : Expr()
  object NotANumber : Expr()
#+END_SRC

#+BEGIN_EXAMPLE
  上文示例使用了 Kotlin 1.1 的一个额外的新功能：数据类扩展包括密封类在内的其他类的可能性
#+END_EXAMPLE

+ 一个密封类是 *自身抽象* 的，它 *不能* _直接实例化_ 并可以有抽象 _abstract_ 成员
+ 密封类 *不允许* 有 _非-private_ 构造函数
  #+BEGIN_EXAMPLE
    其构造函数默认为 private
  #+END_EXAMPLE
+ 请注意，扩展密封类子类的类 _间接继承者_ 可以放在任何位置，而无需在同一个文件中 

使用密封类的关键好处在于使用 when 表达式 的时候，如果能够验证语句覆盖了所有情况，就不需要为该语句再添加一个 else 子句了

#+BEGIN_SRC kotlin 
  fun eval(expr: Expr): Double = when(expr) {
      is Const -> expr.number
      is Sum -> eval(expr.e1) + eval(expr.e2)
      NotANumber -> Double.NaN
      // 不再需要 `else` 子句，因为我们已经覆盖了所有的情况
  }
#+END_SRC 

#+BEGIN_EXAMPLE
  当然，这只有用 when 作为表达式（使用结果）而不是作为语句时才有用
#+END_EXAMPLE

| [[file:generic_type.org][Next：范型]] | [[file:data_class.org][Previous：数据类]] | [[file:oo.org][Home：面向对象]] |
