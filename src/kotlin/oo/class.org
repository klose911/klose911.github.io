#+TITLE: 类与继承
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: ./oo.html
#+OPTIONS: num:nil timestamp:nil 
* 类

  Kotlin 中使用关键字 class 声明类

  #+BEGIN_SRC kotlin 
  class Invoice { /*……*/ }
  #+END_SRC

  类声明由类名、类头（指定其类型参数、主构造函数等）以及由花括号包围的类体构成。类头与类体都是可选的； 如果一个类没有类体，可以省略花括号。

  #+BEGIN_SRC kotlin
  class Empty
  #+END_SRC
** 构造函数
   在 Kotlin 中的一个类可以有 _一个_ *主构造函数* 以及 _一个或多个_ *次构造函数* 。主构造函数是 _类头_ 的一部分：它跟在 _类名_ （与可选的类型参数）后。

   #+BEGIN_SRC kotlin 
  class Person constructor(firstName: String) { /*……*/ }
   #+END_SRC

   如果主构造函数没有任何注解或者可见性修饰符，可以省略这个 _constructor_ 关键字：

   #+BEGIN_SRC kotlin
  class Person(firstName: String) { /*……*/ }
   #+END_SRC

   主构造函数不能包含任何的代码

   #+BEGIN_EXAMPLE
     初始化的代码可以放到以 init 关键字作为前缀的初始化块（initializer blocks）中
   #+END_EXAMPLE

   在 _实例初始化_ 期间，初始化块按照它们出现在 _类体中的顺序_ 执行，与 _属性初始化器_ 交织在一起：

   #+BEGIN_SRC kotlin 

  //sampleStart
  class InitOrderDemo(name: String) {
      val firstProperty = "First property: $name".also(::println)

      init {
	  println("First initializer block that prints ${name}")
      }

      val secondProperty = "Second property: ${name.length}".also(::println)

      init {
	  println("Second initializer block that prints ${name.length}")
      }
  }
  //sampleEnd

  fun main() {
      InitOrderDemo("hello")
  }
   #+END_SRC

   请注意， _主构造的参数_ 可以在 _初始化块_ 中使用。它们也可以在类体内声明的 _属性初始化器_ 中使用：

   #+BEGIN_SRC kotlin 
  class Customer(name: String) {
      val customerKey = name.toUpperCase()
  }
   #+END_SRC


   事实上，声明属性以及从主构造函数初始化属性，Kotlin 有简洁的语法：

   #+BEGIN_SRC kotlin 
  class Person(val firstName: String, val lastName: String, var age: Int) { /*……*/ }
   #+END_SRC

   #+BEGIN_EXAMPLE
     与普通属性一样，主构造函数中声明的属性可以是可变的 var 或只读的 val 
   #+END_EXAMPLE


   如果构造函数有 _注解_ 或 _可见性_ 修饰符，这个 _constructor_ *关键字* 是必需的，并且这些修饰符在它前面：

   #+BEGIN_SRC kotlin 
  class Customer public @Inject constructor(name: String) { /*……*/ }
   #+END_SRC
*** 次构造函数
    类也可以声明前缀有 _constructor_ 的 *次构造函数* ： 

    #+BEGIN_SRC kotlin 
  class Person {
      var children: MutableList<Person> = mutableListOf<Person>();
      constructor(parent: Person) {
	  parent.children.add(this)
      }
  }
    #+END_SRC

    如果类有一个主构造函数，每个次构造函数需要 *委托* 给主构造函数， 可以直接委托或者通过别的次构造函数间接委托。委托到同一个类的另一个构造函数用 _this_ 关键字即可：

    #+BEGIN_SRC kotlin 
  class Person(val name: String) {
      var children: MutableList<Person> = mutableListOf<Person>();
      constructor(name: String, parent: Person) : this(name) {
	  parent.children.add(this)
      }
  }
    #+END_SRC
    请注意：
    + _初始化块_ 中的代码实际上会成为 _主构造函数的一部分_ 
    + *委托* 给 _主构造函数_ 会作为 _次构造函数_ 的 _第一条语句_

    #+BEGIN_EXAMPLE
      因此所有初始化块与属性初始化器中的代码都会在次构造函数体之前执行

      即使该类没有主构造函数，这种委托仍会隐式发生，并且仍会执行初始化块
    #+END_EXAMPLE

    #+BEGIN_SRC kotlin 
  //sampleStart
  class Constructors {
      init {
	  println("Init block")
      }

      constructor(i: Int) {
	  println("Constructor")
      }
  }
  //sampleEnd

  fun main() {
      Constructors(1)
  }
    #+END_SRC

    如果一个非抽象类没有声明任何（主或次）构造函数，它会有一个生成的 _不带参数的_ 主构造函数。构造函数的 _默认可见性_ 是 _public_ 。如果不希望类有一个公有构造函数，需要声明一个带有 *非默认可见性* 的空的主构造函数：

    #+BEGIN_SRC kotlin 
  class DontCreateMe private constructor () { /*……*/ }
    #+END_SRC

    #+BEGIN_EXAMPLE
      注意：在 JVM 上，如果主构造函数的所有的参数都有默认值，编译器会生成 一个额外的无参构造函数，它将使用默认值

      这使得 Kotlin 更易于使用像 Jackson 或者 JPA 这样的通过无参构造函数创建类的实例的库
    #+END_EXAMPLE

    #+BEGIN_SRC kotlin 
  class Customer(val customerName: String = "")
    #+END_SRC
** 创建类的实例

   要创建一个类的实例，就像普通函数一样调用构造函数：

   #+BEGIN_SRC kotlin 
  val invoice = Invoice()

  val customer = Customer("Joe Smith")
   #+END_SRC

   #+BEGIN_EXAMPLE
     注意 Kotlin 并没有 new 关键字
   #+END_EXAMPLE
** 类成员
   类可以包含：
   + 构造函数与初始化块
   + 函数
   + 属性
   + 嵌套类与内部类
   + 对象声明
* 继承
  在 Kotlin 中所有类都有一个共同的超类 _Any_ ，这对于没有超类型声明的类是默认超类：

  #+BEGIN_SRC kotlin 
  class Example // 从 Any 隐式继承
  #+END_SRC

  #+BEGIN_EXAMPLE
    Any 有三个方法： equals() 、 hashCode () 与 toString ()。因此，所有 Kotlin 类都定义了这些方法
  #+END_EXAMPLE

  默认所有 Kotlin的类都无法被继承，如果想要让一个类可以被继承，可以使用 _open_ 关键字：

  #+BEGIN_SRC kotlin 
  open class Base //Class is open for inheritance
  #+END_SRC

  如需声明一个显式的超类型，请在类头中把 _超类型_ 放到 _冒号_ 之后：

  #+BEGIN_SRC kotlin 
  open class Base(p: Int)

  class Derived(p: Int) : Base(p)
  #+END_SRC

  + 如果派生类有 _一个主构造_ 函数，其基类可以（并且 *必须* ） 用派生类主构造函数的参数就地初始化
  + 如果派生类没有 _主构造_ 函数，那么每个次构造函数必须使用 _super_ 关键字初始化其基类型，或委托给另一个构造函数做到这一点
    #+BEGIN_EXAMPLE
      注意，在这种情况下，不同的次构造函数可以调用基类型的不同的构造函数
    #+END_EXAMPLE

  #+BEGIN_SRC kotlin 
  class MyView : View {
      constructor(ctx: Context) : super(ctx)

      constructor(ctx: Context, attrs: AttributeSet) : super(ctx, attrs)
  }
  #+END_SRC
** 覆盖方法
   Kotlin 力求清晰显式。因此，Kotlin 对于可覆盖的成员（称之为开放）以及覆盖后的成员需要显式修饰符：

   #+BEGIN_SRC kotlin 
  open class Shape {
      open fun draw() { /*……*/ }
      fun fill() { /*……*/ }
  }

  class Circle() : Shape() {
      override fun draw() { /*……*/ }
  }
   #+END_SRC

   #+BEGIN_EXAMPLE
     Circle.draw() 函数上必须加上 override 修饰符。如果没写，编译器将会报错

     如果函数没有标注 open 如 Shape.fill()，那么子类中不允许定义相同签名的函数， 不论加不加 override

     将 open 修饰符添加到 final 类（即没有 open 的类）的成员上不起作用
   #+END_EXAMPLE

   标记为 _override_ 的成员本身是开放的，也就是说，它可以在子类中覆盖。如果想禁止再次覆盖，使用 _final_ 关键字：

   #+BEGIN_SRC kotlin 
  open class Rectangle() : Shape() {
      final override fun draw() { /*……*/ }
  }
   #+END_SRC

** 覆盖属性
   属性覆盖与方法覆盖类似；在超类中声明然后在派生类中重新声明的属性必须以 override 开头，并且它们必须具有兼容的类型
   #+BEGIN_EXAMPLE
     每个声明的属性可以由具有初始化器的属性或者具有 get 方法的属性覆盖
   #+END_EXAMPLE

   #+BEGIN_SRC kotlin 
  open class Shape {
      open val vertexCount: Int = 0
  }

  class Rectangle : Shape() {
      override val vertexCount = 4
  }
   #+END_SRC


   可以用一个 _var_ 属性覆盖一个 _val_ 属性，但反之则不行

   #+BEGIN_EXAMPLE
     这是允许的，因为一个 val 属性本质上声明了一个 get 方法， 而将其覆盖为 var 只是在子类中额外声明一个 set 方法
   #+END_EXAMPLE

   注意，可以在主构造函数中使用 override 关键字作为属性声明的一部分：

   #+BEGIN_SRC kotlin 
  interface Shape {
      val vertexCount: Int
  }

  class Rectangle(override val vertexCount: Int = 4) : Shape // 总是有 4 个顶点

  class Polygon : Shape {
      override var vertexCount: Int = 0  // 以后可以设置为任何数
  }
   #+END_SRC

** 派生类初始化顺序

   在构造派生类的新实例的过程中，第一步完成其基类的初始化（在之前只有对基类构造函数参数的求值），因此发生在派生类的初始化逻辑运行之前：

   #+BEGIN_SRC kotlin 
  //sampleStart
  open class Base(val name: String) {

      init { println("Initializing Base") }

      open val size: Int = 
	  name.length.also { println("Initializing size in Base: $it") }
  }

  class Derived(
      name: String,
      val lastName: String
  ) : Base(name.capitalize().also { println("Argument for Base: $it") }) {

      init { println("Initializing Derived") }

      override val size: Int =
	  (super.size + lastName.length).also { println("Initializing size in Derived: $it") }
  }
  //sampleEnd

  fun main() {
      println("Constructing Derived(\"hello\", \"world\")")
      val d = Derived("hello", "world")
  }
   #+END_SRC

   这意味着，基类构造函数执行时，派生类中声明或覆盖的属性都还没有初始化

   #+BEGIN_EXAMPLE
     如果在基类初始化逻辑中（直接或通过另一个覆盖的 open 成员的实现间接）使用了任何一个这种属性，那么都可能导致不正确的行为或运行时故障

     设计一个基类时，应该避免在构造函数、属性初始化器以及 init 块中使用 open 成员
   #+END_EXAMPLE

** 调用超类实现
   派生类中的代码可以使用 _super_ 关键字调用其超类的函数与属性访问器的实现：

   #+BEGIN_SRC kotlin 
  open class Rectangle {
      open fun draw() { println("Drawing a rectangle") }
      val borderColor: String get() = "black"
  }

  class FilledRectangle : Rectangle() {
      override fun draw() {
	  super.draw()
	  println("Filling the rectangle")
      }

      val fillColor: String get() = super.borderColor
  }
   #+END_SRC

   在一个内部类中访问外部类的超类，可以通过由外部类名限定的 super 关键字来实现：super@Outer：

   #+BEGIN_SRC kotlin 
  class FilledRectangle: Rectangle() {
      fun draw() { /* …… */ }
      val borderColor: String get() = "black"

      inner class Filler {
	  fun fill() { /* …… */ }
	  fun drawAndFill() {
	      super@FilledRectangle.draw() // 调用 Rectangle 的 draw() 实现
	      fill()
	      println("Drawn a filled rectangle with color ${super@FilledRectangle.borderColor}") // 使用 Rectangle 所实现的 borderColor 的 get()
	  }
      }
  }
   #+END_SRC

** 覆盖规则

   在 Kotlin 中，实现继承由下述规则规定： 如果一个类从它的直接超类继承相同成员的多个实现， 它必须 *覆盖* 这个成员并提供其自己的实现（也许用继承来的其中之一）。 为了表示采用从哪个超类型继承的实现，使用由尖括号中超类型名限定的 super，如 _super<Base>_ ：

   #+BEGIN_SRC kotlin 
  open class Rectangle {
      open fun draw() { /* …… */ }
  }

  interface Polygon {
      fun draw() { /* …… */ } // 接口成员默认就是“open”的
  }

  class Square() : Rectangle(), Polygon {
      // 编译器要求覆盖 draw()：
      override fun draw() {
	  super<Rectangle>.draw() // 调用 Rectangle.draw()
	  super<Polygon>.draw() // 调用 Polygon.draw()
      }
  }
   #+END_SRC

   #+BEGIN_EXAMPLE
     可以同时继承 Rectangle 与 Polygon， 但是二者都有各自的 draw() 实现，所以必须在 Square 中覆盖 draw()， 并提供其自身的实现以消除歧义
   #+END_EXAMPLE
** 抽象类
   类以及其中的某些成员可以声明为 abstract。 抽象成员在本类中可以不用实现

   #+BEGIN_EXAMPLE
     需要注意的是，并不需要用 open 标注一个抽象类或者函数，因为这不言而喻
   #+END_EXAMPLE

   可以用一个抽象成员覆盖一个非抽象的开放成员

   #+BEGIN_SRC kotlin 
  open class Polygon {
      open fun draw() {}
  }

  abstract class Rectangle : Polygon() {
      abstract override fun draw()
  }
   #+END_SRC
** 伴生对象
   如果需要写一个可以无需用一个类的实例来调用、但需要访问类内部的函数（例如，工厂方法），可以把它写成该类内对象声明中的一员。更具体地讲，如果在类内 *声明* 了一个 _伴生对象_ ， 就可以访问其成员，只是以 _类名_ 作为 *限定符* 

   | [[file:field.org][Next：属性与字段]] | [[file:oo.org][Home：面向对象]] | 
