#+TITLE: 数据类
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./extension.html
#+HTML_LINK_HOME: ./oo.html
#+OPTIONS: num:nil timestamp:nil

#+BEGIN_EXAMPLE
  经常创建一些只保存数据的类。 在这些类中，一些标准函数往往是从数据机械推导而来的
#+END_EXAMPLE

在 Kotlin 中，这叫做 *数据类* 并标记为 _data_ ：

#+BEGIN_SRC kotlin 
  data class User(val name: String, val age: Int)
#+END_SRC

编译器自动从主构造函数中声明的所有属性导出以下成员：
+ equals()/hashCode() 对
+ toString() 格式是 "User(name=John, age=42)"
+ _componentN()_ 函数 按声明顺序对应于所有属性
+ _copy()_ 函数

为了确保生成的代码的一致性以及有意义的行为，数据类必须满足以下要求：
+ _主构造函数_ 需要 *至少* 有 _一个参数_
+ 主构造函数的 *所有* _参数_ 需要标记为 _val_ 或 _var_
+ 数据类 *不能* 是 _抽象_ 、 _开放_ 、 _密封_ 或者 _内部_ 的
+ （在1.1之前）数据类只能 *实现* _接口_ 
  #+BEGIN_EXAMPLE
    自 1.1 起，数据类可以扩展其他类
  #+END_EXAMPLE

此外，成员生成遵循关于成员继承的这些规则：
+ 如果在数据类体中有显式实现 equals()、 hashCode() 或者 toString()，或者这些函数在父类中有 final 实现，那么不会生成这些函数，而会使用现有函数
+ 如果超类型具有 _open_ 的 _componentN()_ 函数并且返回兼容的类型， 那么会为数据类生成相应的函数，并覆盖超类的实现
  + 如果超类型的这些函数由于签名不兼容或者是 final 而导致无法覆盖，那么会报错
+ 从一个已具 _copy_ (……) 函数且签名匹配的类型派生一个数据类在 Kotlin 1.2 中已弃用，并且在 Kotlin 1.3 中已 *禁用*
+ 不允许为 _componentN()_ 以及 _copy()_ 函数 _提供_ *显式实现* 

在 JVM 中，如果生成的类需要含有一个 _无参_ 的构造函数，则所有的属性必须指定 *默认值* 

#+BEGIN_SRC kotlin 
  data class User(val name: String = "", val age: Int = 0)
#+END_SRC
* 在类体中声明的属性
  注意：对于那些自动生成的函数，编译器只使用在 _主构造函数_ 内部定义的属性。如需在生成的实现中排除一个属性，请将其 *声明* 在 _类体_ 中：

  #+BEGIN_SRC kotlin 
  data class Person(val name: String) {
      var age: Int = 0
  }
  #+END_SRC

  #+BEGIN_EXAMPLE
    在 toString()、 equals()、 hashCode() 以及 copy() 的实现中只会用到 name 属性，并且只有一个 component 函数 component1()
  #+END_EXAMPLE

  虽然下面两个 Person 对象可以有不同的年龄，但它们会视为相等：

  #+BEGIN_SRC kotlin 
  data class Person(val name: String) {
      var age: Int = 0
  }
  fun main() {
  //sampleStart
      val person1 = Person("John")
      val person2 = Person("John")
      person1.age = 10
      person2.age = 20
  //sampleEnd
      println("person1 == person2: ${person1 == person2}")
      println("person1 with age ${person1.age}: ${person1}")
      println("person2 with age ${person2.age}: ${person2}")
  }
  #+END_SRC
* 复制

  #+BEGIN_EXAMPLE
    在很多情况下，需要复制一个对象改变它的一些属性，但其余部分保持不变
  #+END_EXAMPLE

  copy() 函数就是为此而生成。对于上文的 User 类，其实现会类似下面这样：

  #+BEGIN_EXAMPLE
    fun copy(name: String = this.name, age: Int = this.age) = User(name, age)
  #+END_EXAMPLE

  可以写：
  #+BEGIN_SRC kotlin 
  val jack = User(name = "Jack", age = 1)
  val olderJack = jack.copy(age = 2)
  #+END_SRC
* 解构声明
  为数据类生成的 _Component_ 函数 使它们可在 _解构_ 声明中使用：

  #+BEGIN_SRC kotlin 
  val jane = User("Jane", 35)
  val (name, age) = jane
  println("$name, $age years of age") // 输出 "Jane, 35 years of age"
  #+END_SRC
* 标准数据类
  标准库提供了 _Pair_ 与 _Triple_ 

  #+BEGIN_EXAMPLE
    尽管在很多情况下具名数据类是更好的设计选择， 因为它们通过为属性提供有意义的名称使代码更具可读性
  #+END_EXAMPLE

  | [[file:sealed_class.org][Next：密封类]] | [[file:extension.org][Previous：扩展]] | [[file:oo.org][Home：面向对象]] |
