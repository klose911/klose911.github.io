#+TITLE: 类型别名
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./object.html
#+HTML_LINK_HOME: ./oo.html
#+OPTIONS: num:nil timestamp:nil

类型别名为现有类型提供替代名称

#+BEGIN_EXAMPLE
  如果类型名称太长，可以另外引入较短的名称，并使用新的名称替代原类型名 
#+END_EXAMPLE

它有助于缩短较长的 _泛型_ 类型。 例如，通常缩减集合类型是很有吸引力的

#+BEGIN_SRC kotlin 
  typealias NodeSet = Set<Network.Node>

  typealias FileTable<K> = MutableMap<K, MutableList<File>>
#+END_SRC

可以为 _函数_ 类型 提供另外的别名：

#+BEGIN_SRC kotlin 
  typealias MyHandler = (Int, String, Any) -> Unit

  typealias Predicate<T> = (T) -> Boolean
#+END_SRC

可以为 _内部类_ 和 _嵌套类_ 创建新名称：

#+BEGIN_SRC kotlin 
  class A {
      inner class Inner
  }
  class B {
      inner class Inner
  }

  typealias AInner = A.Inner
  typealias BInner = B.Inner
#+END_SRC

类型别名不会引入新类型。 它们等效于相应的底层类型

#+BEGIN_EXAMPLE
  在代码中添加 typealias Predicate<T> 并使用 Predicate<Int> 时，Kotlin 编译器总是把它扩展为 (Int) -> Boolean 
#+END_EXAMPLE

因此，当需要泛型函数类型时，可以传递该类型的变量，反之亦然：

#+BEGIN_SRC kotlin 
  typealias Predicate<T> = (T) -> Boolean

  fun foo(p: Predicate<Int>) = p(42)

  fun main() {
      val f: (Int) -> Boolean = { it > 0 }
      println(foo(f)) // 输出 "true"

      val p: Predicate<Int> = { it > 0 }
      println(listOf(1, -2).filter(p)) // 输出 "[1]"
  }
#+END_SRC

| [[file:inline_class.org][Next：内联类]] | [[file:object.org][Previous：对象表达式]] | [[file:oo.org][Home：面向对象]] |
