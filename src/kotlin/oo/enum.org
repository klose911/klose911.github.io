#+TITLE: 枚举类
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./inner_class.html
#+HTML_LINK_HOME: ./oo.html
#+OPTIONS: num:nil timestamp:nil

枚举类的最基本的用法是实现 _类型安全_ 的枚举：

#+BEGIN_SRC kotlin 
  enum class Direction {
      NORTH, SOUTH, WEST, EAST
  }
#+END_SRC

每个枚举常量都是一个对象。枚举常量用 _逗号_ 分隔 
* 初始化

  因为每一个枚举都是枚举类的实例，所以他们可以是这样初始化过的：

  #+BEGIN_SRC kotlin 
  enum class Color(val rgb: Int) {
	  RED(0xFF0000),
	  GREEN(0x00FF00),
	  BLUE(0x0000FF)
  }
  #+END_SRC
* 匿名类

  枚举常量还可以声明其带有 _相应方法_ 以及 *覆盖* 了基类方法的 _匿名类_ ： 

  #+BEGIN_SRC kotlin 
  enum class ProtocolState {
      WAITING {
	  override fun signal() = TALKING
      },

      TALKING {
	  override fun signal() = WAITING
      };

      abstract fun signal(): ProtocolState
  }
  #+END_SRC

  如果枚举类定义任何成员，那么使用 _分号_ 将成员定义中的枚举常量定义分隔开 

  #+BEGIN_EXAMPLE
    枚举条目不能包含内部类以外的嵌套类型（已在 Kotlin 1.2 中弃用）
  #+END_EXAMPLE
* 在枚举类中实现接口

  一个枚举类可以实现接口（ *但不能从类继承* ），可以为所有条目提供统一的接口成员实现，也可以在相应匿名类中为每个条目提供各自的实现。只需将接口添加到枚举类声明中即可，如下所示：

  #+BEGIN_SRC kotlin 
  import java.util.function.BinaryOperator
  import java.util.function.IntBinaryOperator

  //sampleStart
  enum class IntArithmetics : BinaryOperator<Int>, IntBinaryOperator {
      PLUS {
	  override fun apply(t: Int, u: Int): Int = t + u
      },
      TIMES {
	  override fun apply(t: Int, u: Int): Int = t * u
      };

      override fun applyAsInt(t: Int, u: Int) = apply(t, u)
  }
  //sampleEnd

  fun main() {
      val a = 13
      val b = 31
      for (f in IntArithmetics.values()) {
	  println("$f($a, $b) = ${f.apply(a, b)}")
      }
  }
  #+END_SRC
* 使用枚举常量

  Kotlin 中的枚举类也有合成方法允许列出定义的枚举常量以及通过名称获取枚举常量。这些方法的签名如下

  #+BEGIN_EXAMPLE
    假设枚举类的名称是 EnumClass）：

    EnumClass.valueOf(value: String): EnumClass
    EnumClass.values(): Array<EnumClass>


    如果指定的名称与类中定义的任何枚举常量均不匹配，valueOf() 方法将抛出 IllegalArgumentException 异常
  #+END_EXAMPLE


  也可以使用 _enumValues<T>()_ 与 _enumValueOf<T>()_ 函数以泛型的方式访问枚举类中的常量 ：

  #+BEGIN_SRC kotlin 
  enum class RGB { RED, GREEN, BLUE }

  inline fun <reified T : Enum<T>> printAllValues() {
      print(enumValues<T>().joinToString { it.name })
  }

  printAllValues<RGB>() // 输出 RED, GREEN, BLUE
  #+END_SRC

  每个枚举常量都具有在枚举类声明中获取其 _名称_ 与 _位置_ 的属性：

  #+BEGIN_SRC kotlin 
  val name: String
  val ordinal: Int
  #+END_SRC

  枚举常量还实现了 _Comparable_ 接口， 其中自然顺序是它们在枚举类中 _定义的顺序_ 

  | [[file:object.org][Next：对象表达式]] | [[file:inner_class.org][Previous：嵌套类]] | [[file:oo.org][Home：面向对象]] |
