#+TITLE: 基本语法
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: ./tutorial.html
#+OPTIONS: num:nil timestamp:nil ^:nil
* 包的定义与导入

  包的声明应处于源文件顶部：

  #+begin_src kotlin 
    package my.demo

    import kotlin.text.*

    // ……
  #+end_src

  目录与包的结构无需匹配：源代码可以在文件系统的任意位置
* 程序入口点
  Kotlin 应用程序的入口点是 _main_ 函数

  #+begin_src kotlin 
    fun main() {
	println("Hello world!")
    }
  #+end_src
* 函数
  带有两个 Int 参数、返回 Int 的函数：

  #+begin_src kotlin 
    //sampleStart
    fun sum(a: Int, b: Int): Int {
	return a + b
    }
    //sampleEnd

    fun main() {
	print("sum of 3 and 5 is ")
	println(sum(3, 5))
    }
  #+end_src

  将表达式作为函数体、返回值类型自动推断的函数：

  #+begin_src kotlin 
    //sampleStart
    fun sum(a: Int, b: Int) = a + b
    //sampleEnd

    fun main() {
	println("sum of 19 and 23 is ${sum(19, 23)}")
    }
  #+end_src

  函数返回无意义的值：

  #+begin_src kotlin 
    //sampleStart
    fun printSum(a: Int, b: Int): Unit {
	println("sum of $a and $b is ${a + b}")
    }
    //sampleEnd

    fun main() {
	printSum(-1, 8)
    }
  #+end_src

  _Unit_ 返回类型可以省略：

  #+begin_src kotlin 
    //sampleStart
    fun printSum(a: Int, b: Int) {
	println("sum of $a and $b is ${a + b}")
    }
    //sampleEnd

    fun main() {
	printSum(-1, 8)
    }
  #+end_src
* 变量
  定义 *只读* _局部变量_ 使用关键字 _val_ 定义。只能为其赋值一次：

  #+begin_src kotlin 
    fun main() {
	//sampleStart
	val a: Int = 1  // 立即赋值
	val b = 2   // 自动推断出 `Int` 类型
	val c: Int  // 如果没有初始值类型不能省略
	c = 3       // 明确赋值
	//sampleEnd
	println("a = $a, b = $b, c = $c")
    }
  #+end_src

  可 *重新赋值* 的变量使用  _var_  关键字：

  #+begin_src kotlin 
    fun main() {
	//sampleStart
	var x = 5 // 自动推断出 `Int` 类型
	x += 1
	//sampleEnd
	println("x = $x")
    }
  #+end_src

  顶层变量：

  #+begin_src kotlin 
    //sampleStart
    val PI = 3.14
    var x = 0

    fun incrementX() { 
		       x += 1 
    }
    //sampleEnd

    fun main() {
	println("x = $x; PI = $PI")
	incrementX()
	println("incrementX()")
	println("x = $x; PI = $PI")
    }
  #+end_src
* 注释
  
  与大多数现代语言一样，Kotlin 支持 _单行_ （或行末）与 _多行_ （块）注释：

  #+begin_src kotlin 
    // 这是一个行注释

    /* 这是一个多行的
     块注释。 */
  #+end_src

  Kotlin 中的块注释可以嵌套：

  #+begin_src kotlin 
    /* 注释从这里开始
    /* 包含嵌套的注释 */     
     并且在这里结束。 */
  #+end_src
* 字符串模板
  #+begin_src kotlin 
    fun main() {
	//sampleStart
	var a = 1
	// 模板中的简单名称：
	val s1 = "a is $a" 

	a = 2
	// 模板中的任意表达式：
	val s2 = "${s1.replace("is", "was")}, but now is $a"
	//sampleEnd
	println(s2)
    }
  #+end_src
* 条件表达式

  #+begin_src kotlin 
    //sampleStart
    fun maxOf(a: Int, b: Int): Int {
	if (a > b) {
	    return a
	} else {
	    return b
	}
    }
    //sampleEnd

    fun main() {
	println("max of 0 and 42 is ${maxOf(0, 42)}")
    }
  #+end_src

  在 Kotlin 中，if 也可以用作表达式：

  #+begin_src kotlin 
    //sampleStart
    fun maxOf(a: Int, b: Int) = if (a > b) a else b
    //sampleEnd

    fun main() {
	println("max of 0 and 42 is ${maxOf(0, 42)}")
    }
  #+end_src
* 空值 与 null 检测

  当某个变量的值可以为 null 的时候，必须在声明处的类型后添加 _?_ 来标识该引用可为空。如果 str 的内容不是数字返回 null：

  #+begin_src kotlin 
    fun parseInt(str: String): Int? {
	// ……
    }
  #+end_src

  使用返回可空值的函数:

  #+begin_src kotlin 
    fun parseInt(str: String): Int? {
	return str.toIntOrNull()
    }

    //sampleStart
    fun printProduct(arg1: String, arg2: String) {
	val x = parseInt(arg1)
	val y = parseInt(arg2)

	// 直接使用 `x * y` 会导致编译错误，因为它们可能为 null
	if (x != null && y != null) {
	    // 在空检测后，x 与 y 会自动转换为非空值（non-nullable）
	    println(x * y)
	}
	else {
	    println("'$arg1' or '$arg2' is not a number")
	}    
    }
    //sampleEnd


    fun main() {
	printProduct("6", "7")
	printProduct("a", "7")
	printProduct("a", "b")
    }
  #+end_src

  或者
  
  #+begin_src kotlin 
    fun parseInt(str: String): Int? {
	return str.toIntOrNull()
    }

    fun printProduct(arg1: String, arg2: String) {
	val x = parseInt(arg1)
	val y = parseInt(arg2)

	//sampleStart
	// ……
	if (x == null) {
	    println("Wrong number format in arg1: '$arg1'")
	    return
	}
	if (y == null) {
	    println("Wrong number format in arg2: '$arg2'")
	    return
	}

	// 在空检测后，x 与 y 会自动转换为非空值
	println(x * y)
	//sampleEnd
    }

    fun main() {
	printProduct("6", "7")
	printProduct("a", "7")
	printProduct("99", "b")
    }
  #+end_src
* 类型检测与自动类型转换
  _is_ 运算符检测一个表达式是否某类型的一个实例。 如果一个不可变的局部变量或属性已经判断出为某类型，那么检测后的分支中可以直接当作该类型使用，无需显式转换：

  #+begin_src kotlin 
    //sampleStart
    fun getStringLength(obj: Any): Int? {
	if (obj is String) {
	    // `obj` 在该条件分支内自动转换成 `String`
	    return obj.length
	}

	// 在离开类型检测分支后，`obj` 仍然是 `Any` 类型
	return null
    }
    //sampleEnd


    fun main() {
	fun printLength(obj: Any) {
	    println("'$obj' string length is ${getStringLength(obj) ?: "... err, not a string"} ")
	}
	printLength("Incomprehensibilities")
	printLength(1000)
	printLength(listOf(Any()))
    }
  #+end_src

  或者
  #+begin_src kotlin 
    //sampleStart
    fun getStringLength(obj: Any): Int? {
	if (obj !is String) return null

	// `obj` 在这一分支自动转换为 `String`
	return obj.length
    }
    //sampleEnd


    fun main() {
	fun printLength(obj: Any) {
	    println("'$obj' string length is ${getStringLength(obj) ?: "... err, not a string"} ")
	}
	printLength("Incomprehensibilities")
	printLength(1000)
	printLength(listOf(Any()))
    }
  #+end_src

  甚至
  #+begin_src kotlin 
    //sampleStart
    fun getStringLength(obj: Any): Int? {
	// `obj` 在 `&&` 右边自动转换成 `String` 类型
	if (obj is String && obj.length > 0) {
	    return obj.length
	}

	return null
    }
    //sampleEnd


    fun main() {
	fun printLength(obj: Any) {
	    println("'$obj' string length is ${getStringLength(obj) ?: "... err, is empty or not a string at all"} ")
	}
	printLength("Incomprehensibilities")
	printLength("")
	printLength(1000)
    }
  #+end_src
* 循环
** for
   #+begin_src kotlin 
     fun main() {
	 //sampleStart
	 val items = listOf("apple", "banana", "kiwifruit")
	 for (item in items) {
	     println(item)
	 }
	 //sampleEnd
     }
   #+end_src

   或者

   #+begin_src kotlin 
     fun main() {
	 //sampleStart
	 val items = listOf("apple", "banana", "kiwifruit")
	 for (index in items.indices) {
	     println("item at $index is ${items[index]}")
	 }
	 //sampleEnd
     }
   #+end_src
** while
   #+begin_src kotlin 
     fun main() {
	 //sampleStart
	 val items = listOf("apple", "banana", "kiwifruit")
	 var index = 0
	 while (index < items.size) {
	     println("item at $index is ${items[index]}")
	     index++
	 }
	 //sampleEnd
     }
   #+end_src
* When 表达式

  #+begin_src kotlin 
    //sampleStart
    fun describe(obj: Any): String =
	when (obj) {
	    1          -> "One"
	    "Hello"    -> "Greeting"
	    is Long    -> "Long"
	    !is String -> "Not a string"
	    else       -> "Unknown"
	}
    //sampleEnd

    fun main() {
	println(describe(1))
	println(describe("Hello"))
	println(describe(1000L))
	println(describe(2))
	println(describe("other"))
    }
  #+end_src
* 使用区间
  使用 _in_ 运算符来检测某个数字是否在指定区间内：

  #+begin_src kotlin 
    fun main() {
	//sampleStart
	val x = 10
	val y = 9
	if (x in 1..y+1) {
	    println("fits in range")
	}
	//sampleEnd
    }
  #+end_src

  检测某个数字是否在指定区间外:

  #+begin_src kotlin 
    fun main() {
	//sampleStart
	val list = listOf("a", "b", "c")

	if (-1 !in 0..list.lastIndex) {
	    println("-1 is out of range")
	}
	if (list.size !in list.indices) {
	    println("list size is out of valid list indices range, too")
	}
	//sampleEnd
    }
  #+end_src

  区间迭代：

  #+begin_src kotlin 
    fun main() {
	//sampleStart
	for (x in 1..5) {
	    print(x)
	}
	//sampleEnd
    }
  #+end_src

  数列迭代：

  #+begin_src kotlin 
    fun main() {
	//sampleStart
	for (x in 1..10 step 2) {
	    print(x)
	}
	println()
	for (x in 9 downTo 0 step 3) {
	    print(x)
	}
	//sampleEnd
    }
  #+end_src
* 集合
  对集合进行迭代：
  #+begin_src kotlin 
    fun main() {
	val items = listOf("apple", "banana", "kiwifruit")
	//sampleStart
	for (item in items) {
	    println(item)
	}
	//sampleEnd
    }
  #+end_src

  使用 _in_ 运算符来判断集合内是否包含某实例：

  #+begin_src kotlin 
    fun main() {
	val items = setOf("apple", "banana", "kiwifruit")
	//sampleStart
	when {
	    "orange" in items -> println("juicy")
	    "apple" in items -> println("apple is fine too")
	}
	//sampleEnd
    }
  #+end_src

  使用 _lambda_ 表达式来过滤 _filter_ 与映射 _map_ 集合：

  #+begin_src kotlin 
    fun main() {
	//sampleStart
	val fruits = listOf("banana", "avocado", "apple", "kiwifruit")
	fruits
	    .filter { it.startsWith("a") }
	    .sortedBy { it }
	    .map { it.toUpperCase() }
	    .forEach { println(it) }
	//sampleEnd
    }
  #+end_src
* 创建基本类及其实例

  #+begin_src kotlin 
    fun main() {
	//sampleStart
	val rectangle = Rectangle(5.0, 2.0)
	val triangle = Triangle(3.0, 4.0, 5.0)
	//sampleEnd
	println("Area of rectangle is ${rectangle.calculateArea()}, its perimeter is ${rectangle.perimeter}")
	println("Area of triangle is ${triangle.calculateArea()}, its perimeter is ${triangle.perimeter}")
    }

    abstract class Shape(val sides: List<Double>) {
	val perimeter: Double get() = sides.sum()
	abstract fun calculateArea(): Double
    }

    interface RectangleProperties {
	val isSquare: Boolean
    }

    class Rectangle(
	var height: Double,
	var length: Double
    ) : Shape(listOf(height, length, height, length)), RectangleProperties {
	override val isSquare: Boolean get() = length == height
	override fun calculateArea(): Double = height * length
    }

    class Triangle(
	var sideA: Double,
	var sideB: Double,
	var sideC: Double
    ) : Shape(listOf(sideA, sideB, sideC)) {
	override fun calculateArea(): Double {
	    val s = perimeter / 2
	    return Math.sqrt(s * (s - sideA) * (s - sideB) * (s - sideC))
	}
    }
  #+end_src

  | [[file:convention.org][Next：习惯用法]] | [[file:tutorial.org][Home：开始]] | 
