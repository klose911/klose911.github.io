#+TITLE: 习惯用法
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./basic.html
#+HTML_LINK_HOME: ./tutorial.html
#+OPTIONS: num:nil timestamp:nil ^:nil

一些在 Kotlin 中广泛使用的语法习惯
* 创建 DTOs（POJOs/POCOs）

  #+begin_src kotlin 
    data class Customer(val name: String, val email: String)
  #+end_src

  会为 Customer 类提供以下功能：
  + 所有属性的 getters （对于 var 定义的还有 setters）
  + equals()
  + hashCode()
  + toString()
  + copy()
  + 所有属性的 component1()、 component2()……
* 函数的默认参数
  #+begin_src kotlin 
    fun foo(a: Int = 0, b: String = "") { …… }
  #+end_src
* 过滤 list
  #+begin_src kotlin 
    val positives = list.filter { x -> x > 0 }
  #+end_src

  或者：

  #+begin_src kotlin 
    val positives = list.filter { it > 0 }
  #+end_src
* 检测元素是否存在于集合中
  #+begin_src kotlin 
    if ("john@example.com" in emailsList) { …… }

    if ("jane@example.com" !in emailsList) { …… }
  #+end_src
* 字符串内插
  #+begin_src kotlin 
    println("Name $name")
  #+end_src
* 类型判断
  #+begin_src kotlin 
    when (x) {
	is Foo //-> ……
	is Bar //-> ……
	else   //-> ……
    }
  #+end_src
* 遍历 map/pair型list
  #+begin_src kotlin 
    for ((k, v) in map) {
	println("$k -> $v")
    }
  #+end_src
* 使用区间
  #+begin_src kotlin 
    for (i in 1..100) { …… }  // 闭区间：包含 100
    for (i in 1 until 100) { …… } // 半开区间：不包含 100
    for (x in 2..10 step 2) { …… }
    for (x in 10 downTo 1) { …… }
    if (x in 1..10) { …… }
  #+end_src
* 只读 list
  #+begin_src kotlin 
    val list = listOf("a", "b", "c")
  #+end_src
* 只读 map
  #+begin_src kotlin 
    val map = mapOf("a" to 1, "b" to 2, "c" to 3)
  #+end_src
* 访问 map
  #+begin_src kotlin 
    println(map["key"])
    map["key"] = value
  #+end_src
* 延迟属性
  #+begin_src kotlin 
    val p: String by lazy {
	// 计算该字符串
    }
  #+end_src
* 扩展函数
  #+begin_src kotlin 
    fun String.spaceToCamelCase() { …… }

    "Convert this to camelcase".spaceToCamelCase()
  #+end_src
* 创建单例
  #+begin_src kotlin 
    object Resource {
	val name = "Name"
    }
  #+end_src
* If not null 缩写
  #+begin_src kotlin 
    val files = File("Test").listFiles()

    println(files?.size)
  #+end_src
* If not null and else 缩写
  #+begin_src kotlin 
    val files = File("Test").listFiles()

    println(files?.size ?: "empty")
  #+end_src
* if null 执行一个语句
  #+begin_src kotlin 
    val values = ……
    val email = values["email"] ?: throw IllegalStateException("Email is missing!")
  #+end_src
* 在可能会空的集合中取第一元素
  #+begin_src kotlin 
    val emails = …… // 可能会是空集合
    val mainEmail = emails.firstOrNull() ?: ""
  #+end_src
* if not null 执行代码
  #+begin_src kotlin 
    val value = ……

    value?.let {
	…… // 代码会执行到此处, 假如data不为null
    }
  #+end_src
* 映射可空值（如果非空的话）
  #+begin_src kotlin 
    val value = ……

    val mapped = value?.let { transformValue(it) } ?: defaultValue  // 如果该值或其转换结果为空，那么返回 defaultValue。
  #+end_src
* 返回 when 表达式
  #+begin_src kotlin 
    fun transform(color: String): Int {
	return when (color) {
	    "Red" -> 0
	    "Green" -> 1
	    "Blue" -> 2
	    else -> throw IllegalArgumentException("Invalid color param value")
	}
    }
  #+end_src
* “try/catch”表达式
  #+begin_src kotlin 
    fun test() {
	val result = try {
	    count()
	} catch (e: ArithmeticException) {
	    throw IllegalStateException(e)
	}

	// 使用 result
    }
  #+end_src
* “if”表达式
  #+begin_src kotlin 
    fun foo(param: Int) {
	val result = if (param == 1) {
	    "one"
	} else if (param == 2) {
	    "two"
	} else {
	    "three"
	}
    }
  #+end_src
* 返回类型为 Unit 的方法的 Builder 风格用法
  #+begin_src kotlin 
    fun arrayOfMinusOnes(size: Int): IntArray {
	return IntArray(size).apply { fill(-1) }
    }
  #+end_src
* 单表达式函数
  #+begin_src kotlin 
    fun theAnswer() = 42
  #+end_src

  等价于
  #+begin_src kotlin 
    fun theAnswer(): Int {
	return 42
    }
  #+end_src

  单表达式函数与其它惯用法一起使用能简化代码，例如和 when 表达式一起使用：

  #+begin_src kotlin 
    fun transform(color: String): Int = when (color) {
	"Red" -> 0
	"Green" -> 1
	"Blue" -> 2
	else -> throw IllegalArgumentException("Invalid color param value")
    }
  #+end_src
* 对一个对象实例调用多个方法 （with）
  #+begin_src kotlin 
    class Turtle {
	fun penDown()
	fun penUp()
	fun turn(degrees: Double)
	fun forward(pixels: Double)
    }

    val myTurtle = Turtle()
    with(myTurtle) { // 画一个 100 像素的正方形
		     penDown()
		     for (i in 1..4) {
			 forward(100.0)
			 turn(90.0)
		     }
		     penUp()
    }
  #+end_src
* 配置对象的属性（apply）
  #+begin_src kotlin 
    val myRectangle = Rectangle().apply {
	length = 4
	breadth = 5
	color = 0xFAFAFA
    }
  #+end_src

  #+begin_example
    这对于配置对于未出现在对象构造函数中的属性非常有用
  #+end_example
* Java 7 的 try with resources
  #+begin_src kotlin 
    val stream = Files.newInputStream(Paths.get("/some/file.txt"))
    stream.buffered().reader().use { reader ->
					 println(reader.readText())
    }
  #+end_src
* 对于需要泛型信息的泛型函数的适宜形式
  #+begin_src kotlin 
    //  public final class Gson {
	//     ……
    //     public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonSyntaxException {
    //     ……

    inline fun <reified T: Any> Gson.fromJson(json: JsonElement): T = this.fromJson(json, T::class.java)
  #+end_src
* 可空布尔
  #+begin_src kotlin 
    val b: Boolean? = ……
    if (b == true) {
	……
    } else {
	// `b` 是 false 或者 null
    }
  #+end_src
* 交换两个变量
  #+begin_src kotlin 
    var a = 1
    var b = 2
    a = b.also { b = a }
  #+end_src
* TODO()：将代码标记为不完整
  Kotlin 的标准库有一个 _TODO()_ 函数，该函数总是抛出一个 _NotImplementedError_ 。 其返回类型为 _Nothing_ ，因此无论预期类型是什么都可以使用它。 还有一个接受 _原因参数_ 的 *重载* ：
  #+begin_src kotlin 
    fun calcTaxes(): BigDecimal = TODO("Waiting for feedback from accounting")
  #+end_src

  #+begin_example
    IntelliJ IDEA 的 kotlin 插件理解 TODO() 的语言，并且会自动在 TODO 工具窗口中添加代码指示
  #+end_example

 
  | [[file:style.org][Next：代码规范]] | [[file:basic.org][Previous：基础用法]] |  [[file:tutorial.org][Home：开始]] | 
