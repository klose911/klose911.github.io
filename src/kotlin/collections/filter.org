#+TITLE: 集合过滤
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./transform.html
#+HTML_LINK_HOME: ./collections.html
#+OPTIONS: num:nil timestamp:nil

过滤是最常用的集合处理任务之一。在Kotlin中，过滤条件由 _谓词_ 定义：
+ 接受一个集合元素并且返回布尔值的 lambda 表达式
  + true 说明给定元素与谓词匹配
  + false 则表示不匹配 

#+BEGIN_EXAMPLE
  标准库包含了能够通过单个调用就可以过滤集合的扩展函数

  这些函数不会改变原始集合，因此它们既可用于可变集合也可用于只读集合

  为了操作过滤结果，应该在过滤后将其赋值给变量或链接其他函数
#+END_EXAMPLE
* 按谓词过滤

  基本的过滤函数是 _filter()_ 。当使用一个谓词来调用时，filter() 返回与其匹配的集合元素：
  + 对于 List 和Set，过滤结果都是一个 List
  + 对 Map 来说结果还是一个 Map 

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four")  
      val longerThan3 = numbers.filter { it.length > 3 }
      println(longerThan3)

      val numbersMap = mapOf("key1" to 1, "key2" to 2, "key3" to 3, "key11" to 11)
      val filteredMap = numbersMap.filter { (key, value) -> key.endsWith("1") && value > 10}
      println(filteredMap)
  //sampleEnd
  }
  #+END_SRC

  filter() 中的谓词只能检查元素的值。如果想在过滤中使用元素在集合中的位置，应该使用 _filterIndexed()_ 。它接受一个带有两个参数的谓词：元素的索引和元素的值 

  如果想使用否定条件来过滤集合，可以使用 _filterNot()_ 。它返回一个让谓词产生 false 的元素列表：

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four")

      val filteredIdx = numbers.filterIndexed { index, s -> (index != 0) && (s.length < 5)  }
      val filteredNot = numbers.filterNot { it.length <= 3 }

      println(filteredIdx)
      println(filteredNot)
  //sampleEnd
  }
  #+END_SRC

  还有一些函数能够通过过滤给定类型的元素来缩小元素的类型：
  + _filterIsInstance()_ 返回给定类型的集合元素
    #+BEGIN_SRC kotlin 
      fun main() {
      //sampleStart
	  val numbers = listOf(null, 1, "two", 3.0, "four")
	  println("All String elements in upper case:")
	  numbers.filterIsInstance<String>().forEach {
	      println(it.toUpperCase())
	  }
      //sampleEnd
      }
    #+END_SRC
    #+BEGIN_EXAMPLE
      在一个 List<Any> 上被调用时，filterIsInstance<T>() 返回一个 List<T>，从而能够在集合元素上调用 T 类型的函数
    #+END_EXAMPLE
  + filterNotNull() 返回所有的非空元素
    #+BEGIN_SRC kotlin 
      fun main() {
      //sampleStart
	  val numbers = listOf(null, "one", "two", null)
	  numbers.filterNotNull().forEach {
	      println(it.length)   // 对可空的 String 来说长度不可用
	  }
      //sampleEnd
      }
    #+END_SRC
    #+BEGIN_EXAMPLE
      在一个 List<T?> 上被调用时，filterNotNull() 返回一个 List<T: Any>，从而让你能够将所有元素视为非空对象
    #+END_EXAMPLE
* 划分
  另一个过滤函数 _partition()_ ：通过一个谓词过滤集合并且将不匹配的元素存放在一个单独的列表中。因此得到一个 List 的 Pair 作为返回值：
  1. 第一个列表包含与谓词匹配的元素
  2. 第二个列表包含原始集合中的所有其他元素 

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four")
      val (match, rest) = numbers.partition { it.length > 3 }

      println(match)
      println(rest)
  //sampleEnd
  }
  #+END_SRC
* 检验谓词
  最后，有些函数只是针对集合元素简单地检测一个谓词：
  + 如果至少有一个元素匹配给定谓词，那么 _any()_ 返回 true
  + 如果没有元素与给定谓词匹配，那么 _none()_ 返回 true
  + 如果所有元素都匹配给定谓词，那么 _all()_ 返回 true
  #+BEGIN_EXAMPLE
    注意，在一个空集合上使用任何有效的谓词去调用 all() 都会返回 true ：这种行为在逻辑上被称为 vacuous truth
  #+END_EXAMPLE

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four")

      println(numbers.any { it.endsWith("e") })
      println(numbers.none { it.endsWith("a") })
      println(numbers.all { it.endsWith("e") })

      println(emptyList<Int>().all { it > 5 })   // vacuous truth
  //sampleEnd
  }
  #+END_SRC

  any() 和 none() 也可以不带谓词使用：如果集合中有元素，any() 返回 true，否则返回 false；none() 则相反 

  #+BEGIN_EXAMPLE
    在这种情况下它们只是用来检查集合是否为空
  #+END_EXAMPLE

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four")
      val empty = emptyList<String>()

      println(numbers.any())
      println(empty.any())

      println(numbers.none())
      println(empty.none())
  //sampleEnd
  }
  #+END_SRC

  #+ATTR_HTML: :border 1 :rules all :frame boader
  | [[file:plus_minus.org][Next：加减]] | [[file:transform.org][Previous：转换]] | [[file:collections.org][Home：集合]] |
