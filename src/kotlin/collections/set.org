#+TITLE: Set
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./list.html
#+HTML_LINK_HOME: ./collections.html
#+OPTIONS: num:nil timestamp:nil

Kotlin 集合包中包含 set 常用操作的扩展函数： 查找 _交集_ 、 _并集_ 或 _差集_ ：
+ 要将两个集合合并为一个（并集），可使用 _union()_ 函数
  + 也能以中缀形式使用 a union b
+ 要查找两个集合中都存在的元素（交集），请使用 _intersect()_ 
+ 要查找另一个集合中不存在的集合元素（差集），请使用 _subtract()_  
  + 这两个函数也能以中缀形式调用

#+BEGIN_EXAMPLE
  注意，对于有序集合，操作数的顺序很重要。在结果集合中，左侧操作数在前
#+END_EXAMPLE

#+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = setOf("one", "two", "three")

      println(numbers union setOf("four", "five"))
      println(setOf("four", "five") union numbers)

      println(numbers intersect setOf("two", "one"))
      println(numbers subtract setOf("three", "four"))
      println(numbers subtract setOf("four", "three")) // 相同的输出
  //sampleEnd
  }
#+END_SRC

#+BEGIN_EXAMPLE
  注意， List 也支持 Set 操作

  但是，对 List 进行 Set 操作的结果仍然是 Set ，因此将删除所有重复的元素
#+END_EXAMPLE

#+ATTR_HTML: :border 1 :rules all :frame boader
| [[file:map.org][Next: Map]] | [[file:list.org][Previous: List]] | [[file:collections.org][Home：集合]] |
