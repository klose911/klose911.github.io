#+TITLE: 操作概述
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./sequence.html
#+HTML_LINK_HOME: ./collections.html
#+OPTIONS: num:nil timestamp:nil

Kotlin 标准库提供了用于对集合执行操作的多种函数。这包括简单的操作，例如 _获取_ 或 _添加_ 元素，以及更复杂的操作，包括 _搜索_ 、 _排序_ 、 _过滤_ 、 _转换_ 等 
* 扩展与成员函数
  集合操作在标准库中以两种方式声明：集合接口的 _成员_ 函数和 _扩展_ 函数：
  + 成员函数定义了对于集合类型是必不可少的操作
    #+BEGIN_EXAMPLE
      例如，Collection 包含函数 isEmpty() 来检查其是否为空； List 包含用于对元素进行索引访问的 get() 等等
    #+END_EXAMPLE
    + 创建自己的集合接口实现时，必须实现其成员函数
      #+BEGIN_EXAMPLE
	为了使新实现的创建更加容易，请使用标准库中集合接口的框架实现：AbstractCollection、AbstractList、AbstractSet、AbstractMap 及其相应可变抽象类
      #+END_EXAMPLE
  + 其他集合操作被声明为扩展函数
    #+BEGIN_EXAMPLE
      这些是过滤、转换、排序和其他集合处理功能
    #+END_EXAMPLE
* 公共操作
  公共操作可用于只读集合与可变集合。常见操作分为以下几类：
  + 集合转换
  + 集合过滤
  + plus 与 minus 操作符
  + 分组
  + 取集合的一部分
  + 取单个元素
  + 集合排序
  + 集合聚合操作

  这些操作将返回其结果，而不会影响原始集合
  #+BEGIN_EXAMPLE
    例如，一个过滤操作产生一个新集合，其中包含与过滤谓词匹配的所有元素

    此类操作的结果应存储在变量中，或以其他方式使用，例如，传到其他函数中
  #+END_EXAMPLE

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four")  
      numbers.filter { it.length > 3 }  // `numbers` 没有任何改变，结果丢失
      println("numbers are still $numbers")
      val longerThan3 = numbers.filter { it.length > 3 } // 结果存储在 `longerThan3` 中
      println("numbers longer than 3 chars are $longerThan3")
  //sampleEnd
  }
  #+END_SRC

  对于某些集合操作，有一个选项可以指定 _目标 _对象。 目标是一个可变集合，该函数将其结果项附加到该可变对象中，而不是在新对象中返回它们 

  #+BEGIN_EXAMPLE
    对于执行带有目标的操作，有单独的函数，其名称中带有 To 后缀，例如，用 filterTo() 代替 filter() 以及用 associateTo() 代替 associate()

    这些函数将目标集合作为附加参数 
  #+END_EXAMPLE

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four")
      val filterResults = mutableListOf<String>()  // 目标对象
      numbers.filterTo(filterResults) { it.length > 3 }
      numbers.filterIndexedTo(filterResults) { index, _ -> index == 0 }
      println(filterResults) // 包含两个操作的结果
  //sampleEnd
  }
  #+END_SRC

  为了方便起见，这些函数将目标集合返回了，因此可以在函数调用的相应参数中直接创建它：

  #+BEGIN_SRC kotlin 
  fun main() {
      val numbers = listOf("one", "two", "three", "four")
  //sampleStart
      // 将数字直接过滤到新的哈希集中，
      // 从而消除结果中的重复项
      val result = numbers.mapTo(HashSet()) { it.length }
      println("distinct item lengths are $result")
  //sampleEnd
  }
  #+END_SRC

  具有目标的函数可用于过滤、关联、分组、展平以及其他操作 
* 写操作

  对于可变集合，还存在可更改集合状态的 _写操作_ 。这些操作包括 _添加_ 、 _删除_ 和 _更新_ 元素

  #+BEGIN_EXAMPLE
    写操作在接下来相应小节里描述
  #+END_EXAMPLE

  对于某些操作，有成对的函数可以执行相同的操作：一个函数就地应用该操作，另一个函数将结果作为单独的集合返回

  #+BEGIN_EXAMPLE
    例如 sort() 就地对可变集合进行排序，因此其状态发生了变化

    sorted() 创建一个新集合，该集合包含按排序顺序相同的元素
  #+END_EXAMPLE

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = mutableListOf("one", "two", "three", "four")
      val sortedNumbers = numbers.sorted()
      println(numbers == sortedNumbers)  // false
      numbers.sort()
      println(numbers == sortedNumbers)  // true
  //sampleEnd
  }
  #+END_SRC

  #+ATTR_HTML: :border 1 :rules all :frame boader
  | [[file:transform.org][Next：转换]] | [[file:sequence.org][Previous：序列]] | [[file:collections.org][Home：集合]] |
