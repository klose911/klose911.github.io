#+TITLE: 取单个元素
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./parts.html
#+HTML_LINK_HOME: ./collections.html
#+OPTIONS: num:nil timestamp:nil

Kotlin 集合提供了一套从集合中检索单个元素的函数。这些函数适用于 _list_ 和 _set_ 

正如 list 的定义所言，list 是有序集合。 因此，list 中的每个元素都有其位置可供引用

#+BEGIN_EXAMPLE
  除了描述的函数外，list 还提供了更广泛的一套方法去按索引检索和搜索元素
#+END_EXAMPLE

反过来，从定义来看，set 并不是有序集合。 但是，Kotlin 中的 Set 按某些顺序存储元素。 这些可以是 _插入顺序_ （在 LinkedHashSet 中）、 _自然排序顺序_ （在 SortedSet 中）或者其他顺序

#+BEGIN_EXAMPLE
  一组元素的顺序也可以是未知的。 在这种情况下，元素仍会以某种顺序排序，因此，依赖元素位置的函数仍会返回其结果

  但是，除非调用者知道所使用的 Set 的具体实现，否则这些结果对于调用者是不可预测的
#+END_EXAMPLE
* 按位置取

  为了检索特定位置的元素，有一个函数 _elementAt()_ 。 用一个整数作为参数来调用它，会得到给定位置的集合元素。 第一个元素的位置是 0，最后一个元素的位置是 (size - 1) 
  #+BEGIN_EXAMPLE
    elementAt() 对于不提供索引访问或非静态已知提供索引访问的集合很有用

    在使用 List 的情况下，使用索引访问操作符 （get() 或 []）更为习惯 
  #+END_EXAMPLE

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = linkedSetOf("one", "two", "three", "four", "five")
      println(numbers.elementAt(3))    

      val numbersSortedSet = sortedSetOf("one", "two", "three", "four")
      println(numbersSortedSet.elementAt(0)) // 元素以升序存储
  //sampleEnd
  }
  #+END_SRC

  还有一些有用的别名来检索集合的第一个和最后一个元素： _first()_  和 _last()_ 

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four", "five")
      println(numbers.first())    
      println(numbers.last())    
  //sampleEnd
  }
  #+END_SRC

  为了避免在检索位置不存在的元素时出现异常，请使用 elementAt() 的安全变体：
  + 当指定位置超出集合范围时， _elementAtOrNull()_ 返回 null
  + _elementAtOrElse()_ 还接受一个 lambda 表达式，该表达式能将一个 Int 参数映射为一个集合元素类型的实例
    + 当使用一个越界位置来调用时，elementAtOrElse() 返回对给定值调用该 lambda 表达式的结果 

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four", "five")
      println(numbers.elementAtOrNull(5))
      println(numbers.elementAtOrElse(5) { index -> "The value for index $index is undefined"})
  //sampleEnd
  }
  #+END_SRC
* 按条件取
  函数 first() 和 last() 还可以在集合中搜索与给定谓词匹配的元素：
  + 当使用测试集合元素的谓词调用 first() 时，会得到对其调用谓词产生 true 的第一个元素
  + 带有一个谓词的 last() 返回与其匹配的最后一个元素 

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four", "five", "six")
      println(numbers.first { it.length > 3 })
      println(numbers.last { it.startsWith("f") })
  //sampleEnd
  }
  #+END_SRC

  如果没有元素与谓词匹配，两个函数都会抛异常。 为了避免它们，请改用 _firstOrNull()_ 和 _lastOrNull()_ ：如果找不到匹配的元素，它们将返回 null

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four", "five", "six")
      println(numbers.firstOrNull { it.length > 6 })
  //sampleEnd
  }
  #+END_SRC

  或者，如果别名更适合的情况，那么可以使用别名：
  + 使用 _find()_ 代替 firstOrNull()
  + 使用 _findLast()_ 代替 lastOrNull()

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf(1, 2, 3, 4)
      println(numbers.find { it % 2 == 0 })
      println(numbers.findLast { it % 2 == 0 })
  //sampleEnd
  }
  #+END_SRC
* 随机取元素

  如果需要检索集合的一个随机元素，那么请调用 _random()_ 函数。 可以不带参数或者使用一个 Random 对象作为随机源来调用它 

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf(1, 2, 3, 4)
      println(numbers.random())
  //sampleEnd
  }
  #+END_SRC
* 检测存在与否
  + 如需检查集合中某个元素的存在，可以使用 _contains()_ 函数。 如果存在一个集合元素等于（equals()）函数参数，那么它返回 true
    + 可以使用 _in_ 关键字以操作符的形式调用 contains()。
  + 如需一次检查多个实例的存在，可以使用这些实例的集合作为参数调用 _containsAll()_ 

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four", "five", "six")
      println(numbers.contains("four"))
      println("zero" in numbers)

      println(numbers.containsAll(listOf("four", "two")))
      println(numbers.containsAll(listOf("one", "zero")))
  //sampleEnd
  }
  #+END_SRC

  此外，可以通过调用 _isEmpty()_ 和 _isNotEmpty()_ 来检查集合中是否包含任何元素

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      val numbers = listOf("one", "two", "three", "four", "five", "six")
      println(numbers.isEmpty())
      println(numbers.isNotEmpty())

      val empty = emptyList<String>()
      println(empty.isEmpty())
      println(empty.isNotEmpty())
  //sampleEnd
  }
  #+END_SRC

  #+ATTR_HTML: :border 1 :rules all :frame boader
  | [[file:sort.org][Next：排序]] | [[file:parts.org][Previous：部分]] | [[file:collections.org][Home：集合]] | 
