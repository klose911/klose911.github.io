#+TITLE: 区间和数列
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./iterator.html
#+HTML_LINK_HOME: ./collections.html
#+OPTIONS: num:nil timestamp:nil 

Kotlin 可通过调用 _kotlin.ranges_ 包中的 _rangeTo()_ 函数及其操作符形式的 _.._ 轻松地创建两个值的区间。 通常，rangeTo() 会辅以 _in_ 或 _!in_ 函数 

#+BEGIN_SRC kotlin 
  if (i in 1..4) {  // 等同于 1 <= i && i <= 4
      print(i)
  }
#+END_SRC


整数类型区间（IntRange、LongRange、CharRange）还有一个拓展特性：可以对其进行 *迭代* 。 这些区间也是相应整数类型的等差数列。 这种区间通常用于 _for_ 循环中的迭代 

#+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      for (i in 1..4) print(i)
  //sampleEnd
  }
#+END_SRC

要反向迭代数字，请使用 _downTo_ 函数：

#+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      for (i in 4 downTo 1) print(i)
  //sampleEnd
  }
#+END_SRC

也可以通过任意步长（不一定为 1 ）迭代数字。 这是通过 _step_ 函数完成的：

#+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      for (i in 1..8 step 2) print(i)
      println()
      for (i in 8 downTo 1 step 2) print(i)
  //sampleEnd
  }
#+END_SRC

要迭代不包含其结束元素的数字区间，请使用 _until_ 函数：

#+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      for (i in 1 until 10) {       // i in [1, 10), 10被排除
	  print(i)
      }
  //sampleEnd
  }
#+END_SRC
* 区间
  区间从数学意义上定义了一个封闭的间隔：它由 _两个端点值_ 定义，这两个端点值都 *包含* 在该区间内。区间的主要操作是 contains，通常以 in 与 !in 操作符的形式使用。

  #+BEGIN_EXAMPLE
    区间是为可比较类型定义的：具有顺序，可以定义任意实例是否在两个给定实例之间的区间内
  #+END_EXAMPLE

  要为类创建一个区间，请在区间 _起始值_ 上调用 _rangeTo()_ 函数，并 *提供* _结束值_ 作为参数。 rangeTo() 通常以操作符 _.._ 形式调用：

  #+BEGIN_SRC kotlin 
  class Version(val major: Int, val minor: Int): Comparable<Version> {
      override fun compareTo(other: Version): Int {
	  if (this.major != other.major) {
	      return this.major - other.major
	  }
	  return this.minor - other.minor
      }
  }

  fun main() {
  //sampleStart
      val versionRange = Version(1, 11)..Version(1, 30)
      println(Version(0, 9) in versionRange)
      println(Version(1, 20) in versionRange)
  //sampleEnd
  }
  #+END_SRC
* 数列
  #+BEGIN_EXAMPLE
    如上个示例所示，整数类型的区间（例如 Int、Long 与 Char）可视为等差数列
  #+END_EXAMPLE

  在 Kotlin 中，这些数列由特殊类型定义： _IntProgression_ 、 _LongProgression_ 与 _CharProgression_ 

  数列具有三个基本属性：
  + first 元素
  + last 元素
  + 一个非零的 step

  首个元素为 first，后续元素是前一个元素加上一个 step。 以确定的步长在数列上进行迭代等效于中基于索引的 for 循环：

  #+BEGIN_SRC kotlin 
  for (int i = first; i <= last; i += step) {
    // ……
  }
  #+END_SRC


  通过迭代数列隐式创建区间时，此数列的 first 与 last 元素是区间的端点，step 为 1 ：

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      for (i in 1..10) print(i)
  //sampleEnd
  }
  #+END_SRC

  要指定数列步长，请在区间上使用 step 函数：

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      for (i in 1..8 step 2) print(i)
  //sampleEnd
  }
  #+END_SRC

  数列的 last 元素是这样计算的：
  + 对于正步长：不大于结束值且满足 _(last - first) % step == 0_ 的 _最大值_ 
  + 对于负步长：不小于结束值且满足 _(last - first) % step == 0_ 的 _最小值_ 

  #+BEGIN_EXAMPLE
    因此，last 元素并非总与指定的结束值相同
  #+END_EXAMPLE

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      for (i in 1..9 step 3) print(i) // 最后一个元素是 7
  //sampleEnd
  }
  #+END_SRC

  要创建反向迭代的数列，请在定义其区间时使用 downTo：

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      for (i in 4 downTo 1) print(i)
  //sampleEnd
  }
  #+END_SRC

  数列实现 _Iterable<N>_ ，其中 N 分别是 Int、Long 或 Char，因此可以在各种集合函数（如 map、filter 与其他）中使用它们：

  #+BEGIN_SRC kotlin 
  fun main() {
  //sampleStart
      println((1..10).filter { it % 2 == 0 })
  //sampleEnd
  }
  #+END_SRC

  #+ATTR_HTML: :border 1 :rules all :frame boader
  | [[file:sequence.org][Next：序列]] | [[file:iterator.org][Previous：迭代]] | [[file:collections.org][Home：集合]] |
