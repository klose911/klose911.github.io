#+TITLE: 从引导程序到内核
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: ./booting.html
#+OPTIONS: num:nil timestamp:nil
* 神奇的电源按钮，接下来会发生什么？

#+begin_example
尽管这是一系列关于 Linux 内核的文章，在第一章并不会从内核代码开始
#+end_example

电脑在按下电源开关的时候，就开始工作。主板发送信号给电源，而电源收到信号后会给电脑供应合适的电量。一旦主板收到了 _电源正常信号_ ，它会尝试启动 CPU 。CPU 则 *复位* _寄存器_ 的所有数据，并设置每个寄存器的 _预定值_ 。80386 以及后来的 CPUs 在电脑复位后，在 CPU 寄存器中定义了如下预定义数据：

#+begin_src c 
  IP          0xfff0
  CS selector 0xf000
  CS base     0xffff0000
#+end_src

这时处理器开始在 *实模式* 工作

#+begin_example
需要退回一点去理解在这种模式下的内存分段机制
#+end_example

** 段式内存寻址
从 8086到现在的 Intel 64 位 CPU，所有 x86兼容处理器都支持 _实模式_

#+begin_example
  8086 处理器有一个20位寻址总线，这意味着它可以对0到 2^20 位地址空间（ 1MB ）进行操作

  不过它只有16位的寄存器，所以最大寻址空间是 2^16 即 0xffff （64 KB）

  由于不能用16位寄存器寻址大于 64KB 的内存，一种替代的方法被设计出来了
#+end_example

实模式使用 _段式内存管理_ 来管理整个内存空间。所有内存被分成固定的 _65536字节_ *64 KB* 大小的小块。一个地址包括两个部分：
+ 数据段起始地址
+ 从该数据段起的偏移量

为了得到内存中的物理地址，要让 _数据段_ *乘* _16_ 并 *加* 上 _偏移量_ ：

#+begin_src c 
  PhysicalAddress = Segment * 16 + Offset
#+end_src

举个例子，如果 CS:IP 是 _0x2000:0x0010_ , 则对应的物理地址将会是：
#+begin_src sh
  >>> hex((0x2000 << 4) + 0x0010)
  '0x20010'
#+end_src

不过如果使用16位2进制能表示的最大值进行寻址：0xffff:0xffff，根据上面的公式，结果将会是：

#+begin_src sh 
  >>> hex((0xffff << 4) + 0xffff)
  '0x10ffef'
#+end_src

这超出 *1MB* _65519 字节_

#+begin_example
所以实模式下， 因为CPU 只能访问 1MB 地址空间，通过禁用 A20线 后 0x10ffef 将变为 0x00ffef
#+end_example
** 跳转到BIOS
#+begin_example
了解了实模式和在实模式下的内存寻址方式，来回头继续来看复位后的寄存器值
#+end_example
_CS 寄存器_ 包含两个部分：可视段选择器和 _隐含基址_ 。 结合之前定义的 CS 基址和 IP 值，逻辑地址应该是：

#+begin_example
0xffff0000:0xfff0
#+end_example

这种形式的起始地址为EIP寄存器里的值加上基址地址：
#+begin_src sh 
  >>> 0xffff0000 + 0xfff0
  '0xfffffff0'
#+end_src

得到的 _0xfffffff0_ 是位于 _4GB - 16 字节_ 处的地址。 这个地方是 *复位向量* [[http://en.wikipedia.org/wiki/Reset_vector][Reset vector]] ，CPU在电源重置后期望执行的第一条指令的内存地址。它包含一个 _jump_ 指令，这个指令通常 *指向* _BIOS入口点_ 。举个例子，如果访问 [[http://www.coreboot.org/][coreboot]] 源代码，将看到：

#+begin_src asm
	  .section ".reset", "ax", %progbits
	  .code16
	  .globl	_start
  _start:
	  .byte  0xe9
	  .int   _start16bit - ( . + 2 )
	  ...
#+end_src

跳转指令 _opcode - 0xe9_ 跳转到地址  __start16bit - ( . + 2)_ 去执行代码：
+ reset 段是 16 字节代码段， 起始于地址 *0xfffffff0* _src/cpu/x86/16bit/reset16.ld_
+ 因此 CPU 复位之后，就会跳到这个地址来执行相应的代码：
  #+begin_src asm 
	    SECTIONS {
	    /* Trigger an error if I have an unuseable start address */
	    _bogus = ASSERT(_start16bit >= 0xffff0000, "_start16bit too low. Please report.");
	    _ROMTOP = 0xfffffff0;
	    . = _ROMTOP;
	    .reset . : {
	    ,*(.reset);
	    . = 15;
	    BYTE(0x00);
	    }
	    }
  #+end_src

#+begin_example
现在BIOS已经开始工作了
#+end_example
** 引导扇区
在初始化和检查硬件之后，需要寻找到一个可引导设备。_可引导设备列表_ *存储* 在 BIOS 配置中, BIOS 将根据其中配置的顺序，尝试从不同的设备上寻找引导程序。
+ 对于硬盘，BIOS 将尝试寻找 _引导扇区_ 。如果在硬盘上存在一个 _MBR分区_
  + 那么引导扇区储存在 *第一个扇区* _512字节_ 的 *头446字节*
  + 引导扇区的最后必须是 _0x55_ 和 _0xaa_ ，这2个字节称为 *魔术字节* _Magic Bytes_ ，如果 BIOS 看到这2个字节，就知道这个设备是一个可引导设备。举个例子：
    #+begin_src asm 
				      ;
				      ; Note: this example is written in Intel Assembly syntax
				      ;
	      [BITS 16]
	      [ORG  0x7c00]

      boot:
	      mov al, '!'
	      mov ah, 0x0e
	      mov bh, 0x00
	      mov bl, 0x07

	      int 0x10
	      jmp $

	      times 510-($-$$) db 0

	      db 0x55
	      db 0xaa
    #+end_src

  这让 _QEM_U 使用刚才新建的 boot 二进制文件作为磁盘镜像
  #+begin_example
    由于这个二进制文件是由上述汇编语言产生，它满足引导扇区(起始设为 0x7c00, 用Magic Bytes结束)的需求

    QEMU将这个二进制文件作为磁盘镜像的主引导记录(MBR)
  #+end_example

运行后看到:

#+ATTR_HTML: image :width 90% 
[[file:../pic/simple_bootloader.png]] 

#+begin_example
  在这个例子中，这段代码被执行在16位的实模式，起始于内存0x7c00，之后调用 0x10 中断打印 ! 符号

  用0填充剩余的510字节并用两个Magic Bytes 0xaa 和 0x55 结束
#+end_example

可以使用 objdump 工具来查看转储信息：
#+begin_src sh 
  $ nasm -f bin boot.nasm
  $ objdump -D -b binary -mi386 -Maddr16,data16,intel boot
#+end_src

#+begin_example
  一个真实的启动扇区包含了分区表，以及用来启动系统的指令，而不是像我们上面的程序，只是输出了一个感叹号就结束了

  从启动扇区的代码被执行开始，BIOS 就将系统的控制权转移给了引导程序
#+end_example

再次强调，上面的引导程序是运行在 *实模式* 下的，因此 CPU 是使用下面的公式进行物理地址的计算的：

#+begin_example
PhysicalAddress = Segment * 16 + Offset
#+end_example

在实模式下，CPU 只能使用16位的通用寄存器。16位寄存器能够表达的最大数值是： _0xffff_ ，所以按照上面的公式计算出的最大物理地址是：

#+begin_src sh 
  >>> hex((0xffff * 16) + 0xffff)
  '0x10ffef'
#+end_src

这个地址在 8086 处理器下，将被转换成地址 *0x0ffef* 。因为，8086 cpu *只* 有 _20位_ 地址线，只能表示 _2^20 = 1MB_ 的地址，而上面这个地址已经超出了 1MB 地址的范围，所以 CPU 就舍弃了最高位

实模式下的 1MB 地址空间分配表：
#+begin_example
  0x00000000 - 0x000003FF - Real Mode Interrupt Vector Table
  0x00000400 - 0x000004FF - BIOS Data Area
  0x00000500 - 0x00007BFF - Unused
  0x00007C00 - 0x00007DFF - Our Bootloader
  0x00007E00 - 0x0009FFFF - Unused
  0x000A0000 - 0x000BFFFF - Video RAM (VRAM) Memory
  0x000B0000 - 0x000B7777 - Monochrome Video Memory
  0x000B8000 - 0x000BFFFF - Color Video Memory
  0x000C0000 - 0x000C7FFF - Video ROM BIOS
  0x000C8000 - 0x000EFFFF - BIOS Shadow Area
  0x000F0000 - 0x000FFFFF - System BIOS
#+end_example
在上面的章节中，CPU 执行的第一条指令是在地址 _0xFFFFFFF0_ 处，这个地址远远大于 0xFFFFF _1MB_
#+begin_example
  那么实模式下的 CPU 是如何访问到这个地址的呢？
#+end_example

coreboot 文档给出了答案:

#+begin_example
0xFFFE_0000 - 0xFFFF_FFFF: 128 kilobyte ROM mapped into address space
#+end_example

_0xFFFFFFF0_ 这个地址被映射到了 _ROM_ ，因此 CPU 执行的第一条指令来自于 ROM，而不是 RAM
* 引导程序
