#+TITLE: 显示模式
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: ./booting.html
#+HTML_LINK_UP: ./part3.html
#+OPTIONS: num:nil timestamp:nil ^:nil

前面内核启动过程之旅停在了对 *set_video* 函数的调用（ [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/main.c#L181][main.c]]）。接下来将读到下面的内容：
+ 显示模式的初始化
+ 在进入保护模式之前的准备工作
+ 正式进入保护模式


* 显示模式
可以在 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/video.c#L315][arch/x86/boot/video.c]] 找到这个函数的定义。 这个函数首先从 _boot_params.hdr 结构_ 获取 _显示模式设置_ ：

#+begin_src c 
  u16 mode = boot_params.hdr.vid_mode;
#+end_src

#+begin_example
  至于 boot_params.hdr 数据结构中的内容，是通过 copy_boot_params 函数实现的

  关于这个函数的实现细节请查看上一节的内容
#+end_example
boot_params.hdr 中的 _vid_mode_ 是 *引导程序* 必须填入的字段。可以在 kernel boot protocol 文档中找到关于 vid_mode 的详细信息：
#+begin_example
  Offset	Proto	Name		Meaning
  /Size
  01FA/2	ALL	    vid_mode	Video mode control
#+end_example

而在 linux kernel boot protocol 文档中定义了如何通过命令行参数的方式为 vid_mode 字段传入相应的值：

#+begin_example
  ,**** SPECIAL COMMAND LINE OPTIONS
  vga=<mode>
  	<mode> here is either an integer (in C notation, either
  	decimal, octal, or hexadecimal) or one of the strings
  	"normal" (meaning 0xFFFF), "ext" (meaning 0xFFFE) or "ask"
  	(meaning 0xFFFD).  This value should be entered into the
  	vid_mode field, as it is used by the kernel before the command
  	line is parsed.
#+end_example

根据上面的描述，可以通过将 _vga_ 选项写入 grub 或者写到引导程序的配置文件，从而让内核命令行得到相应的显示模式设置信息：

#+begin_example
  这个选项可以接受不同类型的值来表示相同的意思

  比如可以传入 0XFFFD 或者 ask，这2个值都表示需要显示一个菜单让用户选择想要的显示模式
#+end_example

#+ATTR_HTML: image :width 90% 
[[file:../pic/video_mode_setup_menu.png]]


通过这个菜单，用户可以选择想要进入的显示模式

#+begin_example
  不过进一步了解显示模式的设置过程之前，先回头了解一些重要的概念
#+end_example

** 内核数据类型
在前面已经接触到了一个类似于 _u16_ 的内核数据类型。下面列出了更多内核支持的数据类型：

#+CAPTION: data type in kernel 
#+ATTR_HTML: :border 1 :rules all :frame boader
| Type | char | short | int | long | u8 | u16 | u32 | u64 |
| Size |    1 |     2 |   4 |    8 |  1 |   2 |   4 |   8 |

#+begin_example
  如果尝试阅读内核代码，最好能够牢记这些数据类型
#+end_example

** 堆操作 API
在 set_video 函数将 vid_mod 的值设置完成之后，将调用 *RESET_HEAP 宏* 将 _HEAP 头_ 指向 *_end* 符号。RESET_HEAP 宏定义在 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/boot.h#L199][boot.h]]：

#+begin_src c 
  #define RESET_HEAP() ((void *)( HEAP = _end ))
#+end_src

#+begin_example
  在上一节中，已经通过 init_heap 函数完成了 HEAP 的初始化，

  而 _end 标号，在 boot.h 中通过 extern char _end[]; 来引用

  从这里可以看出，在内核初始化的时候堆和栈是共享内存空间的
#+end_example

下面一个是 *GET_HEAP 宏* ：

#+begin_src c 
  #define GET_HEAP(type, n)					\
    ((type *)__get_heap(sizeof(type),__alignof__(type),(n)))
#+end_src

这个宏调用了 *__get_heap 函数* 来进行 _内存的分配_ 。__get_heap 需要下面3个参数来进行内存分配操作：
+  某个数据类型所占用的字节数
+ __alignof__(type) : 返回对于请求的数据类型需要怎样的对齐方式
  #+begin_example
    根据我的了解这个是 gcc 提供的一个功能 
  #+end_example
+ n : 需要分配多少个对应数据类型的对象

下面是 __get_heap 函数的实现：
#+begin_src c
  /**
   ,* 分配heap内存
   ,*
   ,* @param s 某个数据类型所占用的字节数
   ,* @param a 对于请求的数据类型需要怎样的对齐方式
   ,* @param n 需要分配多少个对应数据类型的对象
   ,*
   ,* @return 返回HEAP指针
   ,*/
  static inline char *__get_heap(size_t s, size_t a, size_t n)
  {
    char *tmp;

    HEAP = (char *)(((size_t)HEAP+(a-1)) & ~(a-1)); // 根据对齐方式要求（参数 a ）调整 HEAP 的值
    tmp = HEAP; // 将 HEAP 值赋值给一个临时变量 tmp
    HEAP += s*n; // 根据需要分配的对象的个数（参数 n ），预留出所需要的内存
    return tmp; // 将 tmp 返回给调用端
  }
#+end_src

最后一个关于 HEAP 的操作是：

#+begin_src c
  /**
   ,* 判断heap是否有足够的内存
   ,*
   ,* @param n 内存数量
   ,*
   ,* @return 足够内存返回真，否则返回假
   ,*/
  static inline bool heap_free(size_t n)
  {
    // 简单做了一个减法 heap_end - HEAP
    // 如果相减的结果大于请求的内存，那么就返回真，否则返回假 
    return (int)(heap_end - HEAP) >= (int)n;
  }
#+end_src

#+begin_example
下面继续显示模式设置过程
#+end_example

** 设置显示模式
*** stroe_mode_params 
在 RESET_HEAP() 函数被调用之后，set_video 函数接着调用 *store_mode_params* 函数将对应显示模式的相关参数写入 _boot_params.screen_info_ 字段。这个字段的结构定义可以在 [[https://github.com/0xAX/linux/blob/master/include/uapi/linux/screen_info.h][include/uapi/linux/screen_info.h]] 中找到

_store_mode_params_ 函数将调用 *store_cursor_position* 函数将 _当前屏幕上光标的位置_ *保存* 起来：
1. 函数初始化一个类型为 _biosregs_ 的变量，将其中的 _AH 寄存器_ 内容设置成 _0x3_ 
2. 调用 *0x10 BIOS 中断* 
3. 当中断调用返回之后， _DL_ 和 _DH_ 寄存器分别包含了 _当前光标_ 的 *行和列信息* 
4. 这2个信息将被保存到 _boot_params.screen_info_ 字段的 *orig_x* 和 *orig_y* 字段 

在 store_cursor_position 函数执行完毕之后，store_mode_params 函数将调用 *store_video_mode* 函数将当前使用的 _显示模式_ *保存* 到 _boot_params.screen_info.orig_video_mode_ 

然后 store_mode_params 函数将根据当前显示模式的设定，给 _video_segment 变量_ 设置正确的值
#+begin_example
实际上就是设置显示内存的起始地址
#+end_example

在 BIOS 将控制权转移到引导扇区的时候，显示内存地址和显示模式的对应关系如下表所示：
#+begin_example
  0xB000:0x0000 	32 Kb 	Monochrome Text Video Memory
  0xB800:0x0000 	32 Kb 	Color Text Video Memory

  如果当前显示模式是 MDA, HGC 或者单色 VGA 模式，那么 video_sgement 的值将被设置成 0xB000

  如果当前显示模式是彩色模式，那么 video_segment 的值将被设置成 0xB800
#+end_example

在这之后，store_mode_params 函数将保存 _字体大小_ 信息到 *boot_params.screen_info.orig_video_points* ：

#+begin_src c 
  //保存字体大小信息
  set_fs(0);
  font_size = rdfs16(0x485);
  boot_params.screen_info.orig_video_points = font_size;
#+end_src
这段代码首先调用 *set_fs* 函数（在 [[https://github.com/0xAX/linux/blob/master/arch/x86/boot/boot.h][boot.h]] 中定义了许多类似的函数进行寄存器操作）将数字 _0_ 放入 _FS 寄存器_ 。接着从 _内存地址 0x485 处_ 获取 *字体大小* 信息并保存到 _boot_params.screen_info.orig_video_points_

#+begin_src c 
  x = rdfs16(0x44a);
  y = (adapter == ADAPTER_CGA) ? 25 : rdfs8(0x484)+1;
#+end_src

接下来代码将从 _地址 0x44a 处_ 获得 *屏幕列* 信息，从 _地址 0x484 处_ 获得 *屏幕行信息* ，并将它们保存到 _boot_params.screen_info.orig_video_cols_ 和 _boot_params.screen_info.orig_video_lines_

#+begin_example
到这里，store_mode_params 的执行就结束了
#+end_example

*** save_screen 
接下来，set_video 函数将调用 *save_screen* 函数将 _当前屏幕上的所有信息_ *保存* 到 _HEAP_ 中。这个函数首先获得当前屏幕的所有信息（包括屏幕大小，当前光标位置，屏幕上的字符信息），并且保存到 saved_screen 结构体中。这个结构体的定义如下所示：

#+begin_src c 
  static struct saved_screen {
    int x, y; // 屏幕大小
    int curx, cury; // 当前光标位置
    u16 *data; // 屏幕上的字符信息
  } saved;
#+end_src

接下来函数将检查 HEAP 中是否有足够的空间保存这个结构体的数据：
#+begin_src c 
  if (!heap_free(saved.x*saved.y*sizeof(u16)+512)) 
    return;
#+end_src

如果 HEAP 有足够的空间，代码将在 HEAP 中分配相应的空间并且将 saved_screen 保存到 HEAP

*** probe_cards
接下来 set_video 函数将调用 *probe_cards(0)* 。 这个函数简单 *遍历* _所有的显卡_ ，并通过 *调用* _驱动程序_ *设置* _显卡所支持的显示模式_ ：

#+begin_src c 
  for (card = video_cards; card < video_cards_end; card++) {
    if (card->unsafe == unsafe) {
      if (card->probe)
        card->nmodes = card->probe();
      else
        card->nmodes = 0;
    }
   }
#+end_src
如果仔细看上面的代码，会发现 *video_cards* 
#+begin_src c
  extern struct card_info video_cards[], video_cards_end[];
#+end_src

#+begin_example
这个变量并没有被声明，那么程序怎么能够正常编译执行呢？
#+end_example

实际上它指向了一个在 [[https://github.com/0xAX/linux/blob/master/arch/x86/boot/setup.ld][arch/x86/boot/setup.ld]] 中定义的叫做 *.videocards* 的 _内存段_ ：

#+begin_example
  	.videocards	: {
  		video_cards = .;
  		,*(.videocards)
  		video_cards_end = .;
  	}
#+end_example

在内核初始化代码中，对于每个支持的显示模式都是使用下面的代码进行定义的：

#+begin_src c 
  static __videocard video_vga = {
    .card_name	= "VGA",
    .probe		= vga_probe,
    .set_mode	= vga_set_mode,
  };
#+end_src

*__videocard* 是一个宏定义，如下所示：

#+begin_src c 
  #define __videocard struct card_info __section(".videocards") __attribute__((used))
#+end_src

因此 __videocard 是一个 *card_info 结构* ，这个结构定义如下：

#+begin_src c 
  struct card_info {
    const char *card_name;
    int (*set_mode)(struct mode_info *mode);
    int (*probe)(void);
    struct mode_info *modes;
    int nmodes;
    int unsafe;
    u16 xmode_first;
    u16 xmode_n;
  };
#+end_src

在 .videocards 内存段实际上存放的就是 *所有* 被 _内核初始化代码_ *定义* 的 _card_info 结构_

#+begin_example
  .videocards 内存段可以看成是一个数组

  因此所以 probe_cards 函数可以使用 video_cards，通过循环遍历所有的 card_info
#+end_example

*** set_video 主循环
在 probe_cards 执行完成之后，终于进入 set_video 函数的主循环了。在这个循环中
+ 如果 _vid_mode=ask_ ，那么将显示一个菜单让用户选择想要的显示模式，然后代码将根据用户的选择或者 vid_mod 的值 ，通过调用 *set_mode 函数* 来设置正确的显示模式
  + 如果设置成功，循环结束
  + 否则显示菜单让用户选择显示模式，继续进行设置显示模式的尝试

#+begin_src c 
  for (;;) {
    if (mode == ASK_VGA)
      mode = mode_menu();

    if (!set_mode(mode))
      break;

    printf("Undefined video mode number: %x\n", mode);
    mode = ASK_VGA;
   }
#+end_src

可以在 [[https://github.com/0xAX/linux/blob/master/arch/x86/boot/video-mode.c#L147][video-mode.c]] 中找到 *set_mode* 函数的定义
+ 这个函数只接受一个参数，这个参数是对应的 _显示模式的数字表示_
  #+begin_example
    这个数字来自于显示模式选择菜单，或者从内核命令行参数获得
  #+end_example

set_mode 函数实现如下：
1. 首先 *检查* 传入的 mode 参数
2. 然后调用 *raw_set_mode* 函数
   + 将 *遍历* 内核知道的 _所有 card_info 信息_ 
     + 如果发现某张显卡支持传入的模式，调用 card_info 结构中保存的 *set_mode 函数地址* 进行显卡显示模式的设置

比如下面的代码就是 vga显卡 set_mode 函数对应的真正 [[https://github.com/0xAX/linux/blob/master/arch/x86/boot/video-vga.c#L191][vga_set_mode]] 的实现，这个函数根据输入的 _vga 显示模式_ ，调用不同的函数完成显示模式的设置：

#+begin_src c 
  static int vga_set_mode(struct mode_info *mode)
  {
    vga_set_basic_mode();

    force_x = mode->x;
    force_y = mode->y;

    switch (mode->mode) {
    case VIDEO_80x25:
      break;
    case VIDEO_8POINT:
      vga_set_8font();
      break;
    case VIDEO_80x43:
      vga_set_80x43();
      break;
    case VIDEO_80x28:
      vga_set_14font();
      break;
    case VIDEO_80x30:
      vga_set_80x30();
      break;
    case VIDEO_80x34:
      vga_set_80x34();
      break;
    case VIDEO_80x60:
      vga_set_80x60();
      break;
    }
    return 0;
  }
#+end_src

#+begin_example
在上面的代码中，每个 vga_set*** 函数只是简单调用 0x10 BIOS 中断来进行显示模式的设置
#+end_example

在显卡的显示模式被正确设置之后，这个 *最终的显示模式* 被写回 _boot_params.hdr.vid_mode_ 

接下来 set_video 函数将调用 *vesa_store_edid 函数* ， 这个函数只是简单的将 [[https://en.wikipedia.org/wiki/Extended_Display_Identification_Data][EDID]] _Extended Display Identification Data_ 写入内存，以便于内核访问

最后， set_video 将调用 *do_restore 函数* 将前面保存的当前屏幕信息还原到屏幕上 

#+begin_example
到这里为止，显示模式的设置完成，接下来可以切换到保护模式了
#+end_example

* 切换到保护模式之前的最后的准备工作
在进入保护模式之前的最后一个函数调用发生在 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/main.c#L184][main.c]] 中的 *go_to_protected_mode* 函数，就像这个函数的注释说的，这个函数将进行最后的准备工作然后进入保护模式

#+begin_example
下面就来具体看看最后的准备工作是什么，以及系统是如何切换到保护模式的
#+end_example

go_to_protected_mode 函数的实现在 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/pm.c#L104][arch/x86/boot/pm.c]] 

** realmode_switch_hook
首先调用的是 *realmode_switch_hook* 函数，后者如果发现 realmode_switch hook， 那么将调用它并禁止 [[http://en.wikipedia.org/wiki/Non-maskable_interrupt][NMI]] 中断，反之将直接禁止 NMI 中断
#+begin_example
  只有当 bootloader 运行在宿主环境下（比如在 DOS 下运行 ）， hook 才会被使用

  可以在 https://www.kernel.org/doc/Documentation/x86/boot.txt  (ADVANCED BOOT LOADER HOOKS) 中详细了解 hook 函数的信息
#+end_example


#+begin_src c 
  /*
   ,* Invoke the realmode switch hook if present; otherwise
   ,* disable all interrupts.
   ,*/
  static void realmode_switch_hook(void)
  {
    if (boot_params.hdr.realmode_swtch) {
      asm volatile("lcallw *%0"
  		 : : "m" (boot_params.hdr.realmode_swtch)
  		 : "eax", "ebx", "ecx", "edx");
    } else {
      asm volatile("cli");
      outb(0x80, 0x70); /* Disable NMI */
      io_delay();
    }
  }
#+end_src

*realmode_switch* 指向了一个 _16 位实模式代码地址_ （远跳转指针），这个16位代码将禁止 NMI 中断

#+begin_example
所以在上述代码中，如果 realmode_swtch hook 存在，代码是用了 lcallw 指令进行远函数调用
#+end_example

在我的环境中，因为不存在这个 hook ，所以代码是直接进入 else 部分进行了 NMI 的禁止：

#+begin_src c
  asm volatile("cli");
  outb(0x80, 0x70);	/* Disable NMI */
  io_delay();
#+end_src

上面的代码首先调用 _cli_ 汇编指令 *清除* 了 _中断标志 IF_ ，这条指令执行之后，外部中断就被禁止了，紧接着的下一行代码就禁止了 NMI 中断

#+begin_example
  这里简单介绍一下中断。中断是由硬件或者软件产生的

  当中断产生的时候， CPU 将得到通知，这个时候， CPU 将停止当前指令的执行，保存当前代码的环境，然后将控制权移交到中断处理程序

  当中断处理程序完成之后，将恢复中断之前的运行环境，从而被中断的代码将继续运行

  NMI 中断是一类特殊的中断，往往预示着系统发生了不可恢复的错误，所以在正常运行的操作系统中，NMI 中断是不会被禁止的

  但是在进入保护模式之前，由于特殊需求，代码禁止了这类中断

  将在后续的章节中对中断做更多的介绍，这里就不展开了
#+end_example

在 NMI 中断被禁止之后（通过写 _0x80_ 进 *CMOS 地址寄存器* _0x70_ ），函数接着调用了 *io_delay* 函数进行了 _短暂的延时_ 以 *等待* _I/O 操作完成_ 。下面就是 *io_delay* 函数的实现：

#+begin_src c 
  static inline void io_delay(void)
  {
    const u16 DELAY_PORT = 0x80;
    asm volatile("outb %%al,%0" : : "dN" (DELAY_PORT));
  }
#+end_src

对 I/O 端口 _0x80_ 写入任何的字节都将得到 1 ms 的延时

#+begin_example
  在上面的代码中，代码将 al 寄存器中的值写到了这个端口

  在这个 io_delay 调用完成之后， realmode_switch_hook 函数就完成了所有工作
#+end_example

** enable_a20
下一个函数调用是 *enable_a20*，这个函数激活 [[https://en.wikipedia.org/wiki/A20_line][A20 地址线]]，可以在 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/a20.c][arch/x86/boot/a20.c]] 找到这个函数的实现。这个函数会尝试使用不同的方式来使能 A20 地址线


首先将调用 *a20_test_short* （该函数将调用 *a20_test* 函数） 来 *检测* _A20 地址线_ 是否已经被 *激活* 了：
#+begin_src c 
  static int a20_test(int loops)
  {
    int ok = 0;
    int saved, ctr;

    set_fs(0x0000); // 将 0x0000 放入 FS 寄存器
    set_gs(0xffff); // 将 0xffff 放入 GS 寄存器

    saved = ctr = rdfs32(A20_TEST_ADDR); // 通过 rdfs32 函数调用，将 A20_TEST_ADDR 内存地址 (4*0x80) 的内容放入 saved 和 ctr 变量 

    while (loops--) {
      wrfs32(++ctr, A20_TEST_ADDR); // 使用 wrfs32 函数将更新过的 ctr 的值写入 fs:gs 
      io_delay();	/* Serialize and make delay constant */ // 延时 1ms 
      ok = rdgs32(A20_TEST_ADDR+0x10) ^ ctr; // 从 GS:A20_TEST_ADDR+0x10 读取内容 
      if (ok) // 如果该地址内容不为0，那么 A20 已经被激活 
        break; // 
    }

    wrfs32(saved, A20_TEST_ADDR);
    return ok;
  }
#+end_src


如果 A20 没有被激活，代码将尝试使用多种方法进行 A20 地址激活

#+begin_example
其中的一种方法就是调用 BIOS 0X15 中断激活 A20 地址线
#+end_example

如果 enabled_a20 函数调用失败，显示一个错误消息并且调用 *die* 函数结束操作系统运行。die 函数定义在 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/header.S][arch/x86/boot/header.S]]:
#+begin_src asm 
  die:
  	hlt
  	jmp	die
  	.size	die, .-die
#+end_src

** reset_coprocessor
A20 地址线被激活之后，*reset_coprocessor* 函数被调用：

#+begin_src asm 
  	outb(0, 0xf0);
  	outb(0, 0xf1);
#+end_src

这个函数非常简单，通过将 _0_ 写入 I/O 端口 _0xf0_ 和 _0xf1_ 以 *复位* _数字协处理器_


** mask_all_interrupts
接下来 *mask_all_interrupts* 函数将被调用：

#+begin_src asm 
  	outb(0xff, 0xa1);       /* Mask all interrupts on the secondary PIC */
  	outb(0xfb, 0x21);       /* Mask all but cascade on the primary PIC */
#+end_src

这个函数调用 *屏蔽* 了从 _中断控制器_ ( _Programmable Interrupt Controller_ ) 的 *所有中断* ，和 主中断控制器上除 *IRQ2* 以外的所有中断

#+begin_example
  IRQ2是主中断控制器上的级联中断，所有从中断控制器的中断将通过这个级联中断报告给 CPU 
#+end_example


* 设置中断描述符表

* 设置全局描述符表 

* 切换进入保护模式
