#+TITLE: 解压内核
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: ./booting.html
#+HTML_LINK_UP: ./part4.html
#+OPTIONS: num:nil timestamp:nil ^:nil

#+begin_example
  在这一部分回看到跳进内核代码的最后步骤：内核解压前的准备、重定位和直接内核解压
#+end_example
* 内核解压前的准备

在之前的部分，已经在startup_32里面看到了到startup_64的跳转：
#+begin_src asm 
  	pushl	$__KERNEL_CS
  	leal	startup_64(%ebp), %eax
  	...
  	...
  	...
  	pushl	%eax
  	...
  	...
  	...
  	lret
#+end_src

由于加载了新的全局描述符表并且在其他模式有CPU的模式转换（在这里是64位模式），可以在startup_64的开头看到数据段的建立：

#+begin_src asm 
  	.code64
  	.org 0x200
  	ENTRY(startup_64)
  	xorl	%eax, %eax
  	movl	%eax, %ds
  	movl	%eax, %es
  	movl	%eax, %ss
  	movl	%eax, %fs
  	movl	%eax, %gs
#+end_src

#+begin_example
除cs之外的段寄存器，在进入长模式时已经重置
#+end_example

计算 _内核编译时的位置_ 和它 _被加载的位置_ 的 *差* ：

#+begin_src asm 
  	#ifdef CONFIG_RELOCATABLE
  	leaq	startup_32(%rip), %rbp
  	movl	BP_kernel_alignment(%rsi), %eax
  	decl	%eax
  	addq	%rax, %rbp
  	notq	%rax
  	andq	%rax, %rbp
  	cmpq	$LOAD_PHYSICAL_ADDR, %rbp
  	jge	1f
  	#endif
  	movq	$LOAD_PHYSICAL_ADDR, %rbp
  1:
  	movl	BP_init_size(%rsi), %ebx
  	subl	$_end, %ebx
  	addq	%rbp, %rbx
#+end_src

_rbp_ 包含了解压后 _内核的起始地址_ ，在这段代码执行之后 _rbx_ 会包含用于解压的重定位内核代码的地址

#+begin_example
  前面已经在startup_32看到类似的代码（计算重定位地址），但是需要再做这个计算

  因为引导加载器可以用64位引导协议，而startup_32在这种情况下不会执行
#+end_example

接下来是 _栈指针_ 的设置和 _标志寄存器_ 的重置：

#+begin_src asm 
  	leaq	boot_stack_end(%rbx), %rsp

  	pushq	$0
  	popfq
#+end_src

rbx寄存器包含了内核解压代码的起始地址，把这个地址的 *boot_stack_entry* 偏移地址相加放到表示栈顶指针的 _rsp寄存器_ 。在这一步之后，栈就是正确的。可以在汇编源码文件 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/compressed/head_64.S][head_64.S]]  的末尾找到 boot_stack_end 的定义：

#+begin_src asm 
  	.bss
  	.balign 4
  boot_heap:
  	.fill BOOT_HEAP_SIZE, 1, 0
  boot_stack:
  	.fill BOOT_STACK_SIZE, 1, 0
  boot_stack_end:
#+end_src

#+begin_example
  它在.bss节的末尾，就在.pgtable前面

  如果查看 arch/x86/boot/compressed/vmlinux.lds.S 链接脚本，会找到.bss和.pgtable的定义
#+end_example

由于设置了栈，在计算了解压了的内核的重定位地址后，就可以复制压缩了的内核到以上地址。在查看细节之前，先看这段汇编代码：

#+begin_src asm 
  	pushq	%rsi // 为这个寄存器现在存放指向boot_params的指针
  	leaq	(_bss-8)(%rip), %rsi //  rsi包含_bss - 8的绝对地址
  	leaq	(_bss-8)(%rbx), %rdi // rdi包含_bss - 8的重定位的相对地址
  	movq	$_bss, %rcx // 拷贝的大小放入rcx 
  	shrq	$3, %rcx // 
  	std // 设置从后向前拷贝数据
  	rep	movsq // 开始copy
  	cld // 清空DF标志位
  	popq	%rsi // 在代码的结尾，会重新恢复指向boot_params的指针到rsi
#+end_src

1. 把rsi压进栈，因为这个寄存器现在存放指向boot_params的指针，这是包含引导相关数据的实模式结构体。在代码的结尾，会重新恢复指向boot_params的指针到rsi
2. 两个leaq指令用 __bss - 8偏移_ 和 _rip_ 和 _rbx_ 计算有效地址并存放到 _rsi_ 和 _rdi_。压缩了的代码镜像存放在从startup_32到当前的代码和解压了的代码之间。可以通过查看链接脚本 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/compressed/vmlinux.lds.S][arch/x86/boot/compressed/vmlinux.lds.S]] 验证：
   #+begin_src sh 
     . = 0;
     .head.text : {
         _head = . ;
         HEAD_TEXT
         _ehead = . ;
     }
     .rodata..compressed : {
         ,*(.rodata..compressed)
     }
     .text :	{
         _text = .; 	/* Text */
         ,*(.text)
         ,*(.text.*)
         _etext = . ;
     }
   #+end_src
   + _.head.text_ 节包含了 _startup_32_ . 可以从之前的部分回忆起它：
     #+begin_src sh 
       __HEAD
       .code32
       ENTRY(startup_32)
       ...
       ...
       ...
     #+end_src
   + _.text_ 节包含 *解压代码* ：
     #+begin_src sh 
       .text
       relocated:
       ...
       ...
       ...
       /*
       ,* Do the decompression, and jump to the new kernel..
       ,*/
       ...
     #+end_src
   + _.rodata..compressed_ 包含了 *压缩了的内核镜像*
3. 把 *_bss的地址* 放到了 _rcx寄存器_ 。正如在 vmlinux.lds.S链接脚本中看到了一样，它和设置/内核代码一起在所有节的末尾
4. 现在可以开始用 *movsq* 指令每次 _8字节_ 地从 _rsi_ 到 _rdi_ 复制代码
5. 注意: 在数据复制前有 _std_ 指令：它设置DF标志，意味着rsi和rdi会递减
   #+begin_example
     换句话说，会从后往前复制这些字节
   #+end_example
6. 用 _cld_ 指令清除DF标志，并恢复boot_params到rsi 

拷贝完成后 跳转到 .text节的重定位后的地址

#+begin_src asm 
  	leaq	relocated(%rbx), %rax
  	jmp	*%rax
#+end_src
* 内核解压
** 调用 extract_kernel 
_.text节_ 从 *relocated* 标签开始。它做的第一件事是 *清空* _.bss节_ ：

#+begin_src asm 
  	xorl	%eax, %eax // 清空 eax 
  	leaq    _bss(%rip), %rdi // 把_bss的地址放到rdi
  	leaq    _ebss(%rip), %rcx // 把_ebss放到rcx
  	subq	%rdi, %rcx // 把整个 .bss 区 填 0 
  	shrq	$3, %rcx
  	rep	stosq
#+end_src

#+begin_example
  因为很快要跳转到C代码，所以要初始化.bss节
#+end_example

最后，可以调用 *extract_kernel* 函数：

#+begin_src asm 
  	pushq	%rsi
  	movq	%rsi, %rdi // rdi: 指向boot_params结构体的指针 
  	leaq	boot_heap(%rip), %rsi // rsi: 指向早期启动堆的起始地址 boot_heap
  	leaq	input_data(%rip), %rdx // rdx: 指向压缩的内核的地址
  	movl	$z_input_len, %ecx // ecx: 压缩的内核的大小
  	movq	%rbp, %r8 // r8: 解压后内核的起始地址
  	movq	$z_output_len, %r9 // r9: 解压后内核的大小
  	call	extract_kernel
  	popq	%rsi
#+end_src

1. 设置 _rdi_ 为指向 _boot_params结构体_ 的指针并把它保存到栈中
2. 设置 _rsi_ 指向用于 _内核解压的区域_ 
3. 准备extract_kernel的参数并调用这个解压内核的函数。extract_kernel函数在 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/compressed/misc.c][arch/x86/boot/compressed/misc.c]] 源文件定义并有六个参数：
   + rmode: 指向 boot_params 结构体的指针
     #+begin_example
       boot_params 被引导加载器填充或在早期内核初始化时填充
     #+end_example
   + heap: 指向早期启动堆的起始地址 _boot_heap_ 的指针
   + input_data: 指向压缩的内核，即 _arch/x86/boot/compressed/vmlinux.bin.bz2_ 的指针
   + input_len: 压缩的内核的大小
   + output:解压后内核的起始地址
   + output_len: 解压后内核的大小

所有参数根据 [[https://cs61.seas.harvard.edu/site/2024/pdf/x86-64-abi-20210928.pdf][System V Application Binary Interface]] 通过寄存器传递
** extract_kernel
extract_kernel函数 从图形/控制台初始化开始

#+begin_example
  因为不知道是不是从实模式开始，或者是使用了引导加载器，或者引导加载器用了32位还是64位启动协议

  所以这里还要再做一遍某些代码
#+end_example

在最早的初始化步骤后，保存空闲内存的起始和末尾地址
#+begin_example
free_mem_ptr     = heap;
free_mem_end_ptr = heap + BOOT_HEAP_SIZE;
#+end_example

这里 heap 从 arch/x86/boot/compressed/head_64.S 传给 extract_kernel 函数的第二个参数：
#+begin_src asm 
  	leaq	boot_heap(%rip), %rsi
#+end_src

而 boot_heap 定义为：

#+begin_src asm 
  boot_heap:
  	.fill BOOT_HEAP_SIZE, 1, 0
#+end_src

#+begin_example
  BOOT_HEAP_SIZE是一个展开为0x10000 (对bzip2内核是0x400000) 的宏，代表堆的大小 
#+end_example

堆指针初始化后，下一步是从 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/compressed/kaslr.c#L425][arch/x86/boot/compressed/kaslr.c]] 调用 *choose_random_location* 函数

#+begin_example
  从函数名猜到，它选择内核镜像解压到的内存地址

  因为Linux内核支持kASLR，为了安全，它允许解压内核到随机的地址

  在这一部分，不会考虑Linux内核的加载地址的随机化，会在下一部分讨论
#+end_example

回头看  [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/compressed/misc.c][misc.c]]. 在获得内核镜像的地址后，需要有一些检查以确保获得的随机地址是正确对齐的，并且地址没有错误：

#+begin_src c
  if ((unsigned long)output & (MIN_KERNEL_ALIGN - 1))
  		error("Destination physical address inappropriately aligned");

  if (virt_addr & (MIN_KERNEL_ALIGN - 1))
  		error("Destination virtual address inappropriately aligned");

  if (heap > 0x3fffffffffffUL)
  		error("Destination address too large");

  if (virt_addr + max(output_len, kernel_total_size) > KERNEL_IMAGE_SIZE)
  		error("Destination virtual address is beyond the kernel mapping area");

  if ((unsigned long)output != LOAD_PHYSICAL_ADDR)
  		error("Destination address does not match LOAD_PHYSICAL_ADDR");

  if (virt_addr != LOAD_PHYSICAL_ADDR)
  		error("Destination virtual address changed when not relocatable");
#+end_src

通过所有这些检查后，可以看到熟悉的消息：

#+begin_example
Decompressing Linux... 
#+end_example

然后调用解压内核的 *__decompress* 函数：

#+begin_src c 
  __decompress(input_data, input_len, NULL, NULL, output, output_len, NULL, error);
#+end_src

__decompress函数的实现取决于在内核编译期间选择什么压缩算法：

#+begin_src sh 
  #ifdef CONFIG_KERNEL_GZIP
  #include "../../../../lib/decompress_inflate.c"
  #endif

  #ifdef CONFIG_KERNEL_BZIP2
  #include "../../../../lib/decompress_bunzip2.c"
  #endif

  #ifdef CONFIG_KERNEL_LZMA
  #include "../../../../lib/decompress_unlzma.c"
  #endif

  #ifdef CONFIG_KERNEL_XZ
  #include "../../../../lib/decompress_unxz.c"
  #endif

  #ifdef CONFIG_KERNEL_LZO
  #include "../../../../lib/decompress_unlzo.c"
  #endif

  #ifdef CONFIG_KERNEL_LZ4
  #include "../../../../lib/decompress_unlz4.c"
  #endif
#+end_src

在内核解压之后，最后两个函数是 *parse_elf* 和 *handle_relocations* 。这些函数的主要用途是把解压后的内核移动到正确的位置

#+begin_example
  实际上，解压过程会原地解压，还需要把内核移动到正确的地址

  https://en.wikipedia.org/wiki/In-place_algorithm
#+end_example

内核镜像是一个ELF可执行文件，所以parse_elf的主要目标是移动可加载的段到正确的地址。从 _readelf_ 的输出看到可加载的段：

#+begin_src sh 
  readelf -l vmlinux

  Elf file type is EXEC (Executable file)
  Entry point 0x1000000
  There are 5 program headers, starting at offset 64

  Program Headers:
  Type           Offset             VirtAddr           PhysAddr
  FileSiz            MemSiz              Flags  Align
  LOAD           0x0000000000200000 0xffffffff81000000 0x0000000001000000
  0x0000000000893000 0x0000000000893000  R E    200000
  LOAD           0x0000000000a93000 0xffffffff81893000 0x0000000001893000
  0x000000000016d000 0x000000000016d000  RW     200000
  LOAD           0x0000000000c00000 0x0000000000000000 0x0000000001a00000
  0x00000000000152d8 0x00000000000152d8  RW     200000
  LOAD           0x0000000000c16000 0xffffffff81a16000 0x0000000001a16000
  0x0000000000138000 0x000000000029b000  RWE    200000
#+end_src

parse_elf函数的目标是加载这些段到从 *choose_random_location* 函数得到的 _output地址_ 。这个函数从检查ELF签名标志开始：

#+begin_src c 
  Elf64_Ehdr ehdr;
  Elf64_Phdr *phdrs, *phdr;

  memcpy(&ehdr, output, sizeof(ehdr));

  if (ehdr.e_ident[EI_MAG0] != ELFMAG0 ||
      ehdr.e_ident[EI_MAG1] != ELFMAG1 ||
      ehdr.e_ident[EI_MAG2] != ELFMAG2 ||
      ehdr.e_ident[EI_MAG3] != ELFMAG3) {
          error("Kernel is not a valid ELF file");
          return;
  }
#+end_src

+ 如果 ELF 签名无效的，它会打印一条错误消息并停机
+ 如果得到一个有效的ELF文件，从给定的ELF文件遍历所有程序头，并用正确的地址复制所有可加载的段到输出缓冲区：
  #+begin_src c 
    for (i = 0; i < ehdr.e_phnum; i++) {
    		phdr = &phdrs[i];

    		switch (phdr->p_type) {
    		case PT_LOAD:
    #ifdef CONFIG_RELOCATABLE
    				dest = output;
    				dest += (phdr->p_paddr - LOAD_PHYSICAL_ADDR);
    #else
    				dest = (void *)(phdr->p_paddr);
    #endif
    				memmove(dest, output + phdr->p_offset, phdr->p_filesz);
    				break;
    		default:
    				break;
    		}
    }
  #+end_src

#+begin_example
从现在开始，所有可加载的段都在正确的位置
#+end_example

在parse_elf函数之后是调用 *handle_relocations* 函数。这个函数的实现依赖于 *CONFIG_X86_NEED_RELOCS* 内核配置选项。如果它被启用，这个函数调整内核镜像的地址

#+begin_example
只有在内核配置时启用了CONFIG_RANDOMIZE_BASE配置选项才会调用
#+end_example

handle_relocations函数的实现足够简单。这个函数从基准内核加载地址的值减掉LOAD_PHYSICAL_ADDR的值，从而获得内核链接后要加载的地址和实际加载地址的差值。在这之后我们可以进行内核重定位，因为我们知道内核加载的实际地址、它被链接的运行的地址和内核镜像末尾的重定位表

** 进入内核
在内核重定位后，就从 extract_kernel 返回到 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/compressed/head_64.S][arch/x86/boot/compressed/head_64.S]] :

#+begin_src asm 
  	jmp	*%rax // 内核的地址在rax寄存器
#+end_src

#+begin_example
到此为止，就正式进入内核代码里
#+end_example
* 内核地址随机化
Linux内核的入口点是 [[https://github.com/torvalds/linux/blob/v3.18/init/main.c][main.c]] 的 *start_kernel* 函数，它在 *LOAD_PHYSICAL_ADDR* 地址开始执行。这个地址依赖于 *CONFIG_PHYSICAL_START* 内核配置选项，默认为 _0x1000000_ :

#+begin_example
  config PHYSICAL_START
  	hex "Physical address where the kernel is loaded" if (EXPERT || CRASH_DUMP)
  	default "0x1000000"
  	---help---
  	  This gives the physical address where the kernel is loaded.
        ...
        ...
        ...
#+end_example

这个选项在内核配置时可以修改，使得加载地址可以选择为一个随机值。很多时候 CONFIG_RANDOMIZE_BASE内核配置选项在内核配置时应该启用

#+begin_example
  在这种情况下，Linux内核镜像解压和加载的物理地址会被随机化

  接下来考虑 为了安全原因，内核镜像的加载地址被随机化的情况
#+end_example
https://github.com/torvalds/linux/blob/master/Documentation/x86/boot.txt** 页表的初始化
在内核解压器要开始找随机的内核解压和加载地址之前，应该 *初始化恒等映射* （ _identity mapped_ , 虚拟地址和物理地址相同）页表。如果 [[https://en.wikipedia.org/wiki/Booting][引导加载器]] 使用 [[https://github.com/torvalds/linux/blob/master/Documentation/x86/boot.txt][16位或32位引导协议]] ，那么已经有了页表

#+begin_example
  任何情况下，如果内核解压器选择它们之外的内存区域，需要新的页。这就是为什么需要建立新的恒等映射页表

  在此之前，让我们回忆一下是怎么来到这里的
#+end_example

前面已经看到了到长模式的转换，并跳转到了内核解压器的入口点 extract_kernel 函数。随机化从调用这个函数开始：

#+begin_src c 
  void choose_random_location(unsigned long input,
                              unsigned long input_size,
  			                unsigned long *output,
                              unsigned long output_size,
  			                unsigned long *virt_addr)
#+end_src

这个函数有五个参数：
+ input
+ input_size
+ output
+ output_isze
+ virt_addr

第一个input参数来自源文件 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/compressed/misc.c][arch/x86/boot/compressed/misc.c]] 里的extract_kernel函数：
#+begin_src c 
  asmlinkage __visible void *extract_kernel(void *rmode, memptr heap,
  				                          unsigned char *input_data,
  				                          unsigned long input_len,
  				                          unsigned char *output,
  				                          unsigned long output_len)
  {
  		// ...
  		choose_random_location((unsigned long)input_data, input_len,
  							   (unsigned long *)&output,
  							   max(output_len, kernel_total_size),
  							   &virt_addr);
          //  ...
  }
#+end_src

这个参数由 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/compressed/head_64.S][arch/x86/boot/compressed/head_64.S]] 的汇编代码传递：

#+begin_src asm 
  leaq	input_data(%rip), %rdx
#+end_src

*input_data* 由 _mkpiggy_ 程序生成。如果编译过Linux内核源码，会找到这个程序生成的文件，它应该位于 _linux/arch/x86/boot/compressed/piggy.S_ 。这个文件是这样的：
#+begin_src asm 
  .section ".rodata..compressed","a",@progbits
  .globl z_input_len
  z_input_len = 6988196
  .globl z_output_len
  z_output_len = 29207032
  .globl input_data, input_data_end
  input_data:
  .incbin "arch/x86/boot/compressed/vmlinux.bin.gz"
  input_data_end:
#+end_src

它有四个全局符号：
+ 前两个z_input_len和z_output_len是压缩的和解压后的vmlinux.bin.gz的大小
+ 第三个是input_data，它指向二进制格式（去掉所有调试符号、注释和重定位信息）的Linux内核镜像
+ 最后的input_data_end指向压缩的Linux镜像的末尾

#+begin_example
所以 choose_random_location函数的第一个参数是指向嵌入在piggy.o目标文件的压缩的内核镜像的指针
#+end_example

+ choose_random_location函数的第二个参数是 刚刚看到的 *z_input_len* 
+ choose_random_location函数的第三和第四个参数分别是解压后的内核镜像的位置和长度
  + 放置解压后内核的地址来自 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/compressed/head_64.S][arch/x86/boot/compressed/head_64.S]]，并且它是 *startup_32* 对齐到 _2MB_ 边界的地址
  + 解压后的内核的大小来自同样的piggy.S，并且它是 *z_output_len*
+ choose_random_location函数的最后一个参数是内核加载地址的虚拟地址。它和默认的物理加载地址相同：
  #+begin_src c 
    unsigned long virt_addr = LOAD_PHYSICAL_ADDR;
  #+end_src
  + 它依赖于内核配置：
    #+begin_src c
      #define LOAD_PHYSICAL_ADDR ((CONFIG_PHYSICAL_START \
      				+ (CONFIG_PHYSICAL_ALIGN - 1)) \
      				& ~(CONFIG_PHYSICAL_ALIGN - 1))
    #+end_src

** 建立新的恒等映射内存页表
这个函数从检查内核命令行的 _nokaslr_ 选项开始：

#+begin_src c 
  if (cmdline_find_option_bool("nokaslr")) {
  	warn("KASLR disabled: 'nokaslr' on cmdline.");
  	return;
  }
#+end_src
如果有这个选项，那么就退出choose_random_location函数，并且内核的加载地址不会随机化。相关的命令行选项可以在 [[https://github.com/torvalds/linux/blob/v3.18/Documentation/kernel-parameters.txt][内核文档]]找到：
#+begin_example
  kaslr/nokaslr [X86]

  Enable/disable kernel and module base offset ASLR
  (Address Space Layout Randomization) if built into
  the kernel. When CONFIG_HIBERNATION is selected,
  kASLR is disabled by default. When kASLR is enabled,
  hibernation will be disabled.
#+end_example

假设没有把nokaslr传到内核命令行，并且CONFIG_RANDOMIZE_BASE启用了内核配置选项。下一步：

#+begin_src c 
  initialize_identity_maps();
#+end_src

它在 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/boot/compressed/pagetable.c][arch/x86/boot/compressed/pagetable.c]] 定义。这个函数从初始化 *x86_mapping_info结构体* 的一个实例开始：
#+begin_src c 
  mapping_info.alloc_pgt_page = alloc_pgt_page;
  mapping_info.context = &pgt_data;
  mapping_info.page_flag = __PAGE_KERNEL_LARGE_EXEC | sev_me_mask;
  mapping_info.kernpg_flag = _KERNPG_TABLE | sev_me_mask;
#+end_src

x86_mapping_info结构体在 [[https://github.com/torvalds/linux/blob/v3.18/arch/x86/include/asm/init.h][arch/x86/include/asm/init.h]] 头文件定义：

#+begin_src c 
  struct x86_mapping_info {
  	void *(*alloc_pgt_page)(void *); // 为一个页表项分配空间时调用的回调函数 
  	void *context; // 跟踪已分配页表的alloc_pgt_data结构体的实例
  	unsigned long page_flag; // PMD或PUD表项的标志
  	unsigned long offset; // 内核虚拟地址到PMD级物理地址的偏移
  	bool direct_gbpages; // 对大页的支持
  	unsigned long kernpg_flag; // 未来被覆盖的内核页的标志
  };
#+end_src

#+begin_example
  这个结构体提供了关于内存映射的信息

  在前面的部分，已经建立了初始的从0到4G的页表，现在可能需要访问4G以上的内存来在随机的位置加载内核

  所以，initialize_identity_maps函数初始化一个内存区域，它用于可能需要的新页表
#+end_example

+ alloc_pgt_page: 为一个页表项分配空间时调用的回调函数
+ context: 用于跟踪已分配页表的alloc_pgt_data结构体的实例
+ page_flag: PMD或PUD表项的标志
+ kernpg_flag: 在之后被覆盖的内核页的标志
+ direct_gbpages: 对大页的支持
+ offset: 内核虚拟地址到PMD级物理地址的偏移 

alloc_pgt_page 函数检查有一个新页的空间，从缓冲区分配新页并返回新页的地址：
#+begin_src c 
  entry = pages->pgt_buf + pages->pgt_buf_offset;
  pages->pgt_buf_offset += PAGE_SIZE;
#+end_src

缓冲区在此结构体中：
#+begin_src c 
  struct alloc_pgt_data {
  		unsigned char *pgt_buf;
  		unsigned long pgt_buf_size;
  		unsigned long pgt_buf_offset;
  };
#+end_src
initialize_identity_maps函数最后的目标是初始化 pgdt_buf_size 和 pgt_buf_offset. 由于只是在初始化阶段，initialize_identity_maps函数设置 pgt_buf_offset 为0:

#+begin_src c 
  pgt_data.pgt_buf_offset = 0;
#+end_src

#+begin_example
pgt_data.pgt_buf_size会根据引导加载器所用的引导协议（64位或32位）被设置为77824或69632
#+end_example

pgt_data.pgt_buf也是一样。如果引导加载器从 *startup_32* 引导内核，pgdt_data.pgdt_buf会指向已经在 [[https://github.com/torvalds/linux/blob/master/v3.18/x86/boot/compressed/head_64.S][arch/x86/boot/compressed/head_64.S]] 初始化的页表的末尾：

#+begin_src c 
  pgt_data.pgt_buf = _pgtable + BOOT_INIT_PGT_SIZE;
#+end_src

_pgtable指向这个页表 [[https://github.com/torvalds/linux/blob/master/v3.18/x86/boot/compressed/vmlinux.lds.S][_pgtable]] 的开头

另一方面，如果引导加载器用64位引导协议并在 *startup_64* 加载内核，早期页表应该由引导加载器建立，并且_pgtable会被重写：

#+begin_src c 
  pgt_data.pgt_buf = _pgtable
#+end_src

#+begin_example
在新页表的缓冲区被初始化之下，回到 choose_random_location函数
#+end_example
** 避开保留的内存范围
#+begin_example
  在恒等映射页表相关的数据被初始化之后，可以开始选择放置解压后内核的随机位置

  但是正如你猜的那样，不能选择任意地址

  在内存的范围中，有一些保留的地址。这些地址被重要的东西占用，如initrd, 内核命令行等等
#+end_example

函数 *mem_avoid_init* 会做这件事。所有不安全的内存区域会收集到：

#+begin_src c 
  mem_avoid_init(input, input_size, *output);

  struct mem_vector {
  	unsigned long long start;
  	unsigned long long size;
  };

  static struct mem_vector mem_avoid[MEM_AVOID_MAX];
#+end_src

其中 *MEM_AVOID_MAX* 来自枚举类型 *mem_avoid_index* , 定义在源文件 [[https://github.com/torvalds/linux/blob/master/arch/x86/boot/compressed/kaslr.c][arch/x86/boot/compressed/kaslr.c]] 中，代表不同类型的保留内存区域：

#+begin_src c 
  enum mem_avoid_index {
  		MEM_AVOID_ZO_RANGE = 0,
  		MEM_AVOID_INITRD,
  		MEM_AVOID_CMDLINE,
  		MEM_AVOID_BOOTPARAMS,
  		MEM_AVOID_MEMMAP_BEGIN,
  		MEM_AVOID_MEMMAP_END = MEM_AVOID_MEMMAP_BEGIN + MAX_MEMMAP_REGIONS - 1,
  		MEM_AVOID_MAX,
  };
#+end_src

mem_avoid_init 主要目标是在mem_avoid数组存放关于被mem_avoid_index枚举类型描述的保留内存区域的信息，并且在新的恒等映射缓冲区为这样的区域创建新页。函数里的几个部分很相似，先看看其中一个：

#+begin_src c 
  mem_avoid[MEM_AVOID_ZO_RANGE].start = input;
  mem_avoid[MEM_AVOID_ZO_RANGE].size = (output + init_size) - input;
  add_identity_map(mem_avoid[MEM_AVOID_ZO_RANGE].start,
  				 mem_avoid[MEM_AVOID_ZO_RANGE].size);
#+end_src

mem_avoid_init函数的开头尝试避免用于 *当前内核解压的内存区域*
1. 用这个区域的 _起始地址_ 和 _大小_ 填写 *mem_avoid数组* 的一项
2. 调用 *add_identity_map* 函数，它会为这个区域建立恒等映射页。add_identity_map函数同样在 [[https://github.com/torvalds/linux/blob/master/arch/x86/boot/compressed/kaslr.c][arch/x86/boot/compressed/kaslr.c]] 定义：
   #+begin_src c 
     void add_identity_map(unsigned long start, unsigned long size)
     {
     		unsigned long end = start + size;

     		start = round_down(start, PMD_SIZE);
     		end = round_up(end, PMD_SIZE);
     		if (start >= end)
     				return;

     		kernel_ident_mapping_init(&mapping_info, (pgd_t *)top_level_pgt,
     								  start, end);
     }
   #+end_src
   + 它对齐内存到 2MB 边界并检查给定的起始地址和终止地址
   + 调用 *kernel_ident_mapping_init* 函数，它在源文件 [[https://github.com/torvalds/linux/blob/master/arch/x86/mm/ident_map.c][arch/x86/mm/ident_map.c]] 中，并传入 _初始化好的mapping_info实例_ 、 _顶层页表的地址_ 和建立 _新的恒等映射的内存区域的地址_
     + 为新页设置默认的标志，如果它们没有被给出：
       #+begin_src c 
	 if (!info->kernpg_flag)
	 		info->kernpg_flag = _KERNPG_TABLE;
       #+end_src
     + 建立新的2MB (因为mapping_info.page_flag中的PSE位) 给定地址相关的页表项（五级页表中的PGD -> P4D -> PUD -> PMD或者四级页表中的PGD -> PUD -> PMD）
       #+begin_src c 
	 for (; addr < end; addr = next) {
	 		p4d_t *p4d;

	 		next = (addr & PGDIR_MASK) + PGDIR_SIZE; // 找给定地址在 页全局目录 的下一项 
	 		if (next > end) // 如果它大于给定的内存区域的末地址end，把它设为end
	 				next = end; 

	 		p4d = (p4d_t *)info->alloc_pgt_page(info->context); // 用之前看过的x86_mapping_info回调函数分配一个新页 
	 		result = ident_p4d_init(info, p4d, addr, next); // ident_p4d_init函数做同样的事情，但是用于低层的页目录 (p4d -> pud -> pmd)

	 		return result;
	 }
       #+end_src

#+begin_example
  这不是mem_avoid_init函数的末尾，但是其他部分类似

  它建立用于 initrd、内核命令行等数据的页
#+end_example

** 物理地址随机化
在保留内存区域存储在mem_avoid数组并且为它们建立了恒等映射页之后，选择 *最小可用的地址* 作为解压内核的随机内存区域：

#+begin_src c 
  min_addr = min(*output, 512UL << 20);
#+end_src

#+begin_example
它应该小于512MB. 选择这个512MB的值只是避免低内存区域中未知的东西
#+end_example

下一步是选择随机的物理和虚拟地址来加载内核。首先是物理地址：

#+begin_src c 
  random_addr = find_random_phys_addr(min_addr, output_size);
#+end_src

*find_random_phys_addr* 函数在 [[https://github.com/torvalds/linux/blob/master/arch/x86/boot/compressed/kaslr.c][同一个]] 源文件中定义：

#+begin_src c 
  static unsigned long find_random_phys_addr(unsigned long minimum,
                                             unsigned long image_size)
  {
  		minimum = ALIGN(minimum, CONFIG_PHYSICAL_ALIGN);

  		if (process_efi_entries(minimum, image_size))
  				return slots_fetch_random();

  		process_e820_entries(minimum, image_size);
  		return slots_fetch_random();
  }
#+end_src

*process_efi_entries* 函数的主要目标是在整个可用的内存找到所有的合适的内存区域来加载内核。如果内核没有在支持EFI的系统中编译和运行，继续在 [[https://en.wikipedia.org/wiki/E820][e820]] 区域中找这样的内存区域。所有找到的内存区域会存储 *slot_area* 数组中：

#+begin_src c 
  struct slot_area {
  	unsigned long addr;
  	int num;
  };

  #define MAX_SLOT_AREA 100

  static struct slot_area slot_areas[MAX_SLOT_AREA];
#+end_src

内核解压器应该选择这个数组随机的索引，并且它会是内核解压的随机位置。这个选择会被 *slots_fetch_random* 函数执行：

#+begin_src c
  // 通过kaslr_get_random_long函数从slot_areas数组选择随机的内存范围
  slot = kaslr_get_random_long("Physical") % slot_max; 
#+end_src

kaslr_get_random_long函数在源文件 [[https://github.com/torvalds/linux/blob/master/arch/x86/lib/kaslr.c][arch/x86/lib/kaslr.c]] 中定义，它返回一个随机数

#+begin_example
  注意：这个随机数会通过不同的方式得到，取决于内核配置、系统机会（基于时间戳计数器的随机数、rdrand等等）
#+end_example

** 虚拟地址随机化
在内核解压器选择了随机内存区域后，新的恒等映射页会为这个区域按需建立：

#+begin_src c 
  random_addr = find_random_phys_addr(min_addr, output_size);

  if (*output != random_addr) {
  		add_identity_map(random_addr, output_size);
  		*output = random_addr;
  }
#+end_src

#+begin_example
此时 output 会存放内核将被解压的一个内存区域的基地址
#+end_example
但是现在，只是随机化了物理地址。而在x86_64架构，虚拟地址也应该被随机化：

#+begin_src c 
  if (IS_ENABLED(CONFIG_X86_64))
  		random_addr = find_random_virt_addr(LOAD_PHYSICAL_ADDR, output_size);

  *virt_addr = random_addr;
#+end_src

*find_random_virt_addr* 函数计算可以保存内存镜像的虚拟内存范围的数量并且调用在尝试找到随机的物理地址的时候，之前已经看到的 kaslr_get_random_long函数 

#+begin_example
  对于非x86_64架构，随机化的虚拟地址和随机化的物理地址相同

  到此为止同时有了用于解压内核的随机化的物理(*output)和虚拟(*virt_addr)基地址
#+end_example

