#+TITLE: 对象处理机制
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: ./data_type.html
#+OPTIONS: num:nil timestamp:nil ^:nil

在 Redis 的命令中，用于对键 _key_ 进行处理的命令占了很大一部分， 而对于键所保存的值的类型 _键的类型_ ，键能执行的命令又各不相同 

#+begin_example
  比如说， LPUSH 和 LLEN 只能用于列表键， 而 SADD 和 SRANDMEMBER 只能用于集合键.....

  另外一些命令， 比如 DEL 、TTL 和 TYPE ， 可以用于任何类型的键

  但是， 要正确实现这些命令， 必须为不同类型的键设置不同的处理方式

  比如说， 删除一个列表键和删除一个字符串键的操作过程就不太一样
#+end_example
所以Redis 必须让每个键都带有类型信息， 使得程序可以检查键的 *类型* ， 并为它选择合适的处理方式

另外 Redis 的每一种数据类型，比如字符串、列表、有序集， 它们都拥有不只一种底层实现（Redis 内部称之为编码，encoding）。这说明， 每当对某种数据类型的键进行操作时， 程序都必须根据键所采取的编码， 进行不同的操作

#+begin_example
  比如说， 集合类型就可以由字典和整数集合两种不同的数据结构实现

  但是， 当用户执行 ZADD 命令时， 他/她应该不必关心集合使用的是什么编码， 只要 Redis 能按照 ZADD 命令的指示， 将新元素添加到集合就可以了
#+end_example

操作数据类型的命令除了要对键的类型进行检查之外， 还需要根据数据类型的不同编码进行 *多态* 处理

为了解决以上问题， Redis 构建了自己的类型系统， 这个系统的主要功能包括：
+ redisObject 对象
+ 基于 redisObject 对象的类型检查
+ 基于 redisObject 对象的显式多态函数
+ 对 redisObject 进行分配、共享和销毁的机制

#+begin_example
  因为 C 并不是面向对象语言，这里将 redisObject 称呼为对象：

  1. 为了讲述的方便
  2. 希望通过模仿 OOP 的常用术语，让这里的内容更容易被理解

  redisObject 实际上是只是一个结构 (struct) 类型
#+end_example  
* redisObject 
