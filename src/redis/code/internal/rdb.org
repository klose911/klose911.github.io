#+TITLE: RDB
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: ./db.html
#+HTML_LINK_HOME: ./internal.html
#+OPTIONS: num:nil timestamp:nil ^:nil

#+begin_example
在运行情况下， Redis 以数据结构的形式将数据维持在内存中
#+end_example

为了让这些数据在 Redis 重启之后仍然可用， Redis 最初提供了 _RDB_ 持久化模式：
+ 在 Redis 运行时， RDB 程序将 _当前内存_ 中的 *数据库快照* 保存到 _磁盘文件_ 中
+ 在 Redis 重启动时， RDB 程序可以通过 *载入* _RDB 文件_ 来 *还原* 数据库的状态

#+ATTR_HTML: image :width 90% 
[[file:../pic/graphviz-cd96bfa5c61ef2b8dd69a9b0a97cde047cb722a8.svg]]
  
RDB 功能最核心的是 _rdbSave_ 和 _rdbLoad_ 两个函数
+ 前者用于 *生成* _RDB 文件_ 到磁盘
+ 后者则用于将 RDB 文件中的数据重新 *载入* 到 _内存_ 中 

#+begin_example
  本章先介绍 SAVE 和 BGSAVE 命令的实现， 以及 rdbSave 和 rdbLoad 两个函数的运行机制

  然后以图表的方式， 分部分来介绍 RDB 文件的组织形式

  因为涉及 RDB 运行的相关机制， 如果还没了解过 RDB 功能的话， 请先阅读 Redis 官网上的 persistence 手册 
#+end_example
* 保存
_rdbSave_ 函数负责将 _内存中的数据库数据_ 以 _RDB_ 格式 *保存* 到 _磁盘_ 中， 如果 RDB 文件已 _存在_ ， 那么新的 RDB 文件将 *替换* 已有的 RDB 文件。在保存 RDB 文件期间，  _主进程_ 会被 *阻塞* ， 直到保存完成为止 

_SAVE_ 和 _BGSAVE_ 两个命令都会调用 rdbSave 函数，但它们调用的方式各有不同：
+ SAVE: 直接调用 rdbSave ，阻塞 Redis 主进程，直到保存完成为止
  #+begin_example
    在主进程阻塞期间，服务器不能处理客户端的任何请求
  #+end_example
+ BGSAVE: 则 _fork_ 出一个 _子进程_ ，子进程负责调用 rdbSave ，并在 _保存完成之后_ 向 _主进程_ *发送* _信号_ ，通知保存已完成
  #+begin_example
    因为 rdbSave 在子进程被调用，所以 Redis 服务器在 BGSAVE 执行期间仍然可以继续处理客户端的请求
  #+end_example

通过伪代码来描述这两个命令，可以很容易地看出它们之间的区别：
#+begin_src python 
  def SAVE():
      rdbSave()

  def BGSAVE():
      pid = fork()

      if pid == 0:
	  rdbSave() # 子进程保存 RDB
      elif pid > 0:
	  handle_request() # 父进程继续处理请求，并等待子进程的完成信号

      else:
	  handle_fork_error() # pid == -1, 处理 fork 错误
#+end_src
** SAVE 、 BGSAVE 、 AOF 写入和 BGREWRITEAOF
#+begin_example
  除了了解 RDB 文件的保存方式之外， 可能还想知道

  两个 RDB 保存命令能否同时使用？ 它们和 AOF 保存工作是否冲突？
#+end_example

*** SAVE
前面提到过， 当 _SAVE_ 执行时， Redis 服务器是 *阻塞* 的， 所以当 SAVE 正在执行时， 新的 _SAVE_  、 _BGSAVE_ 或 _BGREWRITEAOF_ 调用都 *不会产生任何作用* 

#+begin_example
  只有在上一个 SAVE 执行完毕、 Redis 重新开始接受请求之后， 新的 SAVE 、 BGSAVE 或 BGREWRITEAOF 命令才会被处理
#+end_example
另外， 因为 _AOF_ 写入由 *后台* 线程完成， 而 _BGREWRITEAOF_ 则由 _子进程_ 完成， 所以在 SAVE 执行的过程中， _AOF_ 写入和已经存在的 _BGREWRITEAOF_ 可以 *同时进行* 

*** BGSAVE
在执行 SAVE 命令之前， 服务器会 *检查* _BGSAVE_ 是否 *正在执行* 当中， 如果是的话， 服务器就不调用 rdbSave ， 而是向客户端 _返回_ 一个 _出错信息_ ， 告知在 BGSAVE 执行期间， 不能执行 SAVE 
#+begin_example
  这样做可以避免 SAVE 和 BGSAVE 调用的两个 rdbSave 交叉执行， 造成竞争条件
#+end_example

同样当 BGSAVE 正在执行时， 调用新 BGSAVE 命令的客户端会收到一个出错信息， 告知 BGSAVE 已经在执行当中

最后 _BGREWRITEAOF_ 和 _BGSAVE_ 不能同时执行：
+ 如果 BGSAVE 正在执行，那么 _BGREWRITEAOF 的重写请求_ 会被 *延迟* 到 BGSAVE 执行完毕之后进行，执行 BGREWRITEAOF 命令的客户端会收到 _请求被延迟_ 的 _回复_
+ 如果 BGREWRITEAOF 正在执行，那么调用 BGSAVE 的客户端将收到 _出错信息_ ，表示这两个命令 *不能同时执行*

#+begin_example
  BGREWRITEAOF 和 BGSAVE 两个命令在操作方面并没有什么冲突的地方， 不能同时执行它们只是一个性能方面的考虑

  并发出两个子进程， 并且两个子进程都同时进行大量的磁盘写入操作， 这怎么想都不会是一个好主意
#+end_example

* 载入
当 _Redis 服务器_ *启动* 时， _rdbLoad_ 函数就会被 *执行* ， 它读取 RDB 文件， 并将文件中的数据库数据载入到内存中
+ 在载入期间， 服务器每载入 _1000 个键_ 就 *处理* 一次所有 _已到达的请求_
+ 不过只有 _PUBLISH_ 、 _SUBSCRIBE_  、 _PSUBSCRIBE_ 、 _UNSUBSCRIBE_ 、 _PUNSUBSCRIBE_ 五个命令的请求会被正确地处理， 其他命令一律返回错误
+ 等到载入完成之后， 服务器才会开始正常处理所有命令

  #+begin_example
    发布与订阅功能和其他数据库功能是完全隔离的，前者不写入也不读取数据库

    所以在服务器载入期间，订阅与发布功能仍然可以正常使用，而不必担心对载入数据的完整性产生影响
  #+end_example

另外， 因为 _AOF 文件_ 的保存频率 通常要 *高于* _RDB 文件_ 保存的频率， 所以一般来说， AOF 文件中的数据会比 RDB 文件中的数据要新

#+begin_example
  因此， 如果服务器在启动时， 打开了 AOF 功能， 那么程序优先使用 AOF 文件来还原数据

  只有在 AOF 功能未打开的情况下， Redis 才会使用 RDB 文件来还原数据
#+end_example

* RDB 文件结构
#+begin_example
  前面介绍了保存和读取 RDB 文件的两个函数，现在，是时候介绍 RDB 文件本身了
#+end_example

一个 RDB 文件可以分为以下几个部分：
#+begin_example
  +-------+-------------+-----------+-----------------+-----+-----------+
  | REDIS | RDB-VERSION | SELECT-DB | KEY-VALUE-PAIRS | EOF | CHECK-SUM |
  +-------+-------------+-----------+-----------------+-----+-----------+

			|<-------- DB-DATA ---------->|
#+end_example

以下分别对这几个部分的保存和读入规则进行介绍

** REDIS
文件的最开头保存着 _REDIS_ 五个字符，标识着一个 RDB 文件的 *开始* 

#+begin_example
在读入文件的时候，程序可以通过检查一个文件的前五个字节，来快速地判断该文件是否有可能是 RDB 文件
#+end_example

** RDB-VERSION
一个 _四字节长_ 的以字符表示的 _整数_ ，记录了该文件所使用的 RDB *版本号* 

#+begin_example
目前的 RDB 文件版本为 0006 

因为不同版本的 RDB 文件互不兼容，所以在读入程序时，需要根据版本来选择不同的读入方式
#+end_example
** DB-DATA
这个部分在一个 RDB 文件中会出现 *任意* 多次，每个 DB-DATA 部分保存着服务器上一个 *非空数据库的所有数据* 
*** SELECT-DB
这域保存着跟在后面的键值对所属的 _数据库号码_

#+begin_example
在读入 RDB 文件时，程序会根据这个域的值来切换数据库，确保数据被还原到正确的数据库上
#+end_example
*** KEY-VALUE-PAIRS
因为空的数据库不会被保存到 RDB 文件，所以这个部分 *至少* 会包含 _一个键值对_ 的数据。每个键值对的数据使用以下结构来保存：

#+begin_example
  +----------------------+---------------+-----+-------+
  | OPTIONAL-EXPIRE-TIME | TYPE-OF-VALUE | KEY | VALUE |
  +----------------------+---------------+-----+-------+
#+end_example

+ _OPTIONAL-EXPIRE-TIME_ 域是 *可选* 的：
  + 如果键没有设置过期时间，那么这个域就不会出现
  + 如果这个域出现的话，那么它记录着键的过期时间
    #+begin_example
      在当前版本的 RDB 中，过期时间是一个以毫秒为单位的 UNIX 时间戳
    #+end_example
+ _KEY_ 域保存着键，格式和 _REDIS_ENCODING_RAW_ 编码的 *字符串* 对象一样
+ _TYPE-OF-VALUE_ 域记录着 VALUE 域的值所使用的 *编码*
  #+begin_example
    根据这个域的指示， 程序会使用不同的方式来保存和读取 VALUE 的值

    具体的编码在《对象处理机制》章节介绍过
  #+end_example

接下来讨论保存 VALUE 的详细格式
****  REDIS_ENCODING_INT 编码
REDIS_ENCODING_INT 编码的 _REDIS_STRING 类型对象_ ：
+ 如果值可以表示为 _8_ 位、 _16_ 位或 _32_ 位有符号整数，那么直接以整数类型的形式来保存它们：
  #+begin_example
      +---------+
      | integer |
      +---------+

      比如说，整数 8 可以用 8 位序列 00001000 保存
  #+end_example

当读入这类值时，程序按指定的长度读入字节数据，然后将数据转换回整数类型 

+ 如果值不能被表示为最高 32 位的有符号整数，那么说明这是一个 _long long_ 类型的值，在 RDB 文件中，这种类型的值以 _字符序列_ 的形式保存。一个字符序列由两部分组成：
  #+begin_example
    +-----+---------+
    | LEN | CONTENT |
    +-----+---------+
  #+end_example
  + CONTENT 域保存了 _字符内容_
  + LEN 则保存了以字节为单位的 _字符长度_ 

当进行载入时，读入器先读入 LEN ，创建一个长度等于 LEN 的字符串对象，然后再从文件中读取 LEN 字节数据，并将这些数据设置为字符串对象的值
**** REDIS_ENCODING_RAW
REDIS_ENCODING_RAW 编码的 REDIS_STRING 类型值有三种保存方式：
1. 如果值可以表示为 8 位、 16 位或 32 位长的有符号整数，那么用 _整数类型_ 的形式来保存它们
2. 如果字符串长度大于 20 ，并且服务器开启了 _LZF_ 压缩功能 ，那么对字符串进行 *压缩* ，并保存 _压缩之后的数据*_ 。经过 LZF 压缩的字符串会被保存为以下结构：
   #+begin_example
     +----------+----------------+--------------------+
     | LZF-FLAG | COMPRESSED-LEN | COMPRESSED-CONTENT |
     +----------+----------------+--------------------+
   #+end_example
   + LZF-FLAG 告知读入器，后面跟着的是被 LZF 算法压缩过的数据
   + COMPRESSED-CONTENT 是被 _压缩后的数据_
   + COMPRESSED-LEN 则是该数据的 _字节长度_  
3. 在其他情况下，程序直接以 _普通字节序列_ 的方式来保存字符串。这种字符串被保存为以下结构：
   #+begin_example
     +-----+---------+
     | LEN | CONTENT |
     +-----+---------+
   #+end_example
   + LEN 为字符串的字节长度
   + CONTENT 为字符串

当进行载入时，读入器先检测字符串保存的方式，再根据不同的保存方式，用不同的方法取出内容，并将内容保存到新建的字符串对象当中
**** REDIS_ENCODING_LINKEDLIST
REDIS_ENCODING_LINKEDLIST 编码的 _REDIS_LIST 类型_ 值保存为以下结构：
#+begin_example
  +-----------+--------------+--------------+-----+--------------+
  | NODE-SIZE | NODE-VALUE-1 | NODE-VALUE-2 | ... | NODE-VALUE-N |
  +-----------+--------------+--------------+-----+--------------+
#+end_example
+ NODE-SIZE 保存链表 _节点数量_
+ 后面跟着 NODE-SIZE 个 _节点值_ ，节点值的保存方式和 _字符串_ 的保存方式一样

当进行载入时，读入器读取节点的数量， *创建* 一个新的 _链表_ ，然后一直执行以下步骤，直到指定节点数量满足为止：
1. 读取字符串表示的节点值
2. 将包含节点值的新节点添加到链表中

**** REDIS_ENCODING_HT
+ REDIS_ENCODING_HT 编码的 _REDIS_SET_ 类型值保存为以下结构：
  #+begin_example
    +----------+-----------+-----------+-----+-----------+
    | SET-SIZE | ELEMENT-1 | ELEMENT-2 | ... | ELEMENT-N |
    +----------+-----------+-----------+-----+-----------+
  #+end_example
  + SET-SIZE 记录了集合元素的数量
  + 后面跟着多个元素值，元素值的保存方式和字符串的保存方式一样

载入时，读入器先读入集合元素的数量 SET-SIZE ，再连续读入 SET-SIZE 个字符串，并将这些字符串作为新元素添加至新创建的集合

+ REDIS_ENCODING_HT 编码的 _REDIS_HASH_ 类型值保存为以下结构：
  #+begin_example
    +-----------+-------+---------+-------+---------+-----+-------+---------+
    | HASH-SIZE | KEY-1 | VALUE-1 | KEY-2 | VALUE-2 | ... | KEY-N | VALUE-N |
    +-----------+-------+---------+-------+---------+-----+-------+---------+
  #+end_example
  + HASH-SIZE 是哈希表包含的 _键值对的数量_
  + KEY-i 和 VALUE-i 分别是哈希表的 _键和值_

载入时，程序先 *创建* 一个 _新的哈希表_ ，然后读入 HASH-SIZE ，再执行以下步骤 HASH-SIZE 次：
1. 读入一个字符串
2. 再读入另一个字符串
3. 将第一个读入的字符串作为键，第二个读入的字符串作为值，插入到新建立的哈希中 
**** REDIS_ENCODING_SKIPLIST
REDIS_ENCODING_SKIPLIST 编码的 _REDIS_ZSET_ 类型值保存为以下结构：
#+begin_example
  +--------------+-------+---------+-------+---------+-----+-------+---------+
  | ELEMENT-SIZE | MEB-1 | SCORE-1 | MEB-2 | SCORE-2 | ... | MEB-N | SCORE-N |
  +--------------+-------+---------+-------+---------+-----+-------+---------+
#+end_example
+ ELEMENT-SIZE 为有序集元素的数量
+ MEB-i 为第 i 个有序集元素的成员
+ SCORE-i 为第 i 个有序集元素的分值

当进行载入时，读入器读取有序集元素数量， *创建* 一个 _新的有序集_ ，然后一直执行以下步骤，直到指定元素数量满足为止：
+ 读入字符串形式保存的成员 _member_ 
+ 读入字符串形式保存的分值 _score_ ，并将它转换为 *浮点数*
+ 添加 member 为成员、 score 为分值的新元素到有序集

**** REDIS_ENCODING_ZIPLIST
REDIS_ENCODING_ZIPLIST 编码的 _REDIS_LIST_ 类型、  _REDIS_HASH_ 类型和 _REDIS_ZSET_ 类型。 ziplist 在 RDB 中的保存方式如下：
#+begin_example
  +-----+---------+
  | LEN | ZIPLIST |
  +-----+---------+
#+end_example
载入时，读入器先读入 ziplist 的 _字节长_ ，再根据该字节长读入 _数据_ ，最后将数据 *还原* 成一个 _ziplist_ 

**** REDIS_ENCODING_INTSET
REDIS_ENCODING_INTSET 编码的 _REDIS_SET_ 类型值保存为以下结构：

#+begin_example
  +-----+--------+
  | LEN | INTSET |
  +-----+--------+
#+end_example

载入时，读入器先读入 intset 的 _字节长度_ ，再根据长度读入 _数据_ ，最后将数据 *还原* 成 _intset_ 
** EOF 
标志着 _数据库内容_ 的 *结尾* （不是文件的结尾），值为 _rdb.h/EDIS_RDB_OPCODE_EOF_ （ $255$ ）
** CHECK-SUM 
RDB 文件 *所有内容的校验和* ， 一个 _uint_64t_ 类型值。
+ REDIS 在写入 RDB 文件时将校验和保存在 RDB 文件的末尾
+ 当读取时， 根据它的值对内容进行校验 

#+begin_example
  如果这个域的值为 0 ， 那么表示 Redis 关闭了校验和功能
#+end_example
* 小结
+ rdbSave 会将数据库数据保存到 RDB 文件，并在保存完成之前阻塞调用者
+ SAVE 命令直接调用 rdbSave ，阻塞 Redis 主进程； BGSAVE 用子进程调用 rdbSave ，主进程仍可继续处理命令请求
+ SAVE 执行期间， AOF 写入可以在后台线程进行， BGREWRITEAOF 可以在子进程进行，所以这三种操作可以同时进行
+ 为了避免产生竞争条件， BGSAVE 执行时， SAVE 命令不能执行
+ 为了避免性能问题， BGSAVE 和 BGREWRITEAOF 不能同时执行
+ 调用 rdbLoad 函数载入 RDB 文件时，不能进行任何和数据库相关的操作，不过订阅与发布方面的命令可以正常执行，因为它们和数据库不相关联
+ RDB 文件的组织方式如下：
  #+begin_example
    +-------+-------------+-----------+-----------------+-----+-----------+
    | REDIS | RDB-VERSION | SELECT-DB | KEY-VALUE-PAIRS | EOF | CHECK-SUM |
    +-------+-------------+-----------+-----------------+-----+-----------+

			  |<-------- DB-DATA ---------->|
  #+end_example
+ 键值对在 RDB 文件中的组织方式如下：
  #+begin_example
    +----------------------+---------------+-----+-------+
    | OPTIONAL-EXPIRE-TIME | TYPE-OF-VALUE | KEY | VALUE |
    +----------------------+---------------+-----+-------+
  #+end_example
  + RDB 文件使用不同的格式来保存不同类型的值

  #+ATTR_HTML: :border 1 :rules all :frame boader
  | [[file:aof.org][Next：AOF]] | [[file:db.org][Previous：数据库]] | [[file:internal.org][Home：内部机制]] |
