#+TITLE: 压缩列表
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: ./mmap.html
#+HTML_LINK_UP: ./intset.html
#+OPTIONS: num:nil timestamp:nil ^:nil

_ziplist_ 是由一系列特殊编码的内存块构成的列表， 一个 ziplist 可以包含多个 *节点* _entry_ ， 每个节点可以保存一个 _长度受限的字符数组_ （ *不以 \0 结尾* 的 char 数组）或者 _整数_ ， 包括：
+ 字符数组
  + 长度小于等于 63  $(2^{6} - 1)$ 字节的字符数组
  + 长度小于等于 16383 $(2^{14} - 1)$ 字节的字符数组
  + 长度小于等于 4294967295 $(2^{32} - 1)$ 字节的字符数组
+ 整数
  + 4 位长，介于 0 至 12 之间的无符号整数
  + 1 字节长，有符号整数
  + 3 字节长，有符号整数
  + int16_t 类型整数
  + int32_t 类型整数
  + int64_t 类型整数

因为 ziplist *节约内存* 的性质， 哈希键、列表键和有序集合键初始化的底层实现皆采用 ziplist

#+begin_example
  更多信息请参考《哈希表》、《列表》和《有序集》

  接下来先介绍 ziplist 的组成结构， 以及 ziplist 节点的编码方式

  再介绍 ziplist 的添加操作和删除操作的执行过程， 以及这两种操作可能引起的连锁更新现象

  最后介绍 ziplist 的遍历方法和节点查找方式
#+end_example
* 构成
