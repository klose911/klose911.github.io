#+TITLE: 命令
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: introduction.html   
#+HTML_LINK_HOME: redis.html
#+OPTIONS: num:nil timestamp:nil

* 键(key)
  #+CAPTION: Redis key相关的基本命令
  #+ATTR_HTML: :border 1 :rules all :frame boader　
  | 命令                                 | 描述                                                                                                                      |
  | DEL key                              | 该命令用于在key 存在时删除 key                                                                                   |
  | DUMP key                             | 序列化给定key ，并返回被序列化的值                                                                           |
  | EXISTS key                           | 检查给定key是否存在                                                                                                 |
  | EXPIRE key seconds                   | 为给定 key 设置过期时间                                                                                            |
  | EXPIREAT key timestamp               | EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp) |
  | PEXPIRE key milliseconds             | 设置 key 的过期时间以毫秒计                                                                                      |
  | PEXPIREAT key milliseconds-timestamp | 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计                                                            |
  | KEYS pattern                         | 查找所有符合给定模式( pattern)的 key                                                                             |
  | MOVE key db                          | 将当前数据库的 key 移动到给定的数据库 db 当中                                                             |
  | PERSIST key                          | 移除 key 的过期时间，key 将持久保持                                                                            |
  | PTTL key                             | 以毫秒为单位返回 key 的剩余的过期时间                                                                       |
  | TTL key                              | 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)                                                 |
  | RANDOMKEY                            | 从当前数据库中随机返回一个 key                                                                                 |
  | RENAME key newkey                    | 修改 key 的名称                                                                                                        |
  | RENAMENX key newkey                  | 仅当 newkey 不存在时，将 key 改名为 newkey                                                                       |
  | TYPE key                             | 返回 key 所储存的值的类型                                                                                                   |
  
* 字符串(string)
  #+CAPTION: Redis string相关的基本命令
  #+ATTR_HTML: :border 1 :rules all :frame boader　
  | 命令 | 描述 |
  | SET key value | 设置指定 key 的值 |
  | GET key | 获取指定 key 的值 |
  | GETRANGE key start end | 返回 key 中字符串值的子字符 |
  | GETSET key value | 将给定 key 的值设为 value ，并返回 key 的旧值(old value) |
  | GETBIT key offset | 对 key 所储存的字符串值，获取指定偏移量上的位(bit) |
  | MGET key1 [key2..] | 获取所有(一个或多个)给定 key 的值 |
  | SETBIT key offset value | 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit) |
  | SETEX key seconds value | 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位) |
  | SETNX key value | 只有在 key 不存在时设置 key 的值 |
  | SETRANGE key offset value | 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始 |
  | STRLEN key | 返回 key 所储存的字符串值的长度 |
  | MSET key value [key value ...] | 同时设置一个或多个 key-value 对 |
  | MSETNX key value [key value ...]  | 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在 |
  | PSETEX key milliseconds value | 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位  |
  | INCR key | 将 key 中储存的数字值增一 |
  | INCRBY key increment | 将 key 所储存的值加上给定的增量值（increment）  |
  | INCRBYFLOAT key increment | 将 key 所储存的值加上给定的浮点增量值（increment）  |
  | DECR key | 将 key 中储存的数字值减一 |
  | DECRBY key decrement | key 所储存的值减去给定的减量值（decrement）  |
  | APPEND key value | 如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾 |
  
* 哈希(hash)
  #+CAPTION: Redis hash相关的基本命令
  #+ATTR_HTML: :border 1 :rules all :frame boader
  | 命令 | 描述 |  
  | HDEL key field2 [field2]  | 删除一个或多个哈希表字段 |  
  | HEXISTS key field  | 查看哈希表 key 中，指定的字段是否存在 |  
  | HGET key field  | 获取存储在哈希表中指定字段的值 |  
  | HGETALL key  | 获取在哈希表中指定 key 的所有字段和值 |  
  | HINCRBY key field increment  | 为哈希表 key 中的指定字段的整数值加上增量 increment  |  
  | HINCRBYFLOAT key field increment  | 为哈希表 key 中的指定字段的浮点数值加上增量 increment  |  
  | HKEYS key  | 获取所有哈希表中的字段 |  
  | HLEN key  | 获取哈希表中字段的数量 |  
  | HMGET key field1 [field2]  | 获取所有给定字段的值 |  
  | HMSET key field1 value1 [field2 value2 ]  | 同时将多个 field-value (域-值)对设置到哈希表 key 中 |  
  | HSET key field value  | 将哈希表 key 中的字段 field 的值设为 value  |  
  | HSETNX key field value  | 只有在字段 field 不存在时，设置哈希表字段的值 |  
  | HVALS key  | 获取哈希表中所有值 |  
  | HSCAN key cursor [MATCH pattern] [COUNT count]  | 迭代哈希表中的键值对 |  
  
* 列表(list)
  #+CAPTION: Redis list相关的基本命令
  #+ATTR_HTML: :border 1 :rules all :frame boader
  | 命令 | 描述 |
  | BLPOP key1 [key2 ] timeout  | 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 | 
  | BRPOP key1 [key2 ] timeout  | 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 |
  | BRPOPLPUSH source destination timeout  | 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 |
  | LINDEX key index  | 通过索引获取列表中的元素 |
  | LINSERT key BEFORE/AFTER pivot value  | 在列表的元素前或者后插入元素 |
  | LLEN key  | 获取列表长度 |
  | LPOP key  | 移出并获取列表的第一个元素 |
  | LPUSH key value1 [value2]  | 将一个或多个值插入到列表头部 |
  | LPUSHX key value  | 将一个或多个值插入到已存在的列表头部 |
  | LRANGE key start stop  | 获取列表指定范围内的元素 |
  | LREM key count value  | 移除列表元素 |
  | LSET key index value  | 通过索引设置列表元素的值 |
  | LTRIM key start stop  | 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除 | 
  | RPOP key  | 移除并获取列表最后一个元素 |
  | RPOPLPUSH source destination  | 移除列表的最后一个元素，并将该元素添加到另一个列表并返回 |
  | RPUSH key value1 [value2]  | 在列表中添加一个或多个值 |
  | RPUSHX key value  | 为已存在的列表添加值 |
  
* 集合(set)
  #+CAPTION: Redis set相关的基本命令
  #+ATTR_HTML: :border 1 :rules all :frame boader
  | 命令 | 描述 |
  | SADD key member1 [member2]  | 向集合添加一个或多个成员 |
  | SCARD key  | 获取集合的成员数 |
  | SDIFF key1 [key2]  | 返回给定所有集合的差集 |
  | SDIFFSTORE destination key1 [key2]  | 返回给定所有集合的差集并存储在 destination 中 |
  | SINTER key1 [key2]  | 返回给定所有集合的交集 |
  | SINTERSTORE destination key1 [key2]  | 返回给定所有集合的交集并存储在 destination 中 |
  | SISMEMBER key member  | 判断 member 元素是否是集合 key 的成员 |
  | SMEMBERS key  | 返回集合中的所有成员 |
  | SMOVE source destination member  | 将 member 元素从 source 集合移动到 destination 集合 |
  | SPOP key  | 移除并返回集合中的一个随机元素 |
  | SRANDMEMBER key [count]  | 返回集合中一个或多个随机数 |
  | SREM key member1 [member2]  | 移除集合中一个或多个成员 |
  | SUNION key1 [key2]  | 返回所有给定集合的并集 |
  | SUNIONSTORE destination key1 [key2]  | 所有给定集合的并集存储在 destination 集合中 |
  | SSCAN key cursor [MATCH pattern] [COUNT count]  | 迭代集合中的元素 |

* 有序集合(zset)
  #+CAPTION: Redis zset相关的基本命令
  #+ATTR_HTML: :border 1 :rules all :frame boader
  | 命令 | 描述 |
  | ZADD key score1 member1 [score2 member2]  | 向有序集合添加一个或多个成员，或者更新已存在成员的分数 |
  | ZCARD key  | 获取有序集合的成员数 |
  | ZCOUNT key min max  | 计算在有序集合中指定区间分数的成员数 |
  | ZINCRBY key increment member  | 有序集合中对指定成员的分数加上增量 increment |
  | ZINTERSTORE destination numkeys key [key ...]  | 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中 |
  | ZLEXCOUNT key min max  | 在有序集合中计算指定字典区间内成员数量 |
  | ZRANGE key start stop [WITHSCORES]  | 通过索引区间返回有序集合成指定区间内的成员 |
  | ZRANGEBYLEX key min max [LIMIT offset count]  | 通过字典区间返回有序集合的成员 |
  | ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]  | 通过分数返回有序集合指定区间内的成员 |
  | ZRANK key member  | 返回有序集合中指定成员的索引 |
  | ZREM key member [member ...]  | 移除有序集合中的一个或多个成员 |
  | ZREMRANGEBYLEX key min max  | 移除有序集合中给定的字典区间的所有成员 |
  | ZREMRANGEBYRANK key start stop  | 移除有序集合中给定的排名区间的所有成员 |
  | ZREMRANGEBYSCORE key min max  | 移除有序集合中给定的分数区间的所有成员 |
  | ZREVRANGE key start stop [WITHSCORES]  | 返回有序集中指定区间内的成员，通过索引，分数从高到底 |
  | ZREVRANGEBYSCORE key max min [WITHSCORES]  | 返回有序集中指定分数区间内的成员，分数从高到低排序 |
  | ZREVRANK key member  | 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序 |
  | ZSCORE key member  | 返回有序集中，成员的分数值 |
  | ZUNIONSTORE destination numkeys key [key ...]  | 计算给定的一个或多个有序集的并集，并存储在新的 key 中 |
  | ZSCAN key cursor [MATCH pattern] [COUNT count]  | 迭代有序集合中的元素（包括元素成员和元素分值） |
  
* HyperLogLog
  HyperLogLog是用来做基数统计的算法
  
  它的优点是在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。每个HyperLogLog键只需要花费12KB内存，就可以计算接近2^64个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比
  
  但是因为只会根据输入元素来计算基数，而不会储存输入元素本身，所以不能像集合那样返回输入的各个元素
  
** 基数
   比如数据集{1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为{1, 3, 5 ,7, 8}, 基数(不重复元素)为5
   
   基数估计就是在误差可接受的范围内快速计算基数
   
** 实例
   统计HyperLogLog键"runoobkey"有多少个基数
   #+BEGIN_SRC sh
     127.0.0.1:6379> PFCOUNT runoobkey
     (integer) 0

     127.0.0.1:6379>  PFADD runoobkey "redis"
     (integer) 1

     127.0.0.1:6379>  PFADD runoobkey "mongodb"
     (integer) 1

     127.0.0.1:6379> PFADD runoobkey "mysql"
     (integer) 1

     127.0.0.1:6379> PFCOUNT runoobkey
     (integer) 3
   #+END_SRC
   
** 命令
   #+CAPTION: Redis HyperLogLog相关的基本命令
   #+ATTR_HTML: :border 1 :rules all :frame boader
   | 命令 | 描述 |  
   | PFADD key element [element ...]  | 添加指定元素到 HyperLogLog 中 |  
   | PFCOUNT key [key ...]  | 返回给定 HyperLogLog 的基数估算值 |  
   | PFMERGE destkey sourcekey [sourcekey ...]  | 将多个 HyperLogLog 合并为一个 HyperLogLog |
   
* 发布订阅
  发布订阅是一种消息通信模式：
+ 发送者：发送消息
+ 订阅者：接收消息
  
下图展示了频道channel1以及订阅这个频道的三个客户端client2，client5和client1之间的关系：
#+ATTR_HTML: image :width 90% 
[[./pic/pubsub1.png]]

当有新消息通过PUBLISH命令发送给频道channel1时，这个消息就会被发送给订阅它的三个客户端：
#+ATTR_HTML: image :width 90% 
[[./pic/pubsub2.png]]

** 实例
   创建了订阅频道名为redisChat:
   #+BEGIN_SRC sh
     127.0.0.1:6379> SUBSCRIBE redisChat

     Reading messages... (press Ctrl-C to quit)
     1) "subscribe"
     2) "redisChat"
     3) (integer) 1
   #+END_SRC
   
   先重新开启个redis客户端，然后在同一个频道redisChat发布两次消息
   #+BEGIN_SRC sh
  127.0.0.1:6379> PUBLISH redisChat "Redis is a great caching technique"
  (integer) 1

  127.0.0.1:6379> PUBLISH redisChat "Learn redis by runoob.com"
  (integer) 1
   #+END_SRC
   订阅者接收到的消息
   #+BEGIN_SRC sh
  # 订阅者的客户端会显示如下消息
  1) "message"
  2) "redisChat"
  3) "Redis is a great caching technique"
        
  1) "message"
  2) "redisChat"
  3) "Learn redis by runoob.com"
   #+END_SRC
   
** 命令
   #+CAPTION: Redis发布订阅的常用命令
   #+ATTR_HTML: :border 1 :rules all :frame boader
   | 命令 | 描述 |  
   | PSUBSCRIBE pattern [pattern ...]  | 订阅一个或多个符合给定模式的频道 |
   | PUBSUB subcommand [argument [argument ...]]  | 查看订阅与发布系统状态 |
   | PUBLISH channel message  | 将信息发送到指定的频道 |
   | PUNSUBSCRIBE [pattern [pattern ...]]  | 退订所有给定模式的频道 |
   | SUBSCRIBE channel [channel ...]  | 订阅给定的一个或多个频道的信息 |
   | UNSUBSCRIBE [channel [channel ...]]  | 指退订给定的频道 |
   
* 事务
  Redis事务可以一次执行多个命令，并且带有以下两个重要的保证：
+ 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断
+ 事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行
  
一个事务从开始到执行会经历以下三个阶段：
1. 开始事务
2. 命令入队
3. 执行事务
   
** 实例
   以MULTI开始一个事务，然后将多个命令入队到事务中，最后由EXEC命令触发事务
   #+BEGIN_SRC sh
     #开始事务
     127.0.0.1:6379> MULTI
     OK

     #命令入队
     127.0.0.1:6379> SET book-name "Mastering C++ in 21 days"
     QUEUED

     127.0.0.1:6379> GET book-name
     QUEUED

     127.0.0.1:6379> SADD tag "C++" "Programming" "Mastering Series"
     QUEUED

     127.0.0.1:6379> SMEMBERS tag
     QUEUED

     #执行事务
     127.0.0.1:6379> EXEC
     1) OK
     2) "Mastering C++ in 21 days"
     3) (integer) 3
     4) 1) "Programming"
        2) "C++"
        3) "Mastering Series"
   #+END_SRC
   
** 命令
   #+CAPTION: Redis事务的相关命令
   #+ATTR_HTML: :border 1 :rules all :frame boader
   | 命令 | 描述 |  
   | DISCARD  | 取消事务，放弃执行事务块内的所有命令 |
   | EXEC  | 执行所有事务块内的命令 |
   | MULTI  | 标记一个事务块的开始 |
   | UNWATCH  | 取消 WATCH 命令对所有 key 的监视 |
   | WATCH key [key ...]  | 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断 |
   
* 脚本
  Redis脚本使用Lua解释器来执行脚本。执行脚本的常用命令为EVAL
  
** 语法
   EVAL命令的基本语法如下：
   #+BEGIN_SRC sh
     redis 127.0.0.1:6379> EVAL script numkeys key [key ...] arg [arg ...]
   #+END_SRC
   
** 实例
   #+BEGIN_SRC sh
     127.0.0.1:6379> EVAL "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}" 2 key1 key2 first second

     1) "key1"
     2) "key2"
     3) "first"
     4) "second"
   #+END_SRC
   
** 命令
   #+CAPTION: Redis脚本的相关命令
   #+ATTR_HTML: :border 1 :rules all :frame boader
   | 命令 | 描述 |  
   | EVAL script numkeys key [key ...] arg [arg ...]  | 执行 Lua 脚本 |
   | EVALSHA sha1 numkeys key [key ...] arg [arg ...]  | 执行 Lua 脚本 |
   | SCRIPT EXISTS script [script ...]  | 查看指定的脚本是否已经被保存在缓存当中 |
   | SCRIPT FLUSH  | 从脚本缓存中移除所有脚本 |
   | SCRIPT KILL  | 杀死当前正在运行的 Lua 脚本 |
   | SCRIPT LOAD script  | 将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本 |
   
* 连接
** 语法
  使用redis-cli命令连接redis服务器
  #+BEGIN_SRC sh
  $ redis-cli -h host -p port -a password
  #+END_SRC
  
  连接到主机为127.0.0.1，端口为6379 ，密码为mypass的redis服务上
  #+BEGIN_SRC sh
  $ redis-cli -h 127.0.0.1 -p 6379 -a "mypass"
  redis 127.0.0.1:6379>
  redis 127.0.0.1:6379> PING

  PONG
  #+END_SRC

** 命令
   #+CAPTION: Redis连接的相关命令
   #+ATTR_HTML: :border 1 :rules all :frame boader
   | 命令 | 描述 |  
   | AUTH password  | 验证密码是否正确 |
   | ECHO message  | 打印字符串 |
   | PING  | 查看服务是否运行 |
   | QUIT  | 关闭当前连接 |
   | SELECT index  | 切换到指定的数据库 |
   
* 服务器
  Redis服务器命令主要是用于管理redis服务
  #+CAPTION: Redis服务器的相关命令
  #+ATTR_HTML: :border 1 :rules all :frame boader
  | 命令 | 描述 |
  | BGREWRITEAOF  | 异步执行一个 AOF（AppendOnly File） 文件重写操作 |
  | BGSAVE  | 在后台异步保存当前数据库的数据到磁盘 |
  | CLIENT KILL [ip:port] [ID client-id]  | 关闭客户端连接 |
  | CLIENT LIST  | 获取连接到服务器的客户端连接列表 |
  | CLIENT GETNAME  | 获取连接的名称 |
  | CLIENT PAUSE timeout  | 在指定时间内终止运行来自客户端的命令 |
  | CLIENT SETNAME connection-name  | 设置当前连接的名称 |
  | CLUSTER SLOTS  | 获取集群节点的映射数组 |
  | COMMAND  | 获取 Redis 命令详情数组 |
  | COMMAND COUNT  | 获取 Redis 命令总数 |
  | COMMAND GETKEYS  | 获取给定命令的所有键 |
  | TIME  | 返回当前服务器时间 |
  | COMMAND INFO command-name [command-name ...]  | 获取指定 Redis 命令描述的数组 |
  | CONFIG GET parameter  | 获取指定配置参数的值 |
  | CONFIG REWRITE  | 对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写 |
  | CONFIG SET parameter value  | 修改 redis 配置参数，无需重启 |
  | CONFIG RESETSTAT  | 重置 INFO 命令中的某些统计数据 |
  | DBSIZE  | 返回当前数据库的 key 的数量 |
  | DEBUG OBJECT key  | 获取 key 的调试信息 |
  | DEBUG SEGFAULT  | 让 Redis 服务崩溃 |
  | FLUSHALL  | 删除所有数据库的所有key |
  | FLUSHDB  | 删除当前数据库的所有key |
  | INFO [section]  | 获取 Redis 服务器的各种信息和统计数值 |
  | LASTSAVE  | 返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示 |
  | MONITOR  | 实时打印出 Redis 服务器接收到的命令，调试用 |
  | ROLE  | 返回主从实例所属的角色 |
  | SAVE  | 异步保存数据到硬盘 |
  | SHUTDOWN [NOSAVE] [SAVE]  | 异步保存数据到硬盘，并关闭服务器 |
  | SLAVEOF host port  | 将当前服务器转变为指定服务器的从属服务器(slave server) |
  | SLOWLOG subcommand [argument]  | 管理 redis 的慢日志 |
  | SYNC  | 用于复制功能(replication)的内部命令 |

[[file:advanced.org][Next：高级]]

[[file:introduction.org][Previous：简介]]

[[file:redis.org][Home：目录]]
