#+TITLE: Redis简介
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: redis.html   
#+HTML_LINK_HOME: redis.html
#+OPTIONS: num:nil timestamp:nil
* 简介
  Redis 是一个高性能的key-value数据库
** 特点
1. 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用
2. 不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储
3. 支持数据的备份，即master-slave模式的数据备份
   
** 优势
+ 性能极高：读的速度是110000次/s,写的速度是81000次/s
+ 丰富的数据类型：支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作
+ 原子：所有操作都是原子性的，同时还支持对几个操作全并后的原子性执行
+ 丰富的特性：还支持 publish/subscribe, 通知, key 过期等等特性
  
** 不同
+ Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象
+ Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问
  
* 安装
  gentoo下安装
  #+BEGIN_SRC sh
  $ sudo emerge dev-db/redis
  #+END_SRC
  启动redis,
  #+BEGIN_SRC sh
  $ sudo /etc/init.d/redis start

  $ redis-cli

  127.0.0.1:6379>
  #+END_SRC
  127.0.0.1 是本机 IP ，6379 是 redis 服务端口，现在我们输入 PING 命令，有 PONG 返回说明安装成功
  
  #+BEGIN_SRC sh
  127.0.0.1:6379>ping
  PONG
  #+END_SRC
  
* 配置
  Redis 的配置文件一般是/etc/redis.conf
  
** 查看配置
   CONFIG GET CONFIG_SETTING_NAME
   
   #+BEGIN_SRC sh
  127.0.0.1:6379> CONFIG GET loglevel 
    1) "loglevel"
    2) "notice"

  127.0.0.1:6379> CONFIG GET * 
    1) "dbfilename"
    2) "dump.rdb"
    3) "requirepass"
    4) ""
    5) "masterauth"
    6) ""
    7) "unixsocket"
    8) ""
    9) "logfile"
   10) "/var/log/redis/redis.log"
   11) "pidfile"
   12) "/run/redis/redis.pid"
   ...
   #+END_SRC
   
** 编辑配置
   通过修改 redis.conf 文件或使用 CONFIG set 命令来修改配置
   
   CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE　
   #+BEGIN_SRC sh
  redis 127.0.0.1:6379> CONFIG SET loglevel "notice"
  OK

  redis 127.0.0.1:6379> CONFIG GET loglevel

  1) "loglevel"
  2) "notice"
   #+END_SRC
   
** 参数说明
   #+CAPTION: Redis配置参数
   #+ATTR_HTML: :border 1 :rules all :frame boader　
   | 参数                     | 示例                                   | 说明                                                                                                                                                                                                                                                              |
   | daemonize                | no                                     | 默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程                                                                                                                                                                                           |
   | pidfile                  | /var/run/redis.pid                     | 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定                                                                                                                                                                      |
   | port                     | 6379                                   | 监听端口，默认端口为6379                                                                                                                                                                                                                                          |
   | bind                     | 127.0.0.1                              | 绑定的主机地址                                                                                                                                                                                                                                                    |
   | timeout                  | 300                                    | 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能                                                                                                                                                                                                         |
   | loglevel                 | verbose                                | 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose                                                                                                                                                                           |
   | logfile                  | stdout                                 | 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null                                                                                                                                    |
   | databases                | 16                                     | 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id                                                                                                                                                                                    |
   | save <seconds> <changes> | save 900 1, save 300 10, save 60 10000 | 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合                                                                                                                                                                                      |
   | rdbcompression           | yes                                    | 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大                                                                                                                                  |
   | dbfilename               | dump.rdb                               | 指定本地数据库文件名，默认值为dump.rdb                                                                                                                                                                                                                            |
   | dir                      | ./                                     | 指定本地数据库存放目录                                                                                                                                                                                                                                            |
   | slaveof                  | <masterip> <masterport>                | 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步                                                                                                                                                                 |
   | masterauth               | <master-password>                      | 当master服务设置了密码保护时，slav服务连接master的密码                                                                                                                                                                                                            |
   | requirepass              | foobared                               | 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭                                                                                                                                                           |
   | maxclients               | 128                                    | 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息             |
   | maxmemory                | <bytes>                                | 设置Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区      |
   | appendonly               | no                                     | 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no                         |
   | appendfilename           | appendonly.aof                         | 指定更新日志文件名，默认为appendonly.aof                                                                                                                                                                                                                          |
   | appendfsync              | no/always/everysec                     | 指定更新日志条件，no：表示等操作系统进行数据缓存同步到磁盘（快），always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全），everysec：表示每秒同步一次（折衷，默认值）                                                                                 |
   | vm-enabled               | no                                     | 指定是否启用虚拟内存机制，默认值为no。VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中                                                                                                                       |
   | vm-swap-file             | /tmp/redis.swap                        | 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享                                                                                                                                                                                                  |
   | vm-max-memory            | 0                                      | 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0                                                             |
   | vm-page-size             | 32                                     | swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的数据大小来设定的。建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不确定，就使用默认值 |
   | vm-pages                 | 134217728                              | 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存                                                                                                                                       |
   | vm-max-threads           | 4                                      | 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4                                                                                                                             |
   | glueoutputbuf            | yes                                    | 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启                                                                                                                                                                                                  |
   | hash-max-zipmap-entries  | 64                                     | 指定在超过一定的数量时候采用一种特殊的哈希算法                                                                                                                                                                                                                    |
   | hash-max-zipmap-value    | 512                                    | 指定最大的元素超过某一临界值时，采用一种特殊的哈希算法                                                                                                                                                                                                            |
   | activerehashing          | yes                                    | 指定是否激活重置哈希，默认为开启                                                                                                                                                                                                                                  |
   | include                  | /path/to/local.conf                    |  指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件                                                                                                                                                                                                                                                                 |

* 数据类型
Redis支持五种数据类型：
1. string：字符串
2. hash：哈希
3. list：列表
4. set：集合
5. zset：sorted set，有序集合

** string
string是redis最基本的类型，一个key对应一个value。
+ string类型是二进制安全的，redis的string可以包含任何数据。比如jpg图片或者序列化的对象
+ string类型是Redis最基本的数据类型，一个键最大能存储512MB

使用SET和GET命令保存，读取。key 为 name，对应的 value 为 runoob
#+BEGIN_SRC sh
  redis 127.0.0.1:6379> SET name "runoob"
  OK

  redis 127.0.0.1:6379> GET name
  "runoob"
#+END_SRC

** hash
hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。每个 hash 可以存储 2^32 - 1 键值对

使用 HMSET保存hash, 使用HGETALL 读取hash，user:1 为key
#+BEGIN_SRC sh
  127.0.0.1:6379> HMSET user:1 username runoob password runoob points 200
  OK

  127.0.0.1:6379> HGETALL user:1
  1) "username"
  2) "runoob"
  3) "password"
  4) "runoob"
  5) "points"
  6) "200"
#+END_SRC

** list
list是简单的string列表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）。列表最多可存储 2^32 - 1 元素

lpush 插入头部，rpush插入尾部，lrange遍历循环
#+BEGIN_SRC sh
  127.0.0.1:6379> lpush runoob redis
  (integer) 1

  127.0.0.1:6379> lpush runoob mongodb
  (integer) 2

  127.0.0.1:6379> rpush runoob rabitmq
  (integer) 3

  127.0.0.1:6379> lrange runoob 0 10 
  1) "mongodb"
  2) "redis"
  3) "rabitmq"

#+END_SRC

** set
set是string类型的无序集合。集合中最大的成员数为 集合中最大的成员数为 2^32 - 1

sadd:添加元素，smembers：返回所有元素，注意rabitmq只被添加了一次
#+BEGIN_SRC sh
  redis 127.0.0.1:6379> sadd runoob redis
  (integer) 1

  redis 127.0.0.1:6379> sadd runoob mongodb
  (integer) 1

  redis 127.0.0.1:6379> sadd runoob rabitmq
  (integer) 1

  redis 127.0.0.1:6379> sadd runoob rabitmq
  (integer) 0

  redis 127.0.0.1:6379> smembers runoob
  1) "rabitmq"
  2) "mongodb"
  3) "redis"
#+END_SRC

** zset
zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复

zadd key score member：添加元素到集合，元素在集合中存在则更新对应score
#+BEGIN_SRC sh
  redis 127.0.0.1:6379> zadd runoob 0 redis
  (integer) 1

  redis 127.0.0.1:6379> zadd runoob 0 mongodb
  (integer) 1

  redis 127.0.0.1:6379> zadd runoob 0 rabitmq
  (integer) 1

  redis 127.0.0.1:6379> zadd runoob 1 rabitmq
  (integer) 0

  127.0.0.1:6379> ZRANGEBYSCORE runoob 0 10 WITHSCORES
  1) "mongodb"
  2) "0"
  3) "redis"
  4) "0"
  5) "rabbitmq"
  6) "1"
#+END_SRC

[[file:commands.org][Next：命令]]

[[file:redis.org][Home：目录]]
