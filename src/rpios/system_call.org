#+TITLE: 系统调用
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: ./scheduler.html
#+HTML_LINK_HOME: ./rpios.html
#+OPTIONS: num:nil timestamp:nil ^:nil

#+begin_example
  我们已经为RPi OS添加了许多功能，使其看起来像一个真正的操作系统，而不仅仅是一个裸机程序

  RPi OS现在可以管理进程，但是在这个功能中仍然存在一个主要缺点：没有任何进程隔离。接下来我们将解决这个问题
#+end_example

首先，将所有用户进程移动到 *EL0* ，这将限制它们对特权处理器操作的访问
#+begin_example
如果没有这一步，任何其他隔离技术都没有意义，因为任何用户程序都可以重写我们的安全设置，从而破坏隔离
#+end_example

如果我们限制用户程序直接访问内核函数，这会带来另外的问题

#+begin_example
例如，如果用户程序需要向用户打印一些内容，但又不希望它直接使用UART设备
#+end_example

相反，如果操作系统为每个程序提供一组API，那将会很好。这样的API不能简单地实现为一组函数，因为每当用户程序想调用其中一个API方法时，当前异常级别都应该提升到EL1。这种API中的单个函数都被称为 _系统调用_ ，在本课程中，我们将向RPi OS添加一组系统调用 

#+begin_example
  进程隔离的第三个方面还有一个问题：每个进程都应该有自己独立的内存视图。这将在下一章中解决这个问题
#+end_example

* 实现系统调用
*系统调用*  _syscall_ 背后的主要思想非常简单：每个系统调用实际上都是 *同步异常* 。如果用户程序需要执行系统调用：
1. 首先必须准备好所有必要的参数
2. 然后运行 _svc_ 指令。这条指令会生成一个同步异常。这些异常在操作系统的EL1处理
3. 然后，操作系统验证所有参数，执行所请求的操作
4. 执行普通异常返回，以确保执行将在EL0继续（就在svc指令之后）

RPi OS定义了四个简单的系统调用：
+ _write_ ：这个系统调用使用UART设备在屏幕上输出内容。它接受一个包含要打印的文本的缓冲区作为第一个参数
+ _clone_ ：这个系统调用创建一个新的用户线程。新创建线程的堆栈位置作为第一个参数传递
+ _malloc_ ：这个系统调用为用户进程分配一个内存页，返回指向新分配页的指针，或者在出现错误时返回-1
  #+begin_example
    Linux中没有这种系统调用（我认为其他操作系统也是如此）

    我们需要它的唯一原因是RPi OS尚未实现虚拟内存，所有用户进程都使用物理内存。因此，每个进程都需要找出哪个内存页未被占用并可以使用
  #+end_example
+ _exit_ ：每个进程在执行完毕后必须调用此系统调用。它将执行所有必要的清理工作

  所有的系统调用都在 _sys.c_ 文件中定义。还有一个 _sys_call_table_ 函数指针数组，其中包含指向所有系统调用处理程序的指针。每个系统调用都有一个"系统调用号"，它是sys_call_table数组中的对应函数的 *索引* 。所有的系统调用号都在这里定义，它们被汇编器代码用于指定的感兴趣的系统调用。以write系统调用为例，来看一下系统调用的包装函数：

  #+begin_src asm 
	    .globl call_sys_write
    call_sys_write:
	    mov w8, #SYS_WRITE_NUMBER
	    svc #0
	    ret
  #+end_src

该函数非常简单：它只是将 _系统调用号_ *存储* 在 _w8寄存器_ 中，并通过执行 _svc_ 指令生成 _同步异常_ 。按照惯例，w8寄存器用于存储系统调用号：
+ 寄存器 x0-x7 用于存储系统调用的参数
+ x8 用于存储系统调用号，这样一个系统调用就可以有最多8个参数 

#+begin_example
  这样的包装函数通常不会直接包含在内核中，更有可能在不同的语言标准库中找到它们，比如glibc
#+end_example

* 处理同步异常
