#+TITLE: Linux 项目结构
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: ./initialization.html
#+HTML_LINK_UP: ./introduction.html
#+OPTIONS: num:nil timestamp:nil ^:nil

这是我们第一次谈论Linux. 这个想法是首先完成编写我们自己的内核的一小步, 然后看一下相同的东西在Linux中的工作方式

#+begin_example
  到目前为止, 我们仍然做得很少：仅实施了我们的第一个裸机hello world 程序, 但仍然能够发现RPi OS和Linux之间的某些相似之处
#+end_example
* 项目结构
每当您开始研究任何大型软件项目时, 都需要快速浏览一下项目结构

#+begin_example
  这非常重要, 因为它使您能够了解由哪些模块组成项目以及什么是顶层结构
#+end_example

首先, 需要拉取Linux系统代码库：

#+begin_src sh 
  git clone -b v4.14 --depth 1 https://github.com/torvalds/linux.git
#+end_src

#+begin_example
  这里使用的是v4.14版本, 因为这是撰写本文时的最新版本. 使用此特定版本将对Linux源代码进行所有引用
#+end_example
接下来, 看一下可以在Linux代码中中找到的文件夹. 我们不会研究所有, 只会研究我认为最重要的那些：
+ [[https://github.com/torvalds/linux/tree/v4.14/arch][arch]]: 此文件夹包含子文件夹, 每个子文件夹用于特定的 *处理器体系* 结构
  #+begin_example
    通常, 只考虑 arm64 - 这是与 ARM.v8 处理器兼容的版本
  #+end_example
+ [[https://github.com/torvalds/linux/tree/v4.14/init][init]]: 内核是由体系结构决定的代码引导. 但是随后就会将执行交给  [[https://github.com/torvalds/linux/blob/v4.14/init/main.c#L509][start_kernel]] 函数
  + 该函数负责常见的内核初始化同时该函数也是与体系结构无关的内核起点
  + 在 _start_ 文件夹中定义了 _start_kernel_ 函数以及一些其他初始化函数 
+ [[https://github.com/torvalds/linux/tree/v4.14/kernel][kernel]]: 这是Linux内核的 *核心* . 几乎所有主要的内核子系统都在此实现
+ [[https://github.com/torvalds/linux/tree/v4.14/mm][mm]]: 在此处定义了与 *内存管理* (Memory mangement)相关的所有数据结构和方法
+ [[https://github.com/torvalds/linux/tree/v4.14/drivers][drivers]]: 这是Linux内核中最大的文件夹. 它包含所有 *设备驱动程序* 的实现
+ [[https://github.com/torvalds/linux/tree/v4.14/fs][fs]]: 在此可以处找到不同的 *文件系统* 实现 


#+begin_example
  这里不会研究所有文件夹, 只会研究最重要的那些

  尽管这里解释是非常高层次的, 但是到目前为止已经足够了

  接下来将尝试更详细地研究Linux构建系统
#+end_example

#+ATTR_HTML: :border 1 :rules all :frame boader
| [[file:build_system.org][Next: 内核构建系统]] | [[file:introduction.org][Previous: RPi OS 入门]] | [[file:initialization.org][Home: 内核初始化]] |
