#+TITLE: Linux project structure
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: ./initialization.html
#+HTML_LINK_UP: ./introduction.html
#+OPTIONS: num:nil timestamp:nil ^:nil

This is the first time we are going to talk about Linux

#+begin_example
  The idea is first to complete some small step in writing our own kernel, and then take a look at how the same things work in Linux

  So far we have done very little: we just implemented our first bare metal hello world program

  Still, we will be able to find some similarities between the RPi OS and Linux. And now we are going to explore some of them
#+end_example
* Project structure
Whenever you start investigating any large software project, it worth taking a quick look at the project structure

#+begin_example
  This is very important because it allows you to understand what modules compose the project and what is the high-level architecture

  Let's try to explore project structure of the Linux kernel
#+end_example

First of all, you need to clone the Linux repository:

#+begin_src sh 
  git clone -b v4.14 --depth 1 https://github.com/torvalds/linux.git
#+end_src

#+begin_example
  We are using v4.14 version because this was the latest version at the time of writing

  All references to the Linux source code will be made using this specific version
#+end_example
Next, let's take a look at the folders that we can find inside the Linux repository. We are not going to look at all of them, but only at those that I consider the most important to start with:
+ _arch_: This folder contains subfolders, each for a *specific processor architecture*
  #+begin_example
    Mostly we are going to work with arm64 - this is the one that is compatible with ARM.v8 processors
  #+end_example
+ _init_: Kernel is always booted by architecture specific code. But then execution is passed to the start_kernel function that is responsible for common kernel initialization and is an architecture independent kernel starting point. *start_kernel* function, together with some other initialization functions, is defined in the init folder
+ _kernel_: This is the *core* of the Linux kernel. Almost all major kernel subsystems are implemented there
+ _mm_: All data structures and methods related to *memory management* are defined there
+ _drivers_: This is the largest folder in the Linux kernel. It contains implementations of all *device drivers*
+ _fs_: You can look here to find different *filesystem* implementations


#+begin_example
  This explanation is very high-level, but this is enough for now

  In the next chapter, we will try to examine Linux build system in some details
#+end_example

#+ATTR_HTML: :border 1 :rules all :frame boader
| [[file:build_system.org][Next: Kernel Build System]] | [[file:introduction.org][Previous: Introducing RPi OS, or bare-metal "Hello, World!"]] | [[file:initialization.org][Home: Kernel Initialization]] |
