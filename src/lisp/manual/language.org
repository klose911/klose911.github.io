#+TITLE: Lisp 语言
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./css/main.css" />
#+HTML_LINK_UP: ./manual.html   
#+HTML_LINK_HOME: ./manual.html
#+OPTIONS: num:nil timestamp:nil ^:nil

LISP语言主要设计用于符号数据处理。它已被用于微积分、电路理论、数学逻辑、游戏玩法和其他人工智能领域的符号计算

#+begin_example
  LISP是一种形式化的数学语言。因此，可以给出一个简洁而完整的描述。这是本手册的第一部分的目的

  其他部分将描述使用LISP的优点的方法，并解释扩展语言，使其成为方便的编程系统
#+end_example

LISP与大多数编程语言在三个重要方面不同：
1. 数据的性质。在LISP语言中，所有的数据都是符号表达式，通常称为 _S表达式_ 。S表达式具有 *不确定长度* 和 *分支树型结构* ，以便可以轻松地分离出重要的子表达式。在LISP编程系统中，大部分可用内存用于以列表结构存储S表达式。这种类型的内存组织使程序员摆脱了为程序的不同部分分配存储空间的必要性
2. 源语言本身，它指定了如何处理S表达式。这由S表达式的递归函数组成。由于递归函数的书写符号本身不属于S表达式符号，因此称为元语言。因此，这些表达式将称为 _M表达式_ 
3. LISP可以解释和执行以S表达式形式编写的程序。因此，像机器语言一样，与大多数其他高级语言不同，它可以用于生成可进一步执行的程序



* 符号表达式
最基本的S表达式类型是 *原子符号* 。一个 _原子符号_ 是由不超过三十个数字和大写字母组成的字符串，第一个字符必须是一个字母。实例：

#+begin_example
  A 
  APPLE 
  PART2 
  EXTRALONGSTRINGOFLETTERS 
  A4B66XYZ2 
#+end_example

这些符号被称为原子符号，因为它们作为一个整体被视为一个符号，不能在LISP内部拆分为单个字符。因此，A、B和AB在LISP中没有任何关系，除非它们是三个不同的原子符号。所有的 S 表达式都是由原子符号和标点符号 _(_ , _)_ 和 _._ 组成的。形成 S 表达式的基本操作是将两个 S 表达式组合起来形成一个更大的 S 表达式

#+begin_example
  从两个原子符号 A1 和 A2 中，可以形成 S 表达式 (A1 . A2)
#+end_example

一个S表达式要么是一个原子符号，要么是按照以下顺序由这些元素组成的：一个左括号，一个S表达式，一个点号，一个S表达式和一个右括号

#+begin_example
  注意：上诉定义是递归的

    ATOM 
    (A B) 
    (A . (B C)) 
    ((A1 . A2) . B) 
    ((U V) . (X . Y)) 
    ((U VI . (X (Y Z))
#+end_example

* 基本函数
接下来将介绍一些 S-表达式的基本函数。为了将函数与 S-表达式区分开来：
+ 用 _小写字母_ 来编写函数名称，因为原子符号只包含大写字母
+ 函数的参数将被分组在 _方括号_ 中，而不是圆括号中
+ 作为分隔符或标点符号，使用 _分号_

第一个要介绍的函数是 _cons_ 函数。它有两个参数，实际上是用于从较小的S表达式构建S表达式的函数：

#+begin_example
  cons[A;B]=(A . B)
  cons[(A . B);C]=((A . B) . C)
  cons[cons[A;B];C]= ((A . B) . C)
#+end_example

下一对函数则与 cons 函数完全相反，它们生成给定表达式的子表达式。函数 _car_ 有一个参数。它的值是其复合参数的第一部分。如果 car 的参数是原子，则其值未定义

#+begin_example
  car[(A . B)] = A 
  car[(A . (B1 . B2))] = A 
  car [((A1 . A2) . B)] = (A1 . A2) 
  car[A] is undefined 
#+end_example

函数 _cdr_ 接收一个参数，其值为其组合参数的第二部分。如果 cdr 的参数是原子，则其值同样未定义

#+begin_example
  cdr[(A . B)] = B
  cdr[(A . (B1 . B2))] = (B1 . B2)
  cdr[(A1 . A2) . B)] = B 
  cdr[A] is undefined 
  car[cdr[(A . (B1 . B2))] = B1 
  car[cdr[(A . B)]] is undefined 
  car[cons[A;B]]=A
#+end_example

对于任何一个 S-表达式，通过适当的 _car_ 和 _cdr_ 的组合，可以得到它的任何子表达式。如果 _x_ 和 _y_ 代表任意两个 S-表达式，则以下等式成立：

#+begin_example
  car[cons(x;y)] = x 
  cdr[cons(x;y)] = y
#+end_example

对于任何一个复合的（非原子的）S-表达式 _x_ ，以下等式也成立：

#+begin_example
  cons[car[x];cdr[x]] = x
#+end_example

这些等式中使用的符号 _x_ 和 _y_ 被称为 *变量* 。在 LISP 中，变量用于表示 S-表达式

#+begin_example
  在选择变量和函数的名称时，将使用与构成原子符号相同类型的字符串，只不过使用小写字母
#+end_example

一个其值为 _真_ 或 _假_ 的函数被称为 *谓词* 。在 LISP 中，真值和假值分别由原子符号 _T_ 和 _F_ 表示。因此，在 LISP 中，谓词是一个其值为 T 或 F 的函数

谓词 _eq_ 用于测试原子符号的 *相等性* 。对于非原子参数，其行为未定义

#+begin_example
  eq[A;A]=T 
  eq[A;B] = F 
  eq[A;(A. B)] is undefined 
  eq[(A . B);(A . B)] is undefined 
#+end_example

谓词 _atom_ 如果其参数是 *原子符号* ，则返回 true，否则返回 false

#+begin_example
  atom[EXTRALONGSTRINGOFLETTERS]=T 
  atom[(U . V)]=F 
  atom[car[(U . V)]]=T
#+end_example

* 列表表示法
#+begin_example
  迄今为止使用的 S-表达式采用点表示法写成，但通常更方便的是能够写出长度不定的表达式列表

  例如 (A B C D E)
#+end_example
任何 S-表达式都可以用 _点表示法_ 表示。但是，LISP 还有一种名为 *列表表示法* 的 S-表达式的替代形式

#+begin_example
  列表 (ml m2 ... mn) 可以用点表示法定义

  它等同于 (ml . (m2 . (... . (mn . NIL). ...)))
#+end_example

+ 在LISP中，原子符号 _NIL_ 用作 *列表的终止符* ，空列表（）与NIL相同
+ 列表可以有子列表
+ 点表示法和列表表示法可以在同一个表达式中使用 

#+begin_example
  (A B C)=(A . (B , (C . NIL))) 
  ((A B) C)=((A . (B , NIL)) . (C . NIL)) 
  (A B (C D))=(A . (B . ((C . (D . NIL)) . NIL))) 
  (A) = (A . NIL) 
  ((A)) = ((A. NIL) . NIL) 
  (A (B . C)) = (A . ((B . C ) . NIL)) 


  历史上，列表元素的分隔符是逗号；然而，现在通常使用空格

  在LISP中，它们是完全等价的： (A, B, C)与 (A B C)相同 
#+end_example

熟悉在列表表示法中对基本函数操作的结果非常重要。这可以通过将其转换为点表示法来确定结果：

#+begin_example
  car[(A B C)] = A 
  cdr[(A B C)] = (B C) 
  cons[A ; (B C)] = (A B C) 
  car[((A B) C)] = (A B) 
  cdr[(A)] = NIL 
  car[cdr[(A B C)]] = B 
#+end_example

可以方便多个 car 和 cdr 的连续使用，具体做法是构建以 _c_ 开头，以 _r_ 结尾，并在它们之间有多个 _a_ 和 _d_ 的函数名：

#+begin_example
  cadr [(A B C)] = car[cdr(A B C)] = B 
  caddr[(A B C)] = C
  cadadr[(A (B C) D)] = C 
#+end_example

名称中的最后一个a或d实际上表示要执行的第一个操作，因为它最靠近参数

* LISP 元语言
已经介绍了一种称为S表达式的数据类型和五种S表达式的基本函数。还讨论了元语言的以下特征。
1. 函数名和变量名与原子符号类似，只是使用小写字母
2. 函数的参数由方括号绑定，并用分号分隔
3. 函数的组合可以通过使用嵌套的括号集来编写 

这些特征允许我们编写函数定义，比如：

#+begin_example
  third[x] = car[cdr[cdr[x]]]  
#+end_example

函数 third 从一个列表返回第三个元素，比如：

#+begin_example
  third[(A B C D)] = C

  third 函数实际上等价于 caddr 
#+end_example

这种方式可以形成的函数类相当有限且不是非常有趣。更大的函数类可以通过 _条件表达式_ 来定义，条件表达式是一种提供函数定义中 *分支* 的表达方式。条件表达式的形式如下：

#+begin_example
  [p1 -> e1; p2 -> e2; ... pn -> en]
#+end_example

其中每个 pi 是一个表达式，其值可能是真或假，每个 ei 是任何表达式。条件表达式的含义是：
+ 如果 p1 为真，则 e1 的值是整个表达式的值
+ 如果 p1 为假，则如果 p2 为真，则 e2 的值是整个表达式的值
+ pi 从左到右进行搜索，直到找到第一个为真的表达式，然后选择相应的 ei
+ 如果 pi 都为假，则整个表达式的值未定义

每个 pi 或 ei 本身可以是一个 _S-expression_ 、一个 _函数_ 、一组 _函数的组合_ 或者它本身是另一个 _条件表达式_

#+begin_example
  [eq[car[x];A] -> cons[B ; cdr[x]]; T -> x] 

  如果x的car它恰好是A, 则将其替代为B。但如果x的car不是A，则保持不变

  这里的原子符号T代表真
#+end_example

条件表达式的主要应用是递归定义函数：

#+begin_example
  ff[x]=[atom[x]->x; T->ff[car[x]]]  
#+end_example

这个例子定义了函数ff，它选择任何给定表达式的第一个原子符号。这个表达式可以这样理解：
+ 如果x是原子符号，那么x本身就是答案
+ 否则，函数ff将应用于x的car

#+begin_example
  如果x是原子的，那么将选择第一个分支 x

  否则，由于T始终为真，将选择第二个分支 ff[car[x]]
#+end_example

ff的定义是递归的，因为ff实际上是根据它自己定义的。如果继续对任何S表达式进行car操作，最终会产生一个原子符号。因此该过程始终是良好定义的

#+begin_example
  一些递归函数可能仅对某些参数具有良好定义，但对于某些其他参数而言则是无限递归的

  当这样的函数在LISP编程系统中被解释时，它将耗尽所有可用的内存，或者在程序人为停止之前一直循环
#+end_example

现在来观察下 ff[((A . B) . C)] 的求值过程。首先，把函数定义里的变量 x 做替换：
#+begin_example
  ff[((A . B) . C)] = [atom[((A . B) . C)] -> ((A . B) . C); T -> ff[car[((A . B) . C)]]]
		    = [T -> ff[car[((A . B) . C)]]]
		    = ff[car[((A . B) . C)]
		    = ff[(A . B)]

#+end_example
		  
因为 ff 是递归定义的，所以用 (A . B) 来替换 x 后：

#+begin_example
  ff[(A . B)] = [atom[(A . B)] -> (A . B) ; T -> ff[car[(A . B)]]]
	      = [T -> ff[car[(A . B)]]]
	      = ff[car[(A . B)]]
	      = ff[A]
	      = [atom[A] -> A ; T -> ff[car[A]]]
	      = A
#+end_example
	    
