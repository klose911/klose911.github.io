#+TITLE: 模块和函数
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: shell.html   
#+HTML_LINK_HOME: sequential.html
#+OPTIONS: num:nil timestamp:nil


#+BEGIN_EXAMPLE
  如果一种编程语言只能通过 shell 来运行代码，那么这种语言基本上没什么太大的用处，Erlang 同样可以通过脚本来运行程序
#+END_EXAMPLE

这里有一小段 Erlang 程序。使用合适的文本编辑器将其输入到文件 _tut.erl_ 中。文件名称必须为 tut.erl 不能任意修改，并且需要将其放置于启动 erl 命令时所在的目录下

#+BEGIN_EXAMPLE
  如果恰巧编辑器有 Erlang 模式的话，那么编辑器会帮助你优雅地组织和格式化你的代码 （参考 Emacs 的 Erlang 模式）

  不过即使没有这样的编辑器，也可以很好地管理自己的代码
#+END_EXAMPLE
下面是待输入的代码：

#+BEGIN_SRC erlang
  -module(tut).
  -export([double/1]).

  double(X) ->
      2 * X.
#+END_SRC

很容易就可以看出来这个程序将数值翻倍。开始两行的代码稍后会解释。先来编译一下这段代码。可以在 Erlang shell 下来完成这个任务，其中 _c_ 代表 *编译* 的意思：

#+BEGIN_SRC sh 
  3> c(tut).
  {ok,tut}
#+END_SRC
{ok,tut} 说明编译成功。如果返回 _error_ 则表示输入的代码中存在错误

#+BEGIN_EXAMPLE
  其它相关的错误信息可以帮助你弄清楚错误的位置和原因，然后可以根据错误提示修改并重新编译代码
#+END_EXAMPLE


下面运行这个程序：

#+BEGIN_SRC sh 
  4> tut:double(10).
  20
#+END_SRC


#+BEGIN_EXAMPLE
和预期结果一样，10 乘以 2 后就是 20
#+END_EXAMPLE

先回到代码最开始的这两行。每个的 Erlang 程序的文件都包含一个 _Erlang 模块_ 。模块中代码的 _第一行_ 就是该 _模块的名字_ ：

#+BEGIN_SRC erlang 
  -module(tut).
#+END_SRC

#+BEGIN_EXAMPLE
  因此，这个模块名为 tut 请注意该行代码结束后的句号 '.'  
#+END_EXAMPLE

存储模块的 *文件必须与模块同名* ，并且以 _.erl_ 作为扩展

#+BEGIN_EXAMPLE
在这个例子中，文件名为 tut.erl
#+END_EXAMPLE

如果使用到另外一个模块中的一个函数，可以使用如下的语法 _module_name:function_name(arguments)_ 因此，下面的代码的含义也就是调用模块 tut 中的函数 double，并且传递的实参为 10：

#+BEGIN_SRC erlang 
  tut:double(10).
#+END_SRC

第二行声明 tut 模块中包含一个 _double 函数_ ，此函数接受 _一个参数_ （在本例中为 X）:

#+BEGIN_SRC erlang 
  -export([double/1]).
#+END_SRC

#+BEGIN_EXAMPLE
  同时，第二行声明也说明了这个函数可以在 tut 模块外被其它模块调用

  后面会详细说明这一点，请再次注意这一行末尾的句号
#+END_EXAMPLE


** 阶乘函数
   #+BEGIN_EXAMPLE
     接下来给出一个更加复杂的例子，计算一个数的阶乘

     比如，4 的阶乘即为 432*1，等于 24
   #+END_EXAMPLE
   在 tut1.erl 文件中输入如下的一段代码：

   #+BEGIN_SRC erlang
  -module(tut1).
  -export([fac/1]).

  fac(1) ->
      1;
  fac(N) ->
      N * fac(N - 1).
   #+END_SRC

   #+BEGIN_EXAMPLE
   所以在模块 tut1 中存在一个函数 fac，此函数接受一个输入参数 N
   #+END_EXAMPLE

   第一部分说明的是 1 的阶乘即为 1：
   #+BEGIN_SRC erlang
  fac(1) ->
      1;
   #+END_SRC
   需要注意的是，这一部分是以 _分号_ 结束的，这也就表示后面还有 fac 函数的更多内容。第二部分表示 N 的阶乘为 N 乘以 N-1 的阶乘：

   #+BEGIN_SRC erlang 
  fac(N) ->
      N * fac(N - 1).
   #+END_SRC

   与前面不同，这部分是以 _句号_ 结尾的。这也就是说，后面没有这个函数更多的内容了

   #+BEGIN_SRC sh 
  6> tut1:fac(4).
  24
   #+END_SRC

   #+BEGIN_EXAMPLE
     调用 tut1 模块中的 fac 函数，传入的参数为 4
   #+END_EXAMPLE

** 多个参数
   #+BEGIN_EXAMPLE
   与其它语言一样，Erlang 函数也可以有多个参数
   #+END_EXAMPLE
   扩展 tut1 模块，实现一个函数完成两个数相乘：

   #+BEGIN_SRC erlang 
  -module(tut1).
  -export([fac/1, mult/2]).

  fac(1) ->
      1;
  fac(N) ->
      N * fac(N - 1).

  mult(X, Y) ->
      X * Y.
   #+END_SRC

   扩展模块时，需要修改 -export 这一行。在这一行中添加另外一个接受两个参数的函数 mult

   #+BEGIN_SRC sh 
  8> tut1:mult(3,4).
  12
   #+END_SRC

   在这个例子中，数字是整数值，代码中函数的参数 N、X 与 Y 被称之为 _变量_ 。变量必须以 *大写字母* 开始 

   #+BEGIN_EXAMPLE
   诸如，Number、ShoeSize 和 Age 都是变量
   #+END_EXAMPLE

[[file:atom.org][Next：原子类型]]

[[file:shell.org][Previous：Erlang Shell]]

[[file:sequential.org][Home：顺序编程]]
