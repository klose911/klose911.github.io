#+TITLE: 原子类型
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: module_function.html   
#+HTML_LINK_HOME: sequential.html
#+OPTIONS: num:nil timestamp:nil


* 原子
  原子类型是 Erlang 语言中另一种数据类型。所有原子类型都以 _小写字母_ 开头。原子类型就是名字而已，没有其它含义。它们与变量不同，变量拥有值，而原子类型没有

  #+begin_example
  例如，charles，centimeter，inch 等
  #+end_example

  下面程序完成英寸与厘米之间的相互转换：

  #+begin_src erlang 
  -module(atom).
  -export([convert/2]).

  convert(M, inch) ->
      M / 2.54;

  convert(N, centimeter) ->
      N * 2.54.
  #+end_src


  测试：
  #+begin_src sh 
  2> atom:convert(10,inch).
  atom:convert(10,inch).
  3.937007874015748
  3> atom:convert(10,centimeter).
  atom:convert(10,centimeter).
  25.4
  #+end_src

  #+begin_example
  到目前为止都没有介绍小数（符点数）的相关内容
  #+end_example

  如果输入的参数既不是 centimeter 也不是 inch 时会发生什么情况：

  #+begin_src sh 
  4> atom:convert(10,mile).
  atom:convert(10,mile).
  ,** exception error: no function clause matching 
		      atom:convert(10,mile) (atom.erl, line 4)
  #+end_src

  convert 函数的两部分被称之为函数的两个子句

  #+begin_example
  正如所看到的那样，miles 并不是子句的一部分。Erlang 系统找不到匹配的子句，所以返回了错误消息 function_clause
  #+end_example

  shell 负责被错误信息友好地输出，同时错误元组会被存储到 shell 的历史列表中，可以使用 _v/1_ 命令将该列表输出：

  #+begin_src sh 
  5> v(4). 
  v(4). 
  {'EXIT',{function_clause,[{atom,convert,
				  [10,mile],
				  [{file,"atom.erl"},{line,4}]},
			    {erl_eval,do_apply,6,[{file,"erl_eval.erl"},{line,684}]},
			    {shell,exprs,7,[{file,"shell.erl"},{line,686}]},
			    {shell,eval_exprs,7,[{file,"shell.erl"},{line,642}]},
			    {shell,eval_loop,3,[{file,"shell.erl"},{line,627}]}]}}
  #+end_src

* 元组 

  前面程序的风格不是一好的编程风格。例如：
  #+begin_src erlang
atom:convert(3,inch)  
  #+end_src
  #+begin_example
  这是意味着 3 本身已经是英寸表示了呢？还是指将 3 厘米转换成英寸呢？ 
  #+end_example

  Erlang 提供了将 *某些元素分成组* 并用以更易于理解的方式表示的机制。它就是 _元组_ 。一个元组由 _花括号_ 括起来的：

  #+begin_example
    {inch,3} 指的就是 3 英寸，而 {centimeter, 5} 指的就是 5 厘米
  #+end_example

  接下来，重写厘米与英寸之间的转换程序：

  #+begin_src erlang 
  -module(atom).
  -export([convert_length/1]).

  convert_length({centimeter, X}) ->
      {inch, X / 2.54};
  convert_length({inch, Y}) ->
      {centimeter, Y * 2.54}.
  #+end_src

  编译并测试：

  #+begin_src sh 
  9> atom:convert_length({inch, 5}). 
  atom:convert_length({inch, 5}). 
  {centimeter,12.7}

  10> atom:convert_length(atom:convert_length({inch, 5})). 
  atom:convert_length(atom:convert_length({inch, 5})). 
  {inch,5.0}
  #+end_src

  #+begin_example
  请注意：第二个测试代码将 5 英寸转换成厘米后，再转换为就英寸，所以它得到原来的值。这也表明，一个函数实参可以是另一个函数的返回结果
  #+end_example


  元组中可以有更多的元素，而不仅仅像上面描述的那样只有两部分。事实上，可以在元组中，使用任意多的部分，只要每个部分都是合法的 Erlang 的项。例如，表示世界上不同城市的温度值：

  #+begin_src erlang 
  {moscow, {c, -10}}

  {cape_town, {f, 70}}

  {paris, {f, 28}}
  #+end_src

  这些元组中每个都有固定数目的项。元组中的 *每个项* 都被称之为一个 _元素_ 
  #+begin_example
    在元组 {moscow,{c,-10}} 中，第一个元素为 moscow 而第二个元素为 {c,-10}。其中，c 表示摄氏度，f 表示华氏度
  #+end_example

  [[file:list.org][Next：列表]]

  [[file:module_function.org][Previous：模块和函数]]

  [[file:sequential.org][Home：顺序编程]]

