#+TITLE: 输出至终端
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: man.html   
#+HTML_LINK_HOME: sequential.html
#+OPTIONS: num:nil timestamp:nil

下面就用一个简单的示例程序来说明如何使用 _io:format_ 函数：

#+begin_src sh 
  1> io:format("hello world~n", []).
  hello world
  ok

  2> io:format("this outputs one Erlang term: ~w~n", [hello]).
  this outputs one Erlang term: hello
  ok

  3> io:format("this outputs two Erlang terms: ~w~w~n", [hello, world]).
  this outputs two Erlang terms: helloworld
  ok

  4> io:format("this outputs two Erlang terms: ~w ~w~n", [hello, world]).
  this outputs two Erlang terms: hello world
  ok


  5> io:format("hello world ~w ~w", [1]). 
  ,** exception error: bad argument
       in function  io:format/3
	  called as io:format(<0.64.0>,"hello world ~w ~w",[1])
#+end_src

_format/2_ （2 表示两个参数）接受两个列表作为参数：
+ 第一个参数是一个字符串（前面已经说明，字符串也是列表）
+  _~w_ 会按顺序被替换为第二个列表中的的项以外，第一个参数会被直接输出
+ 每个 _~n_ 都会导致输出换行
+ 如果正常输出，io:formate/2 函数会返回个原子值 ok，与其它 Erlang 函数一样，如果发生错误会直接导致函数崩溃

#+begin_example
  这并不是 Erlang 系统中的错误，而是经过深思熟虑后的一种策略，稍后会看到，Erlang 有着非常完善的错误处理机制来处理这些错误

  请注意，io:format 函数崩溃并不是说 Erlang shell 本身崩溃了
#+end_example

[[file:example.org][Next：完整实例]]

[[file:man.org][Previous：使用手册]]

[[file:sequential.org][Home：顺序编程]]
