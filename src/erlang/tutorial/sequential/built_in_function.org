#+TITLE: 内置函数
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: condition.html   
#+HTML_LINK_HOME: sequential.html
#+OPTIONS: num:nil timestamp:nil ^:nil

内置函数是指那些出于某种需求而内置到 Erlang 虚拟机中的函数：
+ 内置函数常常实现那些在 Erlang 中 *不容易实现* 或者在 Erlang 中 *实现效率不高* 的函数
+ 某些内置函数也可以只用函数名就调用，因为这些函数是由于默认属于 erlang 模块。例如，下面调用内置函数 trunc 等价于调用 erlang:trunc。

#+begin_example
  判断是否为闰年。如果可以被 400 整除，则为闰年。为了判断，先将年份除以 400，再用 trunc 函数移去小数部分。然后，再将结果乘以 400 判断是否得到最初的值。例如，以 2004 年为例：

  2004 / 400 = 5.01
  trunc(5.01) = 5
  5 * 400 = 2000

  2000 年与 2004 年不同，2004 不能被 400 整除。而对于 2000 来说：

  2000 / 400 = 5.0
  trunc(5.0) = 5
  5 * 400 = 2000

  所以 2000 年为闰年
#+end_example

用 trunc 测试年份是否可以被 100 或者 4 整除：

#+begin_src erlang 
  trunc(Year / 400) * 400 == Year ->
      leap;
#+end_src

其实，在 Erlang 中可以使用内置函数 rem 来求得余数，这样会简单很多。示例如下：

#+begin_src erlang 
  Year rem 400 == 0 ->
      leap;
#+end_src

Erlang 中除了 trunc 之外，还有很多的内置函数，在 shell 中测试一些内置函数：
#+begin_src sh 
  1> trunc(5.6). 
  5
 
  2> round(5.6). 
  6

  3> length([a,b,c,d]).
  4

  4>  float(5).
  5.0

  5>  is_atom(hello).
  true

  6> is_atom("hello").
  false

  7>  is_tuple({paris, {c, 30}}).
  true

  8>  is_tuple([paris, {c, 30}]).
  false
#+end_src

Erlang 的内置函数中 *只有一部分可以用在 guard 中，并且不可以在 guard 中使用自定义的函数* 
#+begin_example
因为这不能保证 guard 没有副作用！！！
#+end_example

下现这些函数不可以用在 guard 条件测试中：
#+begin_src sh 
  9> atom_to_list(hello). 
  "hello"

  10> list_to_atom("goodbye").
  goodbye

  11> integer_to_list(22).
  "22"
#+end_src

#+begin_example
  这三个内置函数可以完成类型的转换

  要想在 Erlang 系统中（非 Erlang 虚拟机中）实现这样的转换几乎是不可能的
#+end_example

[[file:high_order_function.org][Next：高阶函数]]

[[file:condition.org][Previous：条件判断]]

[[file:sequential.org][Home：顺序编程]]


