#+TITLE: ECMAScript 6 简明教程
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+OPTIONS: num:nil timestamp:nil

* let、const 和 block 作用域
let 允许创建块级作用域，ES6 推荐在函数中使用 let 定义变量，而非 var：

#+BEGIN_SRC js
  var a = 2;
  {
    let a = 3;
    console.log(a); // 3
  }
  console.log(a); // 2
#+END_SRC

同样在块级作用域有效的另一个变量声明方式是 const，它可以声明一个常量．注意：　ES6 中， const 声明的常量类似于指针 *它指向某个引用* 也就是说这个常量的属性并非一成不变的，如：

#+BEGIN_SRC js
  {
      const ARR = [5, 6];
      ARR.push(7);
      console.log(ARR); // [5,6,7]
      ARR = 10; // TypeError
  }
#+END_SRC

有几个点需要注意：
+ let 关键词声明的变量不具备 *变量提升* 特性
+ let 和 const 声明只在最靠近的一个块中（ *花括号内* ）有效
+ 当使用常量 const 声明时，请使用 *大写变量* 如 CAPITAL _ CASING
+ const 在 *声明时必须被赋值* 

* 箭头函数
ES6 中，箭头函数就是函数的一种简写形式， *使用括号包裹参数，跟随一个 =>，紧接着是函数体* ：

#+BEGIN_SRC js
  // var getPrice = function () {
  //     return 4.55;
  // };

  // Implementation with Arrow Function
  var getPrice = () => 4.55;

  console.log(getPrice()) // 4.55
#+END_SRC

需要注意的是，上面例子中的getPrice箭头函数采用了 *简洁函数体，它不需要 return 语句* 下面这个例子使用的是正常函数体：

#+BEGIN_SRC js
  let arr = ['apple', 'banana', 'orange'];

  let breakfast = arr.map(fruit => {
      return fruit + 's';
  });

  console.log(breakfast); // apples bananas oranges
#+END_SRC

当然，箭头函数不仅仅是让代码变得简洁， *函数中this总是绑定总是指向对象自身* 具体可以看看下面几个例子：

#+BEGIN_SRC js
  function Person() {
      this.age = 0;
      
      setInterval(function growUp() {
          // 在非严格模式下，growUp() 函数的 this 指向 window 对象
          this.age++;
      }, 1000);
  }
  var person = new Person();
#+END_SRC

所以经常需要使用一个变量来保存 this，然后在 growUp 函数中引用：

#+BEGIN_SRC js
  function Person() {
      var self = this;
      self.age = 0;
      
      setInterval(function growUp() {
          self.age++;
      }, 1000);
  }
#+END_SRC

而使用箭头函数可以省却这个麻烦：

#+BEGIN_SRC js
  function Person() {
      this.age = 0;

      setInterval(() => {
          // |this| 指向 person 对象
          this.age++;
      }, 1000);
  }

  var person = new Person();
#+END_SRC

* 函数参数默认值
ES6 中允许你对函数参数设置默认值：

#+BEGIN_SRC js
  let getFinalPrice = (price, tax=0.7) => price + price * tax;
  console.log(getFinalPrice(500)); // 850
#+END_SRC

* Spread/Rest 操作符
Spread/Rest 操作符指的是 *...* ，具体是 Spread 还是 Rest 需要看上下文语境：

+ 当被用于迭代器中时，它是一个 *Spread* 操作符：
#+BEGIN_SRC js
  function foo(x, y, z) {
      console.log(x, y, z);
  }

  let arr = [1, 2, 3];
  foo(...arr); // 1 2 3
#+END_SRC

+ 当被用于函数形参时，是一个 *Rest* 操作符：
#+BEGIN_SRC js
  function foo(...args) {
    console.log(args);
  }
  foo( 1, 2, 3, 4, 5); // [1, 2, 3, 4, 5]
#+END_SRC

* 对象词法扩展

+ 允许 *声明在对象字面量时使用简写语法* ，来初始化属性变量和函数的定义方法
+ 允许在 *对象属性中进行计算操作* ：

#+BEGIN_SRC js :results output :exports result
  function getCar(make, model, value) {
      return {
          // 简写变量
          make, // 等同于 make: make
          model, // 等同于 model: model
          value, // 等同于 value: value

          // 属性可以使用表达式计算值
          ['make' + make]: true,

          // 忽略 `function` 关键词简写对象函数
          depreciate() {
              this.value -= 2500;
          }
      };
  }

  let car = getCar('Barret', 'Lee', 40000);
  console.log(car)
#+END_SRC

#+RESULTS:
: output: {
:     make: 'Barret',
:     model:'Lee',
:     value: 40000,
:     makeKia: true,
:     depreciate: function()
: }

* 二进制和八进制的字面量
支持二进制和八进制的字面量，通过在数字前面添加 *0o* 或者 *0O* 即可将其转换为八进制值：

#+BEGIN_SRC js
  let oValue = 0o10;
  console.log(oValue); // 8
   
  let bValue = 0b10; // 二进制使用 `0b` 或者 `0B`
  console.log(bValue); // 2
#+END_SRC

* 对象和数组解构
解构可以 *避免在对象赋值时产生中间变量* ：

#+BEGIN_SRC js :results output :exports result
  function foo() {
      return [1, 2, 3];
  }
  let arr = foo(); // [1,2,3]
  console.log(arr);

  let [a, b, c] = foo();
  console.log(a, b, c); // 1 2 3

  function bar() {
      return {
          x: 4,
          y: 5,
          z: 6
      };
  }
  let {
      x: x,
      y: y,
      z: z
  } = bar();
  console.log(x, y, z); // 4 5 6 
#+END_SRC

#+RESULTS:
: [1, 2, 3]
: 1 2 3
: 4 5 6

* 对象超类
允许在对象中使用 *super* 方法：

#+BEGIN_SRC js :results output :exports result
  var parent = {
      foo() {
          console.log("Hello from the Parent");
      }
  }

  var child = {
      foo() {
          super.foo();
          console.log("Hello from the Child");
      }
  }

  Object.setPrototypeOf(child, parent);
  child.foo(); // Hello from the Parent
  // Hello from the Child
#+END_SRC

#+RESULTS:
: Hello from the Parent
: Hello from the Child

* 模板语法和分隔符
ES6 中有一种十分简洁的方法组装一堆字符串和变量：
+ *${ ... }* 用来渲染一个变量
+ *`* 作为分隔符

#+BEGIN_SRC js
  let user = 'Barret';
  console.log(`Hi ${user}!`); // Hi Barret!
#+END_SRC

#+RESULTS:
: Hi Barret!

* for...of VS for...in
+ *for...of* 用于遍历一个 *迭代器* 如数组：
#+BEGIN_SRC js :results output :exports result
  let nicknames = ['di', 'boo', 'punkeye'];
  nicknames.size = 3;
  for (let nickname of nicknames) {
      console.log(nickname);
  }
#+END_SRC

#+RESULTS:
: di
: boo
: punkeye

+ *for...in* 用来遍历 *对象中的属性* ：
#+BEGIN_SRC js :results output :exports result
  let nicknames = ['di', 'boo', 'punkeye'];
  nicknames.size = 3;
  for (let nickname in nicknames) {
      console.log(nickname);
  }
#+END_SRC

#+RESULTS:
: 0
: 1
: 2

* Map 
ES6中两种新的数据结构集： *Map* 和 *WeakMap* 事实上每个对象都可以看作是一个 *Map* 

一个对象由多个 *key-val对* 构成，在Map中，任何类型都可以作为对象的key，如：

#+BEGIN_SRC js
  var myMap = new Map();

  var keyString = "a string",
      keyObj = {},
      keyFunc = function () {};

  // 设置值
  myMap.set(keyString, "value 与 'a string' 关联");
  myMap.set(keyObj, "value 与 keyObj 关联");
  myMap.set(keyFunc, "value 与 keyFunc 关联");

  myMap.size; // 3

  // 获取值
  myMap.get(keyString); // "value 与 'a string' 关联"
  myMap.get(keyObj); // "value 与 keyObj 关联"
  myMap.get(keyFunc); // "value 与 keyFunc 关联"
#+END_SRC

** WeakMap 
*WeakMap* 就是一个Map：
+ 所有key都是 *弱引用* 意思就是WeakMap中的东西 *垃圾回收时不考虑* 使用它不用担心内存泄漏问题
+ 所有key必须是 *对象* 

它只有四个方法: 
1. delete(key)
2. has(key)
3. get(key)
4. set(key, val)

#+BEGIN_SRC js
  let w = new WeakMap();
  w.set('a', 'b'); 
  // Uncaught TypeError: Invalid value used as weak map key

  var o1 = {},
      o2 = function(){},
      o3 = window;

  w.set(o1, 37);
  w.set(o2, "azerty");
  w.set(o3, undefined);

  w.get(o3); // undefined, because that is the set value

  w.has(o1); // true
  w.delete(o1);
  w.has(o1); // false
#+END_SRC

* Set
*Set* 对象是 *一组不重复的值* ，重复的值将被忽略，值类型可以是 *原始类型和引用类型* ：

#+BEGIN_SRC js
  let mySet = new Set([1, 1, 2, 2, 3, 3]);
  mySet.size; // 3
  mySet.has(1); // true
  mySet.add('strings');
  mySet.add({
      a: 1,
      b: 2
  });

#+END_SRC

可以通过 *forEach* 和 *for...of* 来遍历 *Set* 对象： 

#+BEGIN_SRC js :results output :exports result
  mySet.forEach((item) => {
      console.log(item);
  });

  for (let value of mySet) {
      console.log(value);
  }
#+END_SRC

#+RESULTS:
: 1
: 2
: 3
: 'strings'
: Object { a: 1, b: 2 }

Set同样有 *delete()* 和 *clear()* 方法
** WeakSet
类似于WeakMap， *WeakSet* 对象可以让一个集合中保存对象的 *弱引用* 在WeakSet中的对象只允许出现一次：
#+BEGIN_SRC js
  var ws = new WeakSet();
  var obj = {};
  var foo = {};

  ws.add(window);
  ws.add(obj);

  ws.has(window); // true
  ws.has(foo); // false, foo 没有添加成功

  ws.delete(window); // 从结合中删除 window 对象
  ws.has(window); // false, window 对象已经被删除
#+END_SRC

* 类
ES6中有 *class* 语法。值得注意是， 这里的class不是新的对象继承模型，它只是 *原型链的语法糖* 表现形式

** static 
使用 *static* 关键词定义基于类的函数的的方法和属性：
#+BEGIN_SRC js
  class Task {
      constructor() {
          console.log("task instantiated!");
      }

      showId() {
          console.log(23);
      }

      static loadAll() {
          console.log("Loading all tasks..");
      }
  }

  console.log(typeof Task); // function
  let task = new Task(); // "task instantiated!"
  task.showId(); // 23
  Task.loadAll(); // "Loading all tasks.."
#+END_SRC

** 继承
*extends* 允许一个子类继承父类，需要注意的是， *子类的constructor函数中需要执行super()函数*
#+BEGIN_SRC js :results output :exports result
  class Car {
      constructor() {
          console.log("Creating a new car");
      }
  }

  class Porsche extends Car {
      constructor() {
          super();
          console.log("Creating Porsche");
      }
  }

  let c = new Porsche();
#+END_SRC

#+RESULTS:
: Creating a new car
: Creating Porsche

当然也 *可以在子类方法中调用父类的方法* 如super.parentMethodName()

** 其他
有几点值得注意的是：
+ 类的声明不会提升 *如果要使用某个Class，那你必须在使用之前定义它* ，否则会抛出一个 *ReferenceError* 的错误
+ 在类中定义函数不需要使用 *function* 关键词

* Symbol
*Symbol* 是一种新的数据类型，它的值是 *唯一的，不可变的* ．ES6中提出symbol的目的是为了 *生成一个唯一的标识符* 不过访问不到这个标识符：

#+BEGIN_SRC js
  var sym = Symbol( "some optional description" );
  console.log(typeof sym); // symbol
#+END_SRC

注意：这里Symbol前面不能使用 *new* 操作符

如果它被用作一个对象的属性，那么这个属性会是 *不可枚举* 的：
#+BEGIN_SRC js
  var o = {
      val: 10,
      [Symbol("random")]: "I'm a symbol",
  };

  console.log(Object.getOwnPropertyNames(o)); // val， Symbol属性不会被枚举
  console.log(Object.getOwnPropertySymbols(o)); // Symbol["random"]
#+END_SRC

如果要获取对象symbol属性，需要使用 *Object.getOwnPropertySymbols(o)* 

* 迭代器
迭代器允许 *每次访问数据集合的一个元素，当指针指向数据集合最后一个元素是，迭代器便会退出* ：
+ 提供了 *next()* 函数来遍历一个序列，这个方法返回一个 *包含done和value属性的对象*
+ 可以通过 *Symbol.iterator* 给对象设置默认的遍历器，无论什么时候对象需要被遍历，执行它的 *@@iterator* 方法便可以返回一个用于获取值的迭代器

数组默认就是一个迭代器：
#+BEGIN_SRC js :results output :exports result
  var arr = [11, 12, 13];
  var itr = arr[Symbol.iterator]();

  itr.next(); 
  itr.next(); 
  itr.next(); 

  itr.next(); 
#+END_SRC

#+RESULTS:
: { value: 11, done: false }
: { value: 12, done: false }
: { value: 13, done: false }
: { value: undefined, done: true} 

你可以通过 *[Symbol.iterator]()* 自定义一个对象的迭代器。
* 生成器
*Generator* 函数允许一个函数 *返回的可遍历对象生成多个值* :
+ Generator函数以 function* 开头
+ 新的关键词 *yield* : 每次执行yield时， *返回的值变为迭代器的下一个值* 

#+BEGIN_SRC js :results output :exports result
  function* infiniteNumbers() {
      var n = 1;
      while (true) {
          yield n++;
      }
  }

  var numbers = infiniteNumbers(); // returns an iterable object

  numbers.next(); 
  numbers.next(); 
  numbers.next(); 
#+END_SRC

#+RESULTS:
: { value: 1, done: false }
: { value: 2, done: false }
: { value: 3, done: false }

* Promise
ES6对 *Promise* 有了原生的支持， 一个Promise是一个 *等待被异步执行的对象* ，当它执行完成后，其状态会变成 *resolved* 或者 *rejected* 
#+BEGIN_SRC js
  var p = new Promise(function (resolve, reject) {
      if ( /* condition maybe call ajax */ ) { 
          // fulfilled successfully
          resolve( /* value */ );
      } else {
          // error, rejected
          reject( /* reason */ );
      }
  });
#+END_SRC

每一个Promise都有一个 *then* 方法，这个方法接受两个参数：
1. 第一个是处理 *resolved* 状态的回调
2. 第二个是处理 *rejected* 状态的回调

#+BEGIN_SRC js
  p.then((val) => console.log("Promise Resolved", val),
         (err) => console.log("Promise Rejected", err));
#+END_SRC
