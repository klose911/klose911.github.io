#+TITLE: 通过端口转发访问集群中的应用程序
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/main.css" />
#+HTML_LINK_UP: kubeconfig.html
#+HTML_LINK_HOME: cluster.html
#+OPTIONS: num:nil timestamp:nil ^:nil

接下来展示如何使用 kubectl port-forward 命令连接到运行在 Kubernetes 集群中的 Redis 服务器

#+begin_example
  这种类型的连接对于数据库调试很有帮助
#+end_example
* 创建一个 Pod 来运行 Redis 服务器
  1. 创建一个 Pod：
     #+begin_src sh 
       $ kubectl create -f https://k8s.io/docs/tasks/access-application-cluster/redis-master.yaml
     #+end_src
     命令运行成功后将有以下输出验证该 Pod 是否已经创建：
     #+begin_example
       pod "redis-master" created
     #+end_example
  2. 检查 Pod 是否正在运行且处于就绪状态：
     #+begin_src sh 
       $ kubectl get pods
     #+end_src
     当 Pod 就绪，输出显示 Running 的状态：
     #+begin_example
	NAME           READY     STATUS    RESTARTS   AGE
	redis-master   2/2       Running   0          41s
     #+end_example
  3. 验证 Redis 服务器是否已在 Pod 中运行，并监听 6379 端口：
     #+begin_src sh 
       $ kubectl get pods redis-master --template='{{(index (index .spec.containers 0).ports 0).containerPort}}{{"\n"}}'
     #+end_src
     端口输出如下：
     #+begin_example
       6379
     #+end_example

* 将本地端口转发到 Pod 中的端口
  1. 将本地端口转发到 Pod 中的端口：
     #+begin_src sh 
       $ kubectl port-forward redis-master 6379:6379
     #+end_src
     输出类似于：
     #+begin_example
	I0710 14:43:38.274550    3655 portforward.go:225] Forwarding from 127.0.0.1:6379 -> 6379
	I0710 14:43:38.274797    3655 portforward.go:225] Forwarding from [::1]:6379 -> 6379
     #+end_example
  2. 启动 Redis 命令行界面：
     #+begin_src sh 
       $ redis-cli
     #+end_src
  3. 在 Redis 命令行提示符下，输入 ping 命令：
     #+begin_src sh 
       $ 127.0.0.1:6379>ping
     #+end_src

     Ping 请求成功返回 PONG

  #+begin_example
    创建连接，将本地的 6379 端口转发到运行在 Pod 中的 Redis 服务器的 6379 端口

    有了这个连接就可以在本地工作站中调试运行在 Pod 中的数据库
  #+end_example

  | [[file:service.org][Next: Service]] | [[file:kubeconfig.org][Previous: Kubeconfig]] | [[file:cluster.org][Home：集群]] |
