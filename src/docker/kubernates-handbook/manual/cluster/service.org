#+TITLE: 使用 service 访问群集中的应用程序
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/main.css" />
#+HTML_LINK_UP: port_forward.html
#+HTML_LINK_HOME: cluster.html
#+OPTIONS: num:nil timestamp:nil ^:nil

展示如何创建 Kubernetes Service 对象，外部客户端可以使用它来访问集群中运行的应用程序

#+begin_example
  该 Service 可以为具有两个运行实例的应用程序提供负载均衡
#+end_example
* 目的
  + 运行 Hello World 应用程序的两个实例
  + 创建一个暴露 node 节点端口的 Service 对象
  + 使用 Service 对象访问正在运行的应用程序

* 为在两个 pod 中运行的应用程序创建 service
  1. 在集群中运行 Hello World 应用程序：
     #+begin_src sh 
       $ kubectl run hello-world --replicas=2 --labels="run=load-balancer-example" --image=gcr.io/google-samples/node-hello:1.0  --port=8080
     #+end_src
     上述命令创建一个 Deployment 对象和一个相关联的 ReplicaSet 对象。该 ReplicaSet 有两个 Pod，每个 Pod 中都运行一个 Hello World 应用程序
  2. 显示关于该 Deployment 的信息：
     #+begin_src sh 
       $ kubectl get deployments hello-world
       $ kubectl describe deployments hello-world
     #+end_src
  3. 显示 ReplicaSet 的信息：
     #+begin_src sh 
       $ kubectl get replicasets
       $ kubectl describe replicasets
     #+end_src
  4. 创建一个暴露该 Deployment 的 Service 对象：
     #+begin_src sh 
       $ kubectl expose deployment hello-world --type=NodePort --name=example-service
     #+end_src
  5. 显示该 Service 的信息：
     #+begin_src sh 
       $ kubectl describe services example-service
     #+end_src
     #+begin_example
	Name:                   example-service
	Namespace:              default
	Labels:                 run=load-balancer-example
	Selector:               run=load-balancer-example
	Type:                   NodePort
	IP:                     10.32.0.16
	Port:                   <unset> 8080/TCP
	NodePort:               <unset> 31496/TCP
	Endpoints:              10.200.1.4:8080,10.200.2.5:8080
	Session Affinity:       None
	No events.
     #+end_example
     记下服务的 NodePort 值
     #+begin_example
       例如，在前面的输出中，NodePort 值为 31496
     #+end_example
  6. 列出运行 Hello World 应用程序的 Pod：
     #+begin_src sh 
       $ kubectl get pods --selector="run=load-balancer-example" --output=wide
     #+end_src

     #+begin_example
	NAME                           READY   STATUS    ...  IP           NODE
	hello-world-2895499144-bsbk5   1/1     Running   ...  10.200.1.4   worker1
	hello-world-2895499144-m1pwt   1/1     Running   ...  10.200.2.5   worker2
     #+end_example
  7. 获取正在运行 Hello World 应用程序的 Pod 的其中一个节点的 public IP 地址
     #+begin_example
       如何得到这个地址取决于您的集群设置

       例如，如果使用 Minikube，可以通过运行 kubectl cluster-info 查看节点地址

       如果使用 Google Compute Engine 实例，可以使用 gcloud compute instances list 命令查看公共地址节点
     #+end_example
  8. 在选择的节点上，在节点端口上例如创建允许 TCP 流量的防火墙规则
     #+begin_example
       如果服务 NodePort 值为 31568，创建防火墙规则，允许端口 31568 上的TCP流量
     #+end_example
  9. 使用节点地址和节点端口访问 Hello World 应用程序：
     #+begin_src sh 
       $ curl http://<public-node-ip>:<node-port>
     #+end_src

     其中：
     + <public-node-ip>: 节点的 public IP地址
     + <node-port>: 服务的 NodePort 值

     对成功请求的响应是一个 hello 消息：
     #+begin_example
       Hello Kubernetes!
     #+end_example

* 使用 Service 配置文件
  #+begin_example
    作为使用 kubectl expose 的替代方法，可以使用 service 配置文件 来创建 Service
  #+end_example

  要删除 Service，输入以下命令：
  #+begin_src sh 
    $ kubectl delete services example-service
  #+end_src

  删除 Deployment、ReplicaSet 和正运行在 Pod 中的 Hello World 应用程序，输入以下命令：
  #+begin_src sh 
    $ kubectl delete deployment hello-world
  #+end_src

  | [[file:pod.org][Next: Pod]] | [[file:port_forward.org][Previous：端口转发]] | [[file:cluster.org][Home：集群]] |
