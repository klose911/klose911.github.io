#+TITLE: Service Account
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/main.css" />
#+HTML_LINK_HOME: security.html
#+OPTIONS: num:nil timestamp:nil ^:nil

_Service Account_ 为Pod中的进程提供 *身份* 信息

#+begin_example
  注意：接下来是关于 Service Account 的用户指南，而不是 Service Account 的集群管理指南

  如果k8s集群管理员可能在集群中有自定义配置，这种情况下接下来描述的内容可能并不适用
#+end_example

+ 当真人用户访问集群（例如使用kubectl命令）时，apiserver 会将认证为一个特定的 _User Account_ 
  #+begin_example
    目前通常是admin，除非系统管理员自定义了集群配置
  #+end_example
+ Pod 容器中的进程也可以与 apiserver 联系。 当它们在联系 apiserver 的时候，它们会被认证为一个特定的 _Service Account_ 
  #+begin_example
    例如 default
  #+end_example

* 默认的 Service Account
  当创建 pod 的时候，如果没有指定一个 service account，系统会自动在与 _该pod 相同的 namespace_  下为其 *指派* 一个 _default service account_
  #+begin_example
    如果获取刚创建的 pod 的原始 json 或 yaml 信息，例如使用kubectl get pods/podename -o yaml命令，将看到spec.serviceAccountName字段已经被设置为 default
  #+end_example

  可以在 pod 中使用自动挂载的 service account 凭证来访问 API，是否能够取得访问 API 的许可取决于使用的 _授权插件和策略_ ：
  + 可以选择取消为 service account 自动挂载 API 凭证，只需在 service account 中设置 _automountServiceAccountToken: false_ 
    #+begin_example
      apiVersion: v1
      kind: ServiceAccount
      metadata:
	name: build-robot
      automountServiceAccountToken: false
    #+end_example
  + 可以选择只取消单个 pod 的 API 凭证自动挂载：
    #+begin_example
      apiVersion: v1
      kind: Pod
      metadata:
	name: my-pod
      spec:
	serviceAccountName: build-robot
	automountServiceAccountToken: false
	...
    #+end_example

    如果在 pod 和 service account 中同时设置了 automountServiceAccountToken , pod 设置中的优先级更高

* 多个Service Account
  #+begin_example
    每个 namespace 中都有一个默认的叫做 default 的 service account 资源
  #+end_example

  可以使用以下命令列出 namespace 下的所有 serviceAccount 资源：
  #+begin_src sh 
    $ kubectl get serviceAccounts
    NAME      SECRETS    AGE
    default   1          1d
  #+end_src

  可以像这样创建一个 ServiceAccount 对象：
  #+begin_src sh 
    $ cat > /tmp/serviceaccount.yaml <<EOF
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: build-robot
    EOF
    $ kubectl create -f /tmp/serviceaccount.yaml
    serviceaccount "build-robot" created
  #+end_src

  这个 Service account 对象的完整输出信息：

  #+begin_src sh 
    $ kubectl get serviceaccounts/build-robot -o yaml
    apiVersion: v1
    kind: ServiceAccount
    metadata:
    creationTimestamp: 2015-06-16T00:12:59Z
    name: build-robot
    namespace: default
    resourceVersion: "272500"
    selfLink: /api/v1/namespaces/default/serviceaccounts/build-robot
    uid: 721ab723-13bc-11e5-aec2-42010af0021e
    secrets:
    - name: build-robot-token-bvbk5
  #+end_src

  #+begin_example
    看到有一个 token 已经被自动创建，并被 service account 引用
  #+end_example
  
  清理 service account：
  #+begin_src sh 
    $ kubectl delete serviceaccount/build-robot
  #+end_src

  注意：
  + 可以使用授权插件来 设置 service account 的权限
  + 设置非默认的 service account，只需要在 pod 的spec.serviceAccountName 字段中将name设置为想要用的 service account 名字即可
  + 在 pod 创建之初 service account 就必须已经存在，否则创建将被拒绝
  + 不能更新已创建的 pod 的 service account

* API token 

  假设已经有了一个如上文提到的名为 _build-robot_ 的 service account，手动创建一个新的 secret：

  #+BEGIN_SRC sh 
  $ cat > /tmp/build-robot-secret.yaml <<EOF
  apiVersion: v1
  kind: Secret
  metadata:
    name: build-robot-secret
    annotations: 
      kubernetes.io/service-account.name: build-robot
  type: kubernetes.io/service-account-token
  EOF
  $ kubectl create -f /tmp/build-robot-secret.yaml
  secret "build-robot-secret" created
  #+END_SRC
  现在可以确认下新创建的 secret 取代了 _build-robot_ 这个 service account 原来的 API token：

  #+BEGIN_SRC sh 
  $ kubectl describe secrets/build-robot-secret 
  Name:   build-robot-secret
  Namespace:  default
  Labels:   <none>
  Annotations:  kubernetes.io/service-account.name=build-robot,kubernetes.io/service-account.uid=870ef2a5-35cf-11e5-8d06-005056b45392

  Type: kubernetes.io/service-account-token

  Data
  ====
  ca.crt: 1220 bytes
  token: ...
  namespace: 7 bytes
  #+END_SRC

  #+BEGIN_EXAMPLE
    所有已不存在的 service account 的 token 将被 token controller 清理掉
  #+END_EXAMPLE
* Image Pull Secret 

  首先，创建一个 imagePullSecret：

  #+BEGIN_SRC sh 
  kubectl create secret docker-registry <name> --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL
  #+END_SRC

  确认已创建：

  #+BEGIN_SRC sh 
  $ kubectl get secrets myregistrykey
  NAME             TYPE                              DATA    AGE
  myregistrykey    kubernetes.io/.dockerconfigjson   1       1d
  #+END_SRC

  修改 namespace 中的默认 service account 使用该 secret 作为 imagePullSecret：

  #+BEGIN_SRC sh 
  $ kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "myregistrykey"}]}'
  #+END_SRC

  #+BEGIN_SRC sh 
  $ kubectl get serviceaccounts default -o yaml > ./sa.yaml

  $ cat sa.yaml
  apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: 2015-08-07T22:02:39Z
    name: default
    namespace: default
    resourceVersion: "243024"
    selfLink: /api/v1/namespaces/default/serviceaccounts/default
    uid: 052fb0f4-3d50-11e5-b066-42010af0d7b6
  secrets:
  - name: default-token-uudge

  $ vi sa.yaml
  [editor session not shown]
  [delete line with key "resourceVersion"]
  [add lines with "imagePullSecret:"]
  $ cat sa.yaml
  apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: 2015-08-07T22:02:39Z
    name: default
    namespace: default
    selfLink: /api/v1/namespaces/default/serviceaccounts/default
    uid: 052fb0f4-3d50-11e5-b066-42010af0d7b6
  secrets:
  - name: default-token-uudge
  imagePullSecrets:
  - name: myregistrykey

  $ kubectl replace serviceaccount default -f ./sa.yaml
  serviceaccounts/default
  #+END_SRC

  #+BEGIN_EXAMPLE
    Vi 交互过程中需要手动编辑
  #+END_EXAMPLE

  现在，所有当前 namespace 中新创建的 pod 的 spec 中都需要增加如下内容：

  #+BEGIN_SRC yaml 
  spec:
    imagePullSecrets:
    - name: myregistrykey
  #+END_SRC

| [[file:rbac.org][Next: RBAC]] | [[file:security.org][Home：安全]] | 
