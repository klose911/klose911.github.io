#+TITLE: 垃圾回收
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/main.css" />
#+HTML_LINK_UP: taint_toleration.html   
#+HTML_LINK_HOME: cluster.html
#+OPTIONS: num:nil timestamp:nil ^:nil

Kubernetes 垃圾收集器的角色是删除指定的对象，这些对象曾经有但以后不再拥有 Owner 了 

#+BEGIN_EXAMPLE
  注意：垃圾收集是 beta 特性，在 Kubernetes 1.4 及以上版本默认启用
#+END_EXAMPLE
* Owner 和 Dependent
  一些 Kubernetes 对象是其它一些的 Owner，具有 Owner 的对象被称为是 Owner 的 Dependent

  #+BEGIN_EXAMPLE
    例如，一个 ReplicaSet 是一组 Pod 的 Owner
  #+END_EXAMPLE

  每个 Dependent 对象具有一个指向其所属对象的 _metadata.ownerReferences_ 字段：
  + 有时，Kubernetes 会自动设置 ownerReference 的值
    #+BEGIN_EXAMPLE
      例如，当创建一个 ReplicaSet 时，Kubernetes 自动设置 ReplicaSet 中每个 Pod 的 ownerReference 字段值

      在 1.6 版本，Kubernetes 会自动为一些对象设置 ownerReference 的值，这些对象是由 ReplicationController、ReplicaSet、StatefulSet、DaemonSet 和 Deployment 所创建或管理
    #+END_EXAMPLE
  + 也可以通过手动设置 ownerReference 的值，来指定 Owner 和 Dependent 之间的关系：

  #+BEGIN_EXAMPLE
    apiVersion: extensions/v1beta1
    kind: ReplicaSet
    metadata:
      name: my-repset
    spec:
      replicas: 3
      selector:
	matchLabels:
	  pod-is-for: garbage-collection-example
      template:
	metadata:
	  labels:
	    pod-is-for: garbage-collection-example
	spec:
	  containers:
	  - name: nginx
	    image: nginx
  #+END_EXAMPLE

  如果创建该 ReplicaSet，然后查看 Pod 的 metadata 字段，能够看到 OwnerReferences 字段：

  #+BEGIN_SRC sh 
  $ kubectl create -f https://k8s.io/docs/concepts/abstractions/controllers/my-repset.yaml
  $ kubectl get pods --output=yaml
  #+END_SRC

  输出显示了 Pod 的 Owner 是名为 my-repset 的 ReplicaSet：

  #+BEGIN_EXAMPLE
    apiVersion: v1
    kind: Pod
    metadata:
      ...
      ownerReferences:
      - apiVersion: extensions/v1beta1
	controller: true
	blockOwnerDeletion: true
	kind: ReplicaSet
	name: my-repset
	uid: d9607e19-f88f-11e6-a518-42010a800195
      ...
  #+END_EXAMPLE
* 控制垃圾收集器删除 Dependent
  当删除对象时，可以指定是否该对象的 Dependent 也自动删除掉。自动删除 Dependent 也称为 _级联删除_ 。Kubernetes 中有两种 级联删除 的模式：
  + background 模式
  + foreground 模式 

  如果删除对象时，不自动删除它的 Dependent，这些 Dependent 被称作是原对象的 _孤儿_ 
** Background 级联删除
   在 background 级联删除 模式下，Kubernetes 会立即删除 Owner 对象，然后垃圾收集器会在后台删除这些 Dependent 
** Foreground 级联删除
   在 foreground 级联删除 模式下，根对象首先进入 _删除中_ 状态。在 “删除中” 状态会有如下的情况：
   + 对象仍然可以通过 *REST API 可见* 
   + 会设置对象的 _deletionTimestamp_ 字段
   + 对象的 _metadata.finalizers_ 字段包含了值 _foregroundDeletion_


   一旦被设置为 “删除中” 状态，垃圾收集器会删除对象的所有 Dependent。垃圾收集器 *删除* 了所有 *Blocking* 的 _Dependent_（对象的 _ownerReference.blockOwnerDeletion_ =true）之后，它会删除 Owner 对象。

   #+BEGIN_EXAMPLE
     注意，在 “foreground 删除” 模式下，Dependent 只有通过 ownerReference.blockOwnerDeletion 才能阻止删除 Owner 对象

     在 Kubernetes 1.7 版本中将增加 admission controller，基于 Owner 对象上的删除权限来控制用户去设置 blockOwnerDeletion 的值为 true，所以未授权的 Dependent 不能够延迟 Owner 对象的删除

     如果一个对象的ownerReferences 字段被一个 Controller（例如 Deployment 或 ReplicaSet）设置，blockOwnerDeletion 会被自动设置，没必要手动修改这个字段
   #+END_EXAMPLE
** 设置级联删除策略
   通过为 _Owner 对象_ 设置 _deleteOptions.propagationPolicy_ 字段，可以控制级联删除策略。可能的取值包括： _orphan_ 、 _Foreground_ 或 _Background_ 

   对很多 _Controller_ 资源，包括 ReplicationController、ReplicaSet、StatefulSet、DaemonSet 和 Deployment， 默认的 _垃圾收集策略_ 是 *orphan* 。因此，除非指定其它的垃圾收集策略，否则所有 Dependent 对象使用的都是 orphan 策略

   #+BEGIN_EXAMPLE
     注意：这里所指的默认值是指 REST API 的默认值，并非 kubectl 命令的默认值，kubectl 默认为级联删除
   #+END_EXAMPLE

   在后台删除 Dependent 对象的例子：

   #+BEGIN_SRC sh 
  $ kubectl proxy --port=8080
  $ curl -X DELETE localhost:8080/apis/extensions/v1beta1/namespaces/default/replicasets/my-repset \
  -d '{"kind":"DeleteOptions","apiVersion":"v1","propagationPolicy":"Background"}' \
  -H "Content-Type: application/json"
   #+END_SRC

   在前台删除 Dependent 对象的例子：
   #+BEGIN_SRC sh 
  $ kubectl proxy --port=8080
  $ curl -X DELETE localhost:8080/apis/extensions/v1beta1/namespaces/default/replicasets/my-repset \
  -d '{"kind":"DeleteOptions","apiVersion":"v1","propagationPolicy":"Foreground"}' \
  -H "Content-Type: application/json"
   #+END_SRC

   一个孤儿 Dependent 的例子：

   #+BEGIN_SRC sh 
  $ kubectl proxy --port=8080
  $ curl -X DELETE localhost:8080/apis/extensions/v1beta1/namespaces/default/replicasets/my-repset \
  -d '{"kind":"DeleteOptions","apiVersion":"v1","propagationPolicy":"Orphan"}' \
  -H "Content-Type: application/json"
   #+END_SRC

   kubectl 也支持级联删除：
   + 设置 _--cascade_ 为 true，使 kubectl 自动删除 Dependent 对象
   + 设置 --cascade 为 false，会使 Dependent 对象成为孤儿 Dependent 对象
   + --cascade 的默认值是 true 

   使一个 ReplicaSet 的 Dependent 对象成为孤儿 Dependent的例子：

   #+BEGIN_SRC sh 
  kubectl delete replicaset my-repset --cascade=false
   #+END_SRC

   [[file:taint_toleration.org][Previous：Taint 和 Toleration]]

   [[file:cluster.org][Home：Cluster]]
