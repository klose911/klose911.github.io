#+TITLE: Secret 
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/main.css" />
#+HTML_LINK_HOME: storage.html
#+OPTIONS: num:nil timestamp:nil ^:nil

Secret解决了 _密码_ 、 _token_ 、 _密钥_ 等 *敏感* 数据的配置问题，而不需要把这些敏感数据暴露到镜像或者Pod Spec中。Secret可以以 _Volume_ 或者 _环境变量_ 的方式使用。Secret有三种类型：
+ _Service Account_ ：用来访问Kubernetes API，由Kubernetes自动创建，并且会自动挂载到Pod的 _/run/secrets/kubernetes.io/serviceaccount目录中_
+ _Opaque_ ： _base64编码_ 格式的Secret，用来存储密码、密钥等
+ _kubernetes.io/dockerconfigjson_ ：用来存储私有docker registry的认证信息

* Opaque Secret
  Opaque 类型的数据是一个 _map_ 类型，要求 _value_ 是 _base64编码_ 格式：

  #+begin_src sh 
    $ echo -n "admin" | base64
    YWRtaW4=
    $ echo -n "1f2d1e2e67df" | base64
    MWYyZDFlMmU2N2Rm
  #+end_src

  secrets.yml:

  #+begin_example
    apiVersion: v1
    kind: Secret
    metadata:
      name: mysecret
    type: Opaque
    data:
      password: MWYyZDFlMmU2N2Rm
      username: YWRtaW4=
  #+end_example

  接着，就可以创建secret了：

  #+begin_src sh 
    $kubectl create -f secrets.yml
  #+end_src

  创建好secret之后，有两种方式来使用它：
  + 以Volume方式
  + 以环境变量方式

** 将Secret挂载到Volume中
   #+begin_example
     apiVersion: v1
     kind: Pod
     metadata:
       labels:
	 name: db
       name: db
     spec:
       volumes:
       - name: secrets
	 secret:
	   secretName: mysecret
       containers:
       - image: gcr.io/my_project_id/pg:v1
	 name: db
	 volumeMounts:
	 - name: secrets
	   mountPath: "/etc/secrets"
	   readOnly: true
	 ports:
	 - name: cp
	   containerPort: 5432
	   hostPort: 5432
   #+end_example
** 将Secret导出到环境变量中
   #+begin_example
     apiVersion: extensions/v1beta1
     kind: Deployment
     metadata:
       name: wordpress-deployment
     spec:
       replicas: 2
       strategy:
	   type: RollingUpdate
       template:
	 metadata:
	   labels:
	     app: wordpress
	     visualize: "true"
	 spec:
	   containers:
	   - name: "wordpress"
	     image: "wordpress"
	     ports:
	     - containerPort: 80
	     env:
	     - name: WORDPRESS_DB_USER
	       valueFrom:
		 secretKeyRef:
		   name: mysecret
		   key: username
	     - name: WORDPRESS_DB_PASSWORD
	       valueFrom:
		 secretKeyRef:
		   name: mysecret
		   key: password
   #+end_example
* kubernetes.io/dockerconfigjson
  可以直接用kubectl命令来创建用于docker registry认证的secret：

  #+begin_src sh 
    $ kubectl create secret docker-registry myregistrykey --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL
    secret "myregistrykey" created.
  #+end_src

  也可以直接读取 _~/.docker/config.json_ 的内容来创建：

  #+begin_src sh 
    $ cat ~/.docker/config.json | base64
    $ cat > myregistrykey.yaml <<EOF
    apiVersion: v1
    kind: Secret
    metadata:
      name: myregistrykey
    data:
      .dockerconfigjson: UmVhbGx5IHJlYWxseSByZWVlZWVlZWVlZWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx5eXl5eXl5eXl5eXl5eXl5eXl5eSBsbGxsbGxsbGxsbGxsbG9vb29vb29vb29vb29vb29vb29vb29vb29vb25ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubmdnZ2dnZ2dnZ2dnZ2dnZ2dnZ2cgYXV0aCBrZXlzCg==
    type: kubernetes.io/dockerconfigjson
    EOF
    $ kubectl create -f myregistrykey.yaml
  #+end_src

  在创建Pod的时候，通过 _imagePullSecrets_ 来引用刚创建的myregistrykey:

  #+begin_example
    apiVersion: v1
    kind: Pod
    metadata:
      name: foo
    spec:
      containers:
	- name: foo
	  image: janedoe/awesomeapp:v1
      imagePullSecrets:
	- name: myregistrykey
  #+end_example
* Service Account
  Service Account用来访问Kubernetes API，由Kubernetes自动创建，并且会自动挂载到Pod的 _/run/secrets/kubernetes.io/serviceaccount_ 目录中：
  #+begin_src sh 
    $ kubectl run nginx --image nginx
    deployment "nginx" created

    $ kubectl get pods
    NAME                     READY     STATUS    RESTARTS   AGE
    nginx-3137573019-md1u2   1/1       Running   0          13s

    $ kubectl exec nginx-3137573019-md1u2 ls /run/secrets/kubernetes.io/serviceaccount
    ca.crt
    namespace
    token
  #+end_src

| [[file:config-map.org][Next: ConfigMap]] | [[file:storage.org][Home：存储]] | 
