#+TITLE: 本地持久化存储
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/main.css" />
#+HTML_LINK_UP: storage-class.html
#+HTML_LINK_HOME: storage.html
#+OPTIONS: num:nil timestamp:nil ^:nil
本地持久化卷允许用户通过标准 PVC 接口以简单便携的方式访问本地存储。PV 中包含系统用于将 Pod 安排到正确节点的节点亲和性信息。

#+BEGIN_EXAMPLE
  一旦配置了本地卷，外部静态配置器（provisioner）可用于帮助简化本地存储管理

  注意：本地存储配置器与大多数配置器不同，并且尚不支持动态配置
#+END_EXAMPLE

它要求管理员 *预先配置* _每个节点_ 上的 _本地卷_ ，并且这些卷应该是：
1. Filesystem volumeMode PV: 将它们 *挂载* 到 _发现目录_ 下（默认）
2. Block volumeMode PV: 在发现目录下为节点上的块设备 *创建* 一个 _符号链接_ 

_配置器_ 将通过为 _每个卷_ *创建* 和 *清除* _PersistentVolumes_ 来管理发现目录下的卷 
* 要求
  + 本地卷插件希望路径稳定，包括在重新启动时和添加或删除磁盘时
  + 静态配置器仅发现挂载点（对于文件系统模式卷）或符号链接（对于块模式卷）
    + 对于基于目录的本地卷必须绑定到发现目录中
* 指南
** 步骤1：使用本地磁盘启动集群
*** 启用alpha feature gate
    如果需要原始的本地块功能：
    #+BEGIN_SRC sh 
  export KUBE_FEATURE_GATES ="BlockVolume = true"
    #+END_SRC

    #+BEGIN_EXAMPLE
      注意：1.10 之前的 Kubernetes 版本需要几个附加 feature gate，因为持久的本地卷和其他功能处于 alpha 版本
    #+END_EXAMPLE
*** 选项1：裸金属环境
    1. 根据应用程序的要求对每个节点上的磁盘进行分区和格式化
    2. 根据 StorageClass 将所有文件系统挂载到同一个目录下。目录在 configmap 中指定
    3. 使用 KUBE_FEATURE_GATES配置 Kubernetes API server、controller manager、scheduler 和所有kubelet，如上所述
    4. 如果不使用默认 Kubernetes 调度程序策略，则必须启用以下谓词：
       + 1.9之前：NoVolumeBindConflict
       + 1.9+：VolumeBindingChecker
*** 选项2：本地测试集群
    1. 创建 /mnt/disks目录并将多个卷挂载到其子目录。下面的示例使用三个 ram 磁盘来模拟真实的本地卷：
       #+BEGIN_SRC sh 
	 $ mkdir/mnt/disks
	 vol for vol1 vol2 vol3;do
	 mkdir/mnt/disks/$vol
	 mount -t tmpfs $vol/mnt/disks/$vol
	 DONE
       #+END_SRC
    2. 运行本地集群：
       #+BEGIN_SRC sh 
	 $ ALLOW_PRIVILEGED = true LOG_LEVEL = 5 FEATURE_GATES = $KUBE_FEATURE_GATES hack/local-up-cluster.sh
       #+END_SRC
** 步骤2：创建StorageClass
   要延迟卷绑定，直到 pod 被调度，并在单个 pod 中处理多个本地 PV，必须使用设置为 WaitForFirstConsumer 的 volumeBindingMode 创建 StorageClass：

   #+BEGIN_SRC sh 
  $ kubectl create -f provisioner/deployment/kubernetes/example/default_example_storageclass.yaml
   #+END_SRC
** 步骤3：创建本地持久卷
*** 选项1：使用本地卷静态配置器
    1. 生成 Provisioner 的 ServiceAccount、Role、DaemonSet 和 ConfigMap 规范，并对其进行自定义
       + 这一步使用 helm 模板来生成规格要使用默认值生成配置器的规格，请运行：
	 #+BEGIN_SRC sh 
	   $ helm template ./helm/provisioner > ./provisioner/deployment/kubernetes/provisioner_generated.yaml
	 #+END_SRC
       + 也可以提供一个自定义值文件：
	 #+BEGIN_SRC sh 
	   $ helm template ./helm/provisioner --values custom-values.yaml > ./provisioner/deployment/kubernet
	 #+END_SRC
    2. 部署配置程序：如果用户对 Provisioner 的 yaml 文件的内容感到满意，可以用 kubectl 创建 Provisioner 的 DaemonSet 和 ConfigMap 
       #+BEGIN_SRC sh 
	 $ kubectl create -f ./provisioner/deployment/kubernetes/provisioner_generated.yaml
       #+END_SRC
    3. 检查发现的本地卷：一旦启动，外部静态配置器将发现并创建本地 PV
       #+BEGIN_EXAMPLE
	 例如，如果目录 /mnt/disks/ 包含一个目录 /mnt/disks/vol1，则静态配置器会创建以下本地卷 PV
       #+END_EXAMPLE
       #+BEGIN_SRC sh 
	 $ kubectl get pv
	 NAME                CAPACITY    ACCESSMODES   RECLAIMPOLICY   STATUS      CLAIM     STORAGECLASS    REASON    AGE
	 local-pv-ce05be60   1024220Ki   RWO           Delete          Available             local-storage             26s

	 $ kubectl describe pv local-pv-ce05be60 
	 Name:        local-pv-ce05be60
	 Labels:        <none>
	 Annotations:    pv.kubernetes.io/provisioned-by=local-volume-provisioner-minikube-18f57fb2-a186-11e7-b543-080027d51893
	 StorageClass:    local-fast
	 Status:        Available
	 Claim:        
	 Reclaim Policy:    Delete
	 Access Modes:    RWO
	 Capacity:    1024220Ki
	 NodeAffinity:
	   Required Terms:
	       Term 0:  kubernetes.io/hostname in [my-node]
	 Message:    
	 Source:
	     Type:    LocalVolume (a persistent volume backed by local storage on a node)
	     Path:    /mnt/disks/vol1
	 Events:        <none>
       #+END_SRC
       #+BEGIN_EXAMPLE
	 上面描述的 PV 可以通过引用 local-fast storageClassName 声明和绑定到 PVC
       #+END_EXAMPLE
*** 选项2：手动创建本地持久化卷
    #+BEGIN_EXAMPLE
      有关示例 PersistentVolume 规范，请参阅Kubernetes文档
    #+END_EXAMPLE
** 步骤4：创建本地持久卷声明
   #+BEGIN_EXAMPLE
     kind: PersistentVolumeClaim
     apiVersion: v1
     metadata:
       name: example-local-claim
     spec:
       accessModes:
       - ReadWriteOnce
       resources:
	 requests:
	   storage: 5Gi
       storageClassName: local-storage
   #+END_EXAMPLE
   请替换以下元素以反映真实配置：
   + 卷所需的存储容量“5Gi”
   + “local-storage”，与本地 PV 关联的存储类名称应该用于满足此 PVC

   对于试图声明 “Block” PV 的 “Block” volumeMode PVC，可以使用以下示例：

   #+BEGIN_EXAMPLE
     kind: PersistentVolumeClaim
     apiVersion: v1
     metadata:
       name: example-local-claim
     spec:
       accessModes:
       - ReadWriteOnce
       resources:
	 requests:
	   storage: 5Gi
       volumeMode: Block
       storageClassName: local-storage
   #+END_EXAMPLE

   请注意，此处唯一需要注意的字段是 volumeMode，它已被设置为 _Block_ 
* 最佳实践
  + 对于IO隔离，建议每个卷使用整个磁盘
  + 对于容量隔离，建议使用单个分区
  + 避免重新创建具有相同节点名称的节点，而仍然存在指定了该节点亲和性的旧 PV
    #+BEGIN_EXAMPLE
      否则，系统可能认为新节点包含旧的 PV
    #+END_EXAMPLE
  + 对于带有文件系统的卷，建议在 fstab 条目和该挂载点的目录名称中使用它们的 UUID
    #+BEGIN_EXAMPLE
      例如 ls -l/dev/disk/by-uuid 的输出

      这种做法可确保即使设备路径发生变化，例如，如果 /dev/sda1 在添加新磁盘时变为 /dev/sdb1，也不会错误地挂在本地卷

      此外，这种做法将确保如果创建具有相同名称的另一个节点，则该节点上的任何卷都是唯一的，而不会误认为是具有相同名称的另一个节点上的卷
    #+END_EXAMPLE
  + 对于没有文件系统的 raw block 卷，使用唯一的 ID 作为符号链接名称
    #+BEGIN_EXAMPLE
      根据环境，/dev/disk/by-id/中的卷 ID 可能包含唯一的硬件序列号。否则，应该生成一个唯一的 ID

      符号链接名称的唯一性将确保如果创建具有相同名称的另一个节点，则该节点上的任何卷都是唯一的，而不会误认为是具有相同名称的另一个节点上的卷
    #+END_EXAMPLE
* 删除/清理底层卷
  当想要停用本地卷时，以下是可能的工作流程：
  1. 停止使用卷的 pod
  2. 从节点中删除本地卷（即卸载、拔出磁盘等）
  3. 删除 PVC
  4. 供应商将尝试清理卷，但由于卷不再存在而会失败
  5. 手动删除 PV 对象

| [[file:storage-class.org][Previous：StorageClass]] | [[file:storage.org][Home：存储]] |
