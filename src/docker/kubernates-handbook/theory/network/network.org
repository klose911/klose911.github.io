#+TITLE: Kubernates网络
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/main.css" />
#+HTML_LINK_UP: ../architecture/architecture.html   
#+HTML_LINK_HOME: ../theory.html
#+OPTIONS: num:nil timestamp:nil ^:nil

#+BEGIN_EXAMPLE
Kubernetes中的网络可以说对初次接触Kubernetes或者没有网络方面经验的人来说可能是其中最难的部分
#+END_EXAMPLE

Kubernetes本身并不提供网络功能，只是把网络 _接口_ 开放出来，通过 _插件_ 的形式实现 

#+BEGIN_EXAMPLE
  如果在本地单台机器上运行docker容器的话会注意到所有容器都会处在docker0网桥自动分配的一个网络IP段内（172.17.0.1/16）

  该值可以通过docker启动参数--bip来设置，这样所有本地的所有的容器都拥有了一个IP地址，而且还是在一个网段内彼此就可以互相通信了
#+END_EXAMPLE
但是Kubernetes管理的是集群，Kubernetes中的网络要解决的核心问题就是 _每台主机的IP地址网段划分_ ，以及 _单个容器的IP地址分配_ 。概括为：
+ 保证 *每个Pod拥有一个集群内唯一的IP地址* 
+ 保证 *不同节点的IP地址划分不会重复* 
+ 保证 *跨节点的Pod可以互相通信* 
+ 保证 *不同节点的Pod可以与跨节点的主机互相通信* 

#+BEGIN_EXAMPLE
  为了解决该问题，出现了一系列开源的Kubernetes中的网络插件与方案，如：
  flannel, calico, contiv, weave net, kube-router, cilium, canal

  还有很多就不一一列举了，只要实现Kubernetes官方的设计的 CNI 就可以自己写一个网络插件 
#+END_EXAMPLE

下面仅以当前最常用的几个插件为例解析：
+ [[file:flannel.org][flannel]]
+ [[file:calico.org][calico]]
+ [[file:cilium.org][cilium]]


| [[file:../objects/objects.org][Next：资源对象]] | [[file:../architecture/architecture.org][Previous：架构]] | [[file:../theory.org][Home：原理]] |
