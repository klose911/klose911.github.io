#+TITLE: 数据管理
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: repository.html   
#+HTML_LINK_HOME: docker.html
#+OPTIONS: num:nil timestamp:nil ^:nil *:nil
* 数据卷
数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：
+ 数据卷可以在容器之间共享和重用
+ 对数据卷的修改会立马生效
+ 对数据卷的更新，不会影响镜像
+ 卷会一直存在，直到没有容器使用 

数据卷的使用，类似于 Linux 下对目录或文件进行 mount
** 创建一个数据卷 
在用 docker run 命令的时候，使用 -v 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷

启动镜像ubuntu的时候同时创建/webapp数据卷，结束容器后再重新启动，可以看到挂载的数据卷消失
#+BEGIN_SRC bash
  $ docker run -t -i -v /webapp ubuntu /bin/bash

  root@c4471819ee96:/# ls
  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  webapp
  root@c4471819ee96:/# exit

  docker run -t -i ubuntu /bin/bash
  root@22f2e4201b60:/# ls
  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var 
#+END_SRC

注意：可以在 Dockerfile 中使用 VOLUME 来添加一个或者多个新的卷到由该镜像创建的任意容器
** 挂载一个主机目录作为数据卷
把本机的/home/tomcat/tmp/webapp挂载到容器的/opt/webapp/下， 本地目录的路径必须是绝对路径
   #+BEGIN_SRC bash
     $ sudo docker run -d -P --name web -v /home/tomcat/tmp/webapp:/opt/webapp training/webapp python app.py
   #+END_SRC
挂载数据卷的默认权限是读写，用户也可以通过 :ro 指定为只读。
#+BEGIN_SRC bash
  $ sudo docker run -d -P --name web -v /home/tomcat/tmp/webapp:/webapp:ro  training/webapp python app.py
#+END_SRC
注意：Dockerfile 中不支持这种用法，这是因为 Dockerfile 是为了移植和分享用的。然而，不同操作系统的路径格式不一样，所以目前还不能支持
** 挂载一个本地主机文件作为数据卷
-v 标记也可以从主机挂载单个文件到容器中
   #+BEGIN_SRC sh
     $ sudo docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash

     root@5902ae37fe1c:/# ls -a
     .   .bash_history  .dockerinit  boot  etc   lib    media  opt   root  sbin  sys  usr
     ..  .dockerenv     bin          dev   home  lib64  mnt    proc  run   srv   tmp  var
   #+END_SRC
注意：如果直接挂载一个文件，很多文件编辑工具，包括 vi 或者 sed --in-place，可能会造成文件 inode 的改变，从 Docker 1.1 .0起，这会导致报错误信息。所以最简单的办法就直接挂载文件的父目录
* 数据卷容器
如果有一些持续更新的数据需要在容器之间共享，最好创建数据卷容器。所谓数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的

** 创建
创建一个命名的数据卷容器 dbdata
#+BEGIN_SRC sh
  $ sudo docker run -d -v /dbdata --name dbdata postgres echo Data-only container for postgres 
#+END_SRC

其他容器中使用 --volumes-from 来挂载 dbdata 容器中的数据卷
#+BEGIN_SRC bash
  $ sudo docker run -t -i --volumes-from dbdata --name db1 ubuntu /bin/bash

  root@1b01849d21b8:/# df -h
  Filesystem      Size  Used Avail Use% Mounted on
  none             20G  8.2G   11G  44% /
  tmpfs           3.9G     0  3.9G   0% /dev
  shm              64M     0   64M   0% /dev/shm
  /dev/xvda1       20G  8.2G   11G  44% /dbdata 

$ sudo docker run -d --volumes-from dbdata --name db2 postgres 
#+END_SRC

可以使用多个 --volumes-from 参数来从多个容器挂载多个数据卷，也可以从其他已经挂载了数据卷的容器来挂载数据卷
#+BEGIN_SRC sh
  $ sudo docker run -d --name db3 --volumes-from db1 postgres
#+END_SRC
注意：使用 --volumes-from 参数所挂载数据卷的容器自己并不需要保持在运行状态

如果删除了挂载的容器（包括 dbdata、db1 和 db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 docker rm -v 命令来指定同时删除关联的容器
** 备份
使用 --volumes-from 标记来创建一个加载 dbdata 容器卷的容器，并从本地主机挂载当前到容器的 /backup 目录，并运行压缩命令
   #+BEGIN_SRC bash
     $ sudo docker run --volumes-from dbdata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar dbdata
   #+END_SRC
** 恢复
创建一个带有数据卷的容器 dbdata2
   #+BEGIN_SRC bash
     $ sudo docker run -t -i -v /dbdata --name dbdata2 ubuntu /bin/bash

     root@b241be54658c:/# ls -a
     .   .dockerenv   bin   dbdata  etc   lib    media  opt   root  sbin  sys  usr
     ..  .dockerinit  boot  dev     home  lib64  mnt    proc  run   srv   tmp  var

     root@b241be54658c:/# cd dbdata/

     root@b241be54658c:/dbdata# ls

     root@b241be54658c:/dbdata# ls -a
     .  ..

   #+END_SRC

创建另一个容器，挂载 dbdata2 数据卷和当前目录， 解压备份的文件
#+BEGIN_SRC bash
~/tmp $ ls
backup.tar

~/tmp$ sudo docker run -t -i --volumes-from dbdata2 -v $(pwd):/backup ubuntu /bin/bash

root@bd32ada636fd:/# ls
backup  bin  boot  dbdata  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

root@bd32ada636fd:/# cd backup/

root@bd32ada636fd:/backup# ls
backup.tar

root@bd32ada636fd:/#  tar xvf /backup/backup.tar
#+END_SRC

合并在一起做
#+BEGIN_SRC sh
~/tmp$ sudo docker run --volumes-from dbdata2 -v $(pwd):/backup ubuntu tar xvf /backup/backup.tar 
#+END_SRC

[[file:network.org][Next：网络配置]]

[[file:repository.org][Previous：仓库]]

[[file:docker.org][Home：目录]]
