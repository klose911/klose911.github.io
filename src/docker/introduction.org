#+TITLE: Docker简介
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: docker.html   
#+HTML_LINK_HOME: docker.html
#+OPTIONS: num:nil timestamp:nil
* 什么是docker
Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案

Docker 的基础是 Linux 容器（LXC）等技术

在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单
** docker与传统虚拟技术的区别
Docker容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现
#+ATTR_HTML: image :width 90%
 [[./pic/virtualization.png]]

#+ATTR_HTML: image :width 90%
 [[./pic/docker.png]]

* 为什么要使用 Docker
Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。 其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器

** 更快速的交付和部署
开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码。 Docker 可以快速创建容器，快速迭代应用程序，并让整个过程全程可见，使团队中的其他成员更容易理解应用程序是如何创建和工作的。 Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间

** 更高效的虚拟化
Docker 容器的运行不需要额外的 hypervisor 支持，它是内核级的虚拟化，因此可以实现更高的性能和效率

** 更轻松的迁移和扩展
Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。 这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。

** 更简单的管理
使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理

** 对比传统虚拟机总结
#+CAPTION: 对比传统虚拟机总结
#+ATTR_HTML: :border 1 :rules all :frame boader
| 特性       | 容器       | 虚拟机     |
| 启动       | 秒级       | 分钟级     |
| 硬盘使用   | MB         | GB         |
| 系统支持量 | 单机几千个 | 一般几十个 |

[[file:basic.org][Next：基础概念]]

[[file:docker.org][Home：目录]]
