#+TITLE: 网络配置
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: storage.html   
#+HTML_LINK_HOME: docker.html
#+OPTIONS: num:nil timestamp:nil ^:nil *:nil
* 外部访问容器
  容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或 -p 参数来指定端口映射
** 端口映射
*** 随机端口映射
    当使用 -P 标记时，Docker 会随机映射一个 30000~49900 的端口到内部容器开放的网络端口。使用 docker ps 可以看到，本地主机的 32768被映射到了容器的 5000 端口。此时访问本机的 32768 端口即可访问容器内 web 应用提供的界面
    #+BEGIN_SRC sh
  $ sudo docker run -d -P training/webapp python app.py
  a73ae670ed1ca525524071774fd8e04d7363c5967c1e1d132f55593aaa3d7a47

  $ sudo docker ps -l
  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES
  a73ae670ed1c        training/webapp     "python app.py"     30 seconds ago      Up 30 seconds       0.0.0.0:32768->5000/tcp   desperate_darwin

  $ curl http://127.0.0.1:32768
  Hello world!
    #+END_SRC
    
    通过 docker logs 命令来查看应用的信息
    #+BEGIN_SRC sh
   $ sudo docker logs -f desperate_darwin

  ,* Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
  192.168.0.1 - - [27/Dec/2016 09:32:09] "GET / HTTP/1.0" 200 -
  192.168.0.1 - - [27/Dec/2016 09:32:22] "GET / HTTP/1.1" 200 -
    #+END_SRC
    -p可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器
*** 映射所有接口地址
    使用 hostPort:containerPort 格式本地的 5000 端口映射到容器的 5000 端口
    #+BEGIN_SRC sh
  $ sudo docker run -d -p 5000:5000 training/webapp python app.py
    #+END_SRC
*** 映射到指定地址的指定端口
    使用 ip:hostPort:containerPort 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1
    #+BEGIN_SRC sh
  $ sudo docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py
    #+END_SRC
*** 映射到指定地址的任意端口
    使用 ip::containerPort 绑定 localhost 的任意端口到容器的 5000 端口，本地主机会自动分配一个端口
    #+BEGIN_SRC sh
  $ sudo docker run -d -p 127.0.0.1::5000 training/webapp python app.py
    #+END_SRC
    使用 udp 标记来指定 udp 端口
    #+BEGIN_SRC sh
  $ sudo docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py
    #+END_SRC
** 查看映射端口配置 
   使用 docker port 来查看当前映射的端口配置，也可以查看到绑定的地址
   #+BEGIN_SRC sh
  $ sudo docker port desperate_darwin

  5000/tcp -> 0.0.0.0:32768
   #+END_SRC
   
+ 容器有自己的内部网络和 ip 地址
+ -p 标记可以多次使用来绑定多个端口
#+BEGIN_SRC sh
  $ sudo docker run -d -p 5000:5000  -p 3000:80 training/webapp python app.py
#+END_SRC

* 容器互联
  容器的连接（linking）系统是另一种跟容器中应用交互的方式。在源和接收容器之间创建一个隧道，接收容器可以看到源容器指定的信息
  
** 自定义容器命名 
   连接系统依据容器的名称来执行。因此，首先需要自定义一个好记的容器命名。
   
   自定义命名容器有2个好处：
1. 自定义的命名，比较好记
2. 当要连接其他容器时候，可以作为一个有用的参考点，比如连接web容器到db容器
   
使用 --name 标记可以为容器自定义命名 
#+BEGIN_SRC sh
  $ sudo docker run -d -P --name web training/webapp python app.py

  d569dc2917cf3c35f9e461311522cd708481eefc1190e728a8e6cb756d9d4816
#+END_SRC

使用 docker inspect 来查看容器的名字
#+BEGIN_SRC sh
  $ sudo docker inspect -f "{{ .Name }}" d569dc2917cf

  /web
#+END_SRC
注意：容器的名称是唯一的。如果已经命名了一个叫 web 的容器，当你要再次使用 web 这个名称的时候，需要先用docker rm 来删除之前创建的同名容器!

在执行 docker run 的时候如果添加 --rm 标记，则容器在终止后会立刻删除。但--rm 和 -d 参数不能同时使用

** 互联
   使用 --link 参数可以让容器之间安全地进行交互
   
+ 创建一个新的数据库容器
#+BEGIN_SRC sh
  $ sudo docker run -d --name db training/postgres
#+END_SRC

+ 删除之前的web容器
#+BEGIN_SRC sh
  $ sudo docker rm -f web
#+END_SRC

+ 创建一个新的 web 容器，并将它连接到 db 容器。--link 参数的格式为 --link name:alias，其中 name 是要链接的容器的名称，alias 是这个连接的别名
#+BEGIN_SRC sh
  $ sudo docker run -d -P --name web --link db:db training/webapp python app.py
#+END_SRC

** 信息共享
   Docker 在两个互联的容器之间创建了一个安全隧道，而且不用映射它们的端口到宿主主机上。在启动 db 容器的时候并没有使用 -p 和 -P 标记，从而避免了暴露数据库端口到外部网络上
   
   2 种方式为容器公开连接信息：
+ 环境变量：其中 DB_ 开头的环境变量是供 web 容器连接 db 容器使用，前缀采用大写的连接别名
#+BEGIN_SRC sh
  $ sudo docker run --rm --name web2 --link db:db training/webapp env

  PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  HOSTNAME=f145072b25cb
  DB_PORT=tcp://192.168.0.2:5432
  DB_PORT_5432_TCP=tcp://192.168.0.2:5432
  DB_PORT_5432_TCP_ADDR=192.168.0.2
  DB_PORT_5432_TCP_PORT=5432
  DB_PORT_5432_TCP_PROTO=tcp
  DB_NAME=/web2/db
  DB_ENV_PG_VERSION=9.3
  HOME=/root
#+END_SRC
+ 更新 /etc/hosts 文件：添加 host 信息到父容器的 /etc/hosts 的文件
  #+BEGIN_SRC bash
    $ sudo docker run -t -i --rm --link db:db training/webapp /bin/bash

    root@e995eabd30e5:/opt/webapp#cat /etc/hosts
    ......
    192.168.0.2     db 28d0b9f7b085
    192.168.0.4     e995eabd30e5
    .....
  #+END_SRC
  
在web容器中ping db容器
#+BEGIN_SRC bash
  root@e995eabd30e5:/opt/webapp# ping db

  PING db (192.168.0.2) 56(84) bytes of data.
  64 bytes from db (192.168.0.2): icmp_seq=1 ttl=64 time=0.112 ms
  64 bytes from db (192.168.0.2): icmp_seq=2 ttl=64 time=0.077 ms
  64 bytes from db (192.168.0.2): icmp_seq=3 ttl=64 time=0.084 ms
  ^C
  --- db ping statistics ---
  3 packets transmitted, 3 received, 0% packet loss, time 1998ms
  rtt min/avg/max/mdev = 0.077/0.091/0.112/0.015 ms
#+END_SRC

* 高级网络配置
  Docker服务启动时，会自动在主机上创建一个 docker0 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发
  
  同时，Docker 随机分配一个本地未占用的私有网段（在 RFC1918 中定义）中的一个地址给 docker0 接口。比如典型的 172.17.42.1，掩码为 255.255.0.0。此后启动的容器内的网口也会自动分配一个同一网段（172.17.0.0/16）的地址
  
  当创建一个 Docker 容器的时候，同时会创建了一对 veth pair 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 eth0；另一端在本地并被挂载到 docker0 网桥，名称以 veth 开头（例如 vethAQI2QT）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络
  #+ATTR_HTML: image :width 90%
  [[./pic/network.png]]
  
** docker网络参数
   
*** docker服务相关配置
+ -b BRIDGE or --bridge=BRIDGE : 指定容器挂载的网桥
+ --bip=CIDR : 定制 docker0 的掩码
+ -H SOCKET... or --host=SOCKET... : Docker 服务端接收命令的通道
+ --icc=true|false : 是否支持容器之间进行通信
+ --ip-forward=true|false : 是否允许包转发
+ --iptables=true|false : 是否允许Docker 添加 iptables 规则
+ --mtu=BYTES : 容器网络中的 MTU
  
*** 既可以在docker服务配置，也可以在容器启动配置
    在 Docker 服务启动的时候指定则会成为默认值，后面执行 docker run 时可以覆盖设置的默认值
+ --dns=IP_ADDRESS... : 使用指定的DNS服务器
+ --dns-search=DOMAIN... : 指定DNS搜索域
  
*** 在容器启动配置
+ -h HOSTNAME or --hostname=HOSTNAME : 配置容器主机名
+ --link=CONTAINER_NAME:ALIAS : 添加到另一个容器的连接
+ --net=bridge|none|container:NAME_or_ID|host : 配置容器的桥接模式
+ -p SPEC or --publish=SPEC : 映射容器端口到宿主主机
+ -P or --publish-all=true|false : 映射容器所有端口到宿主主机
  
* 配置 DNS 
  Docker 利用虚拟文件来挂载到来容器的 3 个相关配置文件
  
  #+BEGIN_SRC bash
  $ sudo docker run -t -i training/webapp /bin/bash
  root@1c9d1c0c2593:/opt/webapp# mount

  ...
  /dev/xvda1 on /etc/resolv.conf type ext4 (rw,relatime,errors=remount-ro,data=ordered)
  /dev/xvda1 on /etc/hostname type ext4 (rw,relatime,errors=remount-ro,data=ordered)
  /dev/xvda1 on /etc/hosts type ext4 (rw,relatime,errors=remount-ro,data=ordered)
  ...
  #+END_SRC
  宿主主机 DNS 信息发生更新后，所有 Docker 容器的 dns 配置通过 /etc/resolv.conf 文件立刻得到更新
  
** 手动指定
   #+BEGIN_SRC sh
     -h HOSTNAME or --hostname=HOSTNAME 
   #+END_SRC
   设定容器的主机名，它会被写到容器内的 /etc/hostname 和 /etc/hosts。但它在容器外部看不到，既不会在 docker ps 中显示，也不会在其他的容器的 /etc/hosts 看到
   
   #+BEGIN_SRC sh
  --link=CONTAINER_NAME:ALIAS 
   #+END_SRC
   在创建容器的时候，添加一个其他容器的主机名到 /etc/hosts 文件中，让新容器的进程可以使用主机名 ALIAS 就可以连接它
   
   
   #+BEGIN_SRC sh
     --dns=IP_ADDRESS
   #+END_SRC
   DNS 服务器到容器的 /etc/resolv.conf 中，让容器用这个服务器来解析所有不在 /etc/hosts 中的主机名
   
   #+BEGIN_SRC sh
   --dns-search=DOMAIN
   #+END_SRC
   设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的主机时，DNS 不仅搜索host，还会搜索 host.example.com

* 容器访问控制
容器的访问控制，主要通过 Linux 上的 iptables 防火墙来进行管理和实现

** 容器访问外部网络 
容器要想访问外部网络，需要本地系统的转发支持

检查宿主机转发是否打开
#+BEGIN_SRC sh
  $ sysctl net.ipv4.ip_forward
  net.ipv4.ip_forward = 1
#+END_SRC

手动打开转发
#+BEGIN_SRC sh
  $sysctl -w net.ipv4.ip_forward=1
#+END_SRC
如果在启动 Docker 服务的时候设定 --ip-forward=true, Docker 就会自动设定系统的 ip_forward 参数为 1

** 容器之间访问
容器之间相互访问，需要两方面的支持：
+ 容器的网络拓扑是否已经互联。默认情况下，所有容器都会被连接到 docker0 网桥上
+ 本地系统的防火墙软件 -- iptables 是否允许通过

** 访问所有端口
当启动 Docker 服务时候，默认会添加一条转发策略到 iptables 的 FORWARD 链上。策略为通过（ACCEPT）还是禁止（DROP）取决于配置--icc=true（缺省值）还是 --icc=false。当然，如果手动指定 --iptables=false 则不会添加 iptables 规则。

默认情况下，不同容器之间是允许网络互通的。如果为了安全考虑，可以在 /etc/default/docker 文件中配置 DOCKER_OPTS=--icc=false 来禁止它

** 访问指定端口
在通过 -icc=false 关闭网络访问后，还可以通过 --link=CONTAINER_NAME:ALIAS 选项来访问容器的开放端口

启动 Docker 服务时，可以同时使用 --icc=false --iptables=true 参数来关闭允许相互的网络访问，并让 Docker 可以修改系统中的 iptables 规则，此时iptable的规则
#+BEGIN_SRC sh
  $ sudo iptables -nL
  ...
  Chain FORWARD (policy ACCEPT)
  target     prot opt source               destination
  DROP       all  --  0.0.0.0/0            0.0.0.0/0
  ...
#+END_SRC
启动容器（docker run）时使用 --link=CONTAINER_NAME:ALIAS 选项。Docker 会在 iptable 中为 两个容器分别添加一条 ACCEPT 规则，允许相互访问开放的端口
#+BEGIN_SRC sh
  $ sudo iptables -nL
  ...
  Chain FORWARD (policy ACCEPT)
  target     prot opt source               destination
  ACCEPT     tcp  --  172.17.0.2           172.17.0.3           tcp spt:80
  ACCEPT     tcp  --  172.17.0.3           172.17.0.2           tcp dpt:80
  DROP       all  --  0.0.0.0/0            0.0.0.0/0
  ...
#+END_SRC

* 端口映射实现
默认情况下，容器可以主动访问到外部网络的连接，但是外部网络无法访问到容器
** 容器访问外部实现
容器所有到外部网络的连接，源地址都会被NAT成本地系统的IP地址，这是通过使用 iptables 的源地址伪装操作实现的

查看主机的NAT规则， 将所有源地址在 172.17.0.0/16 网段，目标地址为其他网段（外部网络）的流量动态伪装为从系统网卡发出
#+BEGIN_SRC sh
  $ sudo iptables -t nat -nL
  ...
  Chain     POSTROUTING (policy ACCEPT)
  target             prot opt source                  destination
  MASQUERADE  all    --  172.17.0.0/16       !172.17.0.0/16
  ...
#+END_SRC
** 外部访问容器实现
容器允许外部访问，可以在 docker run 时候通过 -p 或 -P 参数来启用，也是在本地的 iptable 的 nat 表中添加相应的规则

使用-P后的NAT规则：访问宿主机的49153端口会被转发到容器172.17.0.2的80端口
#+BEGIN_SRC sh
  $ iptables -t nat -nL
  ...
  Chain DOCKER (2 references)
  target       prot opt source                destination
  DNAT       tcp   --   0.0.0.0/0            0.0.0.0/0            tcp dpt:49153 to:172.17.0.2:80
#+END_SRC

使用 -p 80:80 后的NAT规则

#+BEGIN_SRC sh
  $ iptables -t nat -nL

  ...
  Chain DOCKER (2 references)
  target     prot  opt  source               destination
  DNAT       tcp  --   0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:172.17.0.2:80
  ...
#+END_SRC
* 配置 docker0 网桥 
Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信，它还给出了 MTU（接口允许接收的最大传输单元），通常是 1500 Bytes，或宿主主机网络路由上支持的默认值。这些值都可以在服务启动的时候进行配置
+ --bip=CIDR : IP 地址加掩码格式，例如 192.168.1.5/24
+ --mtu=BYTES : 覆盖默认的 Docker mtu 配置

#+BEGIN_SRC sh
  $ sudo brctl show

  bridge name     bridge id                        STP        enabled     interfaces
  docker0            8000.024261567e9f       no
#+END_SRC

每次创建一个新容器的时候，Docker 从可用的地址段中选择一个空闲的 IP 地址分配给容器的 eth0 端口。使用本地主机上 docker0 接口的 IP 作为所有容器的默认网关

#+BEGIN_SRC bash
  $ docker run -t -i --rm training/webapp /bin/bash

  root@3c83e85ce67e:/opt/webapp# ip addr show eth0

  27: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
      link/ether 02:42:c0:a8:00:02 brd ff:ff:ff:ff:ff:ff
      inet 192.168.0.2/20 scope global eth0
         valid_lft forever preferred_lft forever
      inet6 fe80::42:c0ff:fea8:2/64 scope link
      valid_lft forever preferred_lft forever

  root@3c83e85ce67e:/opt/webapp# ip route

  default via 192.168.0.1 dev eth0
  192.168.0.0/20 dev eth0  proto kernel  scope link  src 192.168.0.2
#+END_SRC
* 自定义网桥
启动 Docker 服务的时候，使用 -b BRIDGE或--bridge=BRIDGE 来指定使用的网桥

+ 停止服务，并删除旧的网桥
#+BEGIN_SRC sh
  $ sudo service docker stop
  $ sudo ip link set dev docker0 down
  $ sudo brctl delbr docker0
#+END_SRC
+ 创建一个网桥 bridge0
  #+BEGIN_SRC sh
    $ sudo brctl addbr bridge0
    $ sudo ip addr add 192.168.5.1/24 dev bridge0
    $ sudo ip link set dev bridge0 up
  #+END_SRC
+ 查看网桥
  #+BEGIN_SRC sh
    $ ip addr show bridge0

    4: bridge0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state UP group default
        link/ether 66:38:d0:0d:76:18 brd ff:ff:ff:ff:ff:ff
        inet 192.168.5.1/24 scope global bridge0
           valid_lft forever preferred_lft forever
  #+END_SRC
+ 配置 Docker 服务，默认桥接到创建的网桥上
  #+BEGIN_SRC bash
    $ echo 'DOCKER_OPTS="$DOCKER_OPS -b=bridge0"' >> /etc/default/docker
    $ sudo service docker start
  #+END_SRC
+ 启动 Docker 服务。 新建一个容器，可以看到它已经桥接到了 bridge0 上
* 创建一个点到点连接
用户有时候需要两个容器之间可以直连通信，而不用通过主机网桥进行桥接。创建一对 peer 接口，分别放到两个容器中，配置成点到点链路类型即可

+ 启动 2 个容器
  #+BEGIN_SRC bash
    $ sudo docker run -i -t --rm --net=none base /bin/bash
    root@1f1f4c1f931a:/#

    $ sudo docker run -i -t --rm --net=none base /bin/bash
    root@12e343489d2f:/#
  #+END_SRC
+ 找到宿主机对应的进程号，然后创建网络名字空间的跟踪文件
  #+BEGIN_SRC sh
    $ sudo docker inspect -f '{{.State.Pid}}' 1f1f4c1f931a
    2989

    $ sudo docker inspect -f '{{.State.Pid}}' 12e343489d2f
    3004

    $ sudo mkdir -p /var/run/netns

    $ sudo ln -s /proc/2989/ns/net /var/run/netns/2989
    $ sudo ln -s /proc/3004/ns/net /var/run/netns/3004
  #+END_SRC
+ 创建一对 peer 接口，然后配置路由
  #+BEGIN_SRC sh
    $ sudo ip link add A type veth peer name B

    $ sudo ip link set A netns 2989
    $ sudo ip netns exec 2989 ip addr add 10.1.1.1/32 dev A
    $ sudo ip netns exec 2989 ip link set A up
    $ sudo ip netns exec 2989 ip route add 10.1.1.2/32 dev A

    $ sudo ip link set B netns 3004
    $ sudo ip netns exec 3004 ip addr add 10.1.1.2/32 dev B
    $ sudo ip netns exec 3004 ip link set B up
    $ sudo ip netns exec 3004 ip route add 10.1.1.1/32 dev B
  #+END_SRC
这 2 个容器就可以相互 ping 通，并成功建立连接。点到点链路不需要子网和子网掩码
