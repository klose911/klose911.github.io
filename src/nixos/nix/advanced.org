#+TITLE: 进阶手册
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+OPTIONS: num:nil timestamp:nil ^:nil 
#+HTML_LINK_UP: basic.html
#+HTML_LINK_HOME: nix.html
* 数据类型
** 原始数据类型
*** 字符串
**** 单行字符串
与大多数编程语言的字符串一致，使用双引号闭合：

#+begin_src nix 
  "Hello, nix!\n"
#+end_src
**** 多行字符串
多行字符串是通过 *两个单引号* 闭合的

#+begin_src nix 
  ''
  This is the first line.
  This is the second line.
  This is the third line.
  ''
#+end_src

多行字符串往往会带有不同程度的缩进，会被进一步处理。也就是说对于以下字符串：
#+begin_src nix 
  ''
    This is the first line.
    This is the second line.
      This is the third line.
  ''
#+end_src

会被“智能缩进”处理，每一行都被前移了最小缩进数个字符。处理后的结果是：

#+begin_example
  This is the first line.
  This is the second line.
    This is the third line.
#+end_example

同时，假如第一行被占空了，也会对其进行处理：

#+begin_src nix 
  ''

  There's a row of spaces up there.
  ''
#+end_src

处理后的数据是：

#+begin_example

There's a row of spaces up there.
#+end_example
Nix 只会将自动处理后的字符串当作输入，而不是原始字符串 _raw string_
**** URL
为了书写简便， RFC 2396 规定了对于 URI 可以 *不使用* _引号_ 闭合：

#+begin_src nix 
  UriWithoutQuotes = http://example.org/foo.tar.bz2
  UriWithQuotes = "http://example.org/foo.tar.bz2"
#+end_src

两者是等价的
*** 数字
数字被分为
+ 浮点型
  #+begin_example
    比如 .114514
  #+end_example
+ 整型
  #+begin_example
    比如 2233
  #+end_example

#+begin_example
  数字是类型兼容的：纯整数运算总是返回整数，而任何涉及至少一个浮点数的运算都会返回一个浮点数
#+end_example
*** 路径
路径 *至少* 需要包含一个斜杠才能被识别为路径：

#+begin_src nix 
  /foo/bar/bla.nix
  ~/foo/bar.nix
  ../foo/bar/qux.nix
#+end_src

除了某些尖括号路径（比如 _<nixpkgs>_ ）外，其他路径都支持 _字符串插值_

#+begin_src nix 
  "${./foo.txt}"
#+end_src

*** 布尔
 *true* 或 *false* 

*** 空
字面意义上的 *null*

** 列表
