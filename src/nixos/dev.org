#+TITLE: Haskell 开发环境部署
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./css/main.css" />
#+OPTIONS: num:nil timestamp:nil ^:nil 
#+HTML_LINK_UP: ./manual/manual.html
#+HTML_LINK_HOME: ./nixos.html

#+begin_example
  除了软件开发过程本身外，软件分发也是很重要的一个话题

  在发行版上建立编程语言生态系统可能不是一件简单的事情
#+end_example
本文将引入 NixOS/nixpkgs 中 Haskell 相关的基础知识，并说明如何使用 Nix 搭建科学的 Haskell 开发环境

* Haskell 开发工具
** 编译器
#+begin_example
在进入 Nix 相关的话题之前，有必要介绍一下现在 Haskell 的工具链以及常用的包管理器
#+end_example
首先 _GHC_ 多年来已经成为 Haskell 编译器的业界标准，其他编译器譬如 JHC、GHC-JS、UHC 等等通常只实现了很基础的 Haskell 语言（例如 Haskell 2010）。它们的开发重点可能在提供不同的后端支持或者极致优化性能，总之并不是为了生产准备的。因此，对于发行版而言一般来说分发 Haskell 软件意味着使用 GHC 作为编译器
** 包管理
除了编译器外，编程语言不可或缺的还有包管理器。与 GCC 等 C 语言编译器不同，GHC 内建了 _包_ 的概念，或者说它本身就是一个包管理器。如果安装了 GHC，运行 _ghc-pkg list_ 可以看到全局的包集：

#+begin_src sh 
  $ ghc-pkg list
  /nix/store/322zfsd89g1xph46glm0jjvwjkj09mv4-ghc-9.2.6/lib/ghc-9.2.6/package.conf.d
  Cabal-3.6.3.0
  array-0.5.4.0
  base-4.16.4.0
  binary-0.8.9.0
  ...
#+end_src

可以看出 GHC 所谓的包仅仅是一个名字和版本号，并且 GHC 本身不提供任何“正常的”包管理器拥有的功能，例如 _版本解析_ 、 _管理已编译的依赖_ 等等。默认 全局包集位于 _/usr/lib/ghc-版本/package.conf.d_
+ 该目录包含了包集中每个包的一些元数据，例如包名、版本、编译结果等等
#+begin_example
这个路径可以使用环境变量覆盖，在 Nix 中就使用了该方法
#+end_example
GHC 可以对包集增删新的包，但不会去编译相应的，如果文件丢失或者依赖损坏只会报错。显然，这样的包管理能力并不是为直接面向开发者准备的

#+begin_example
对于开发，有两个流行的包管理器：Cabal 和 Stack
#+end_example

*** Cabal
首先介绍 Cabal。在实践中很多用户混淆 _cabal-install_ （命令行包管理工具）与 _Cabal_ （GHC 的一个 Boot Library）。后者相当于 Haskell 的构建系统，它定义了什么是一个 Haskell 包（样例来源于 Cabal 文档）：

#+begin_example
  name:            TestPackage
  version:         0.0
  synopsis:        Package with library and two programs
  license:         BSD3
  author:          Angela Author
  build-type:      Simple
  cabal-version:   >= 1.8

  library
    build-depends:   HUnit >= 1.1.1 && < 1.2
    exposed-modules: A, B, C

  executable program1
    main-is:         Main.hs
    hs-source-dirs:  prog1
    other-modules:   A, B

  executable program2
    main-is:         Main.hs
    hs-source-dirs:  prog2
    other-modules:   A, C, Utils
#+end_example

其中包有版本、名字、不同的组件（库或者可执行文件）、以及它们的依赖和编译器参数等等。所有构建相关的实现都实现在 Cabal 库中。在很多 Haskell 项目中，存在一个 Setup.hs 文件：

#+begin_src haskell 
  import Distribution.Simple
  main = defaultMain 
#+end_src

当运行 runhaskell Setup.hs configure、runhaskell Setup.hs build 时，调用的是 Cabal 中的代码

#+begin_example
  发行版通常会选择这种方式来构建 Haskell 包，而不是开发者常用的cabal build

  因为在这种情况下由发行版的包管理提供 Haskell 包需要的依赖，而不是 Haskell 的包管理提供

  注意： Cabal 只会检查依赖及环境是否满足要求（考虑版本约束与系统架构等等）而不会去真正地管理依赖（下载并构建缺失依赖）
#+end_example


真正提供包管理功能的是 _cabal-install_ ，即命令行程序 cabal（后文将使用该命名作为简写，注意它与 Cabal 不同），它是一个依赖 Cabal 的 Haskell 程序，提供依赖解析、下载 Haskell 包源码等功能

在 2.0 版本后，cabal 引入了类似 Nix Store 的概念：在 _~/.cabal/store_  目录下存在一个 global store，包含包的编译结果
1. Haskell 包在 Hakcage 由开发者上发布，因此当需要编译一个包时，如果该包的依赖不存在于 global store 中，cabal 会从 Hackage 上下载源码，并先编译该依赖，存到 global store 中
2. 当依赖处理完成时，cabal 会在项目的目录下创建一个临时的 包集传给 GHC 内建包管理，再调用 Cabal 构建系统编译

这个过程类似沙盒构建：global store 用于共享已编译依赖、项目之间的依赖互不干扰
#+begin_example
这和 Nix 的思想如出一辙，cabal 将这个功能命名为 Nix-style local builds
#+end_example
然而在 1 版本时代，cabal 只维护一个全局包集而不是可以共享的 global store，如同 FHS 发行版那样，每个依赖只能有一个版本安装在包集里。然而编程语言包的维护很难做到发行版软件包那样细致，并且也没有人来解决冲突问题
#+begin_example
  每个用户的包集是不一样的，面对冲突用户只能自己想办法

  举个例子，开发 A 项目需要 http-client >=0.3.2 && <0.4，但是 pandoc 需要 http-client >= 0.4.1 && <0.4.2 由于依赖版本冲突

  为了同时能够构建项目 A 并且安装 pandoc，用户只能自行在 cabal install 中指定版本号解决冲突

  在当时无法直接安装一个 Haskell 程序或者构建一个 Haskell 项目是非常常见的，并且在面对 GHC 版本改变时，事情会变得更糟
#+end_example

*** Stack
#+begin_example
  正如前文已经所述，在旧 cabal 时代 Haskell 程序员天天面对的是依赖火葬场

  既然用户因为各种版本不一致难以维护自己的包集，那么是不是可以像维护 Linux 发行版那样，帮用户维护一个呢？

  这就是 Stackage
#+end_example
为了避免不同 GHC 版本带来包版本的变化 Stackage 还指定了 GHC 版本

#+begin_example
  例如在本文编写时最新的 LTS 版本是 LTS 20.13 for ghc-9.2.7

  与某些发行版相似，Stackage 有一个 nightly 的滚动版本以及定期发布 LTS 版本，必要时会将新的变动向后移植到 LTS 版本中
#+end_example

Stack 可以代替 cabal 作为 Haskell 开发者的包管理工具，同时 hpack 使用户能用 _package.yaml_ 而不是 <项目名>.cabal 来配置项目：

#+begin_src yaml 
  name: TestPackage
  version: 0.0
  synopsis: Package with library and two programs
  maintainer: Angela Author

  dependencies:
    - base >= 4.9 && < 5

  library:
    source-dirs: src

  executable:
    main: Main.hs
    source-dirs: prog1
    dependencies:
      - HUnit
#+end_src

很多人的第一个 Haskell 项目可能就是用 stack 创建并构建的。Stack 作为构建系统同样依赖 Cabal ，只是使用了不同的依赖管理策略：让用户使用现成的包集

#+begin_example
  然而这里存在一个问题：如果用户需要使用一个 Stackage包集没有的包，或者没有相应版本的包

  用户需要手动将想要的版本或者包的源码添加到 extra-deps 中
#+end_example

例如：IHaskell/stack-8.10.yaml：

#+begin_src yaml 
  extra-deps:
    - active-0.2.0.14
    - Chart-cairo-1.9.3
    - diagrams-1.4
    - diagrams-cairo-1.4.1.1
    - diagrams-contrib-1.4.4
    - diagrams-core-1.5.0
    - diagrams-lib-1.4.4
    - diagrams-svg-1.4.3
    - cairo-0.13.8.1
    - pango-0.13.8.1
    - glib-0.13.8.1
    - gtk2hs-buildtools-0.13.8.3
    - plot-0.2.3.11
    # - static-canvas-0.2.0.3
    - statestack-0.3
    - dual-tree-0.2.2.1
    - monoid-extras-0.6
    - svg-builder-0.1.1
    - force-layout-0.4.0.6
#+end_src

这个过程是传递性的，换句话说即将一个不存在于包集的包添加进去时，需要确保它所有的依赖在包集中，并且版本是正确的

#+begin_example
  至于如何选择每个版本，需要用户自己根据版本约束判断（运行 stack 可以在错误信息中看到约束）

  这是非常痛苦的过程，并且通常项目需要为每个目标 GHC 版本选择一个 Stackage 包集然后重复这件事很多次
#+end_example

但是由于其稳定性（有效减少了版本不一致的问题），仍然有很大一部分用户选择使用 Stack

* Nixpkgs 和 Haskell
