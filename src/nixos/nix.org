#+TITLE: Nix 语言
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+OPTIONS: num:nil timestamp:nil ^:nil 
#+HTML_LINK_UP: concept.html
#+HTML_LINK_HOME: nixos.html
* 快速入门
Nix 语言的主要工作是 *描述* _打包过程_ 。同时 Nix 语言也是一门 _强类型_ 和 _动态类型_ 的语言

** 交互模式
以下交互式教程需要使用 _nix repl_ 命令调出交互命令模式：
#+begin_src sh
  $ nix repl
  Welcome to Nix 2.5.1. Type :? for help.
#+end_src

它有点像用于调试 JavaScript 的控制台或 Python 的交互模式

#+begin_src sh 
  nix-repl> 1 + 2  # 输入表达式
  3  # 输出结果
#+end_src

** 即时计算

#+begin_src sh 
  nix-repl> { a.b.c = 1; }
  { a = { ... }; }
#+end_src

#+begin_example
在上面的例子中，我们输入了一个匿名集合，而这个匿名集合包含 a 集合 
#+end_example

*** 匿名集合
匿名集合是没有分配名称的集合，与之对立的是命名集合，例如 _foo = { bar };_ 
#+begin_example
  a 集合中的值并没有被这个匿名集合直接依赖

  自然顶级以下的集合不会被立刻求值，占位的变成了 ... 
#+end_example

在下面这个例子，将显式声明 qux 的直接依赖：

#+begin_src nix 
  let
    foo = { bar.qux = 1; };
    lax = foo.bar.qux;
  in
    lax  # 我们需要 lax，lax 需要 foo.bar.qux
#+end_src

*** 惰性求值
Nix语言的求值是 *惰性的* ，这意味着 *表达式不会在被绑定到变量后立即求值，而是在该值 _被使用_ 时才求值* 

可以输入 _:p_ 启用 *即刻求值* ，所有表达式都将被立刻求值：

#+begin_src sh 
  nix-repl> :p { a.b.c = 1; }
  { a = { b = { c = 1; }; }; }
#+end_src

注意：
+ _:p_ 参数 *只能* 在 _交互_ 模式使用
+ 输入 _:q_ 可以 *退出* 交互模式 

** 文件求值

** 代码风格


* 进阶手册
* 模块系统
