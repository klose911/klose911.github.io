#+TITLE: 定义函数
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: pair_list.html   
#+HTML_LINK_HOME: slt.html
#+OPTIONS: num:nil timestamp:nil

在本章中，会讲解如何 *自定义函数* 。由于Sheme是函数式编程语言，需要通过编写小型函数来构造程序。因此，明白如何构造并组合这些函数对掌握Scheme尤为关键

在前端定义函数非常不便，因此通常需要在文本编辑器中编辑好代码，并在解释器中加载它们
* 定义简单函数
  可以使用 _define_ 来将一个 _符号_ 与一个 _值_ *绑定* 。可以通过这个操作符定义例如 _数_ 、 _字符_ 、 _表_ 、 _函数_ 等 *任何类型的全局参数* 


  使用任意一款编辑器来编辑下面的代码，并将它们存储为 _hello.scm_ ，放置在类似于C:\doc\scheme\的文件夹下：

  #+BEGIN_SRC scheme
  ; Hello world as a variable
  (define vhello "Hello world")    

  ; Hello world as a function
  (define fhello (lambda ()         
	   "Hello world"))
  #+END_SRC

  接下来，向 Scheme解释器 输入下面的命令：

  #+BEGIN_SRC scheme
  (cd "C:\\doc\\scheme")
  ;Value 14: #[pathname 14 "c:\\doc\\scheme\\"]

  (load "hello.scm")
  ;Loading "hello.scm" -- done
  ;Value: fhello
  #+END_SRC

  通过这些命令， _hello.scm_ 就被 *加载到解释器* 中
  #+BEGIN_EXAMPLE
    如果你的当前目录被设定在了脚本所在目录，那么你就不需要再输入第一行的命令了
  #+END_EXAMPLE
  然后，向解释器输入下面的命令：

  #+BEGIN_SRC scheme
  vhello ; "Hello world"

  fhello ; #<procedure:fhello>

  (fhello) ; "Hello world"
  #+END_SRC

  #+BEGIN_EXAMPLE
    第1行中，我们声明了一个全局参数vhello，并将其与"Hello，World"绑定起来。

    第2行声明了一个返回“Hello World”的过程
  #+END_EXAMPLE

  + 特殊形式 *define* 用于 *声明变量* 
    + _define_ 接受两个参数：define运算符会使用第一个参数作为全局参数，并将其与第二个参数绑定起来
  + 特殊形式 *lambda* 用于 *定义过程* 
    + _lambda_ 需要至少一个的参数：第一个参数是由 *定义的过程所需的参数组成的表* 。因为本例 fhello 没有参数，所以参数表是空表

  #+BEGIN_EXAMPLE
    在解释器中输入vhello，解释器返回“Hello，World”

    如果你在解释器中输入fhello，它也会返回像下面这样的值：#<procedure:fhello>，这说明了Scheme解释器把过程和常规数据类型用同样的方式对待
    Scheme解释器通过内存空间中的数据地址操作所有的数据，因此，所有存在于内存空间中的对象都以同样的方式处理。

    如果把fhello当过程对待，你应该用括号括住这些符号，比如(fhello)：
    然后解释器会按照以前讲述的规则那样对它求值，并返回“Hello World”
  #+END_EXAMPLE
* 定义有参数的函数
  可以通过在 _lambda_ 后 *放一个参数表* 来定义有参数的函数

  #+BEGIN_SRC scheme
  ;; hello with name
  (define hello
    (lambda (name)
      (string-append "Hello " name "!")))

  ;; sum of three numbers
  (define sum3
    (lambda (a b c)
      (+ a b c)))

  (hello "Lucy") ; "Hello Lucy!"

  (sum3 10 20 30) ; 60
  #+END_SRC

  + 函数 _hello_ ：有一个参数 _name_ ，并会把 "Hello" 、name的值、和 '!'连结在一起并返回
  + 函数 _sum3_ ：此函数有三个参数并返回这三个参数的和

  #+BEGIN_EXAMPLE
    预定义函数string-append可以接受任意多个数的参数，并返回将这些参数连结在一起后的字符串
  #+END_EXAMPLE
* 简化函数定义
  用 _lambda_ 定义函数是一种规范的方法，但也可以使用下面代码展示的短形式：

  #+BEGIN_SRC scheme
  ;; hello with name
  (define (hello name)
    (string-append "Hello " name "!"))


  ;; sum of three numbers
  (define (sum3 a b c)
    (+ a b c))
  #+END_SRC

  在这种形式中，函数按照它们 *被调用的形式* 被定义

  [[file:branch.org][Next：分支]]

  [[file:pair_list.org][Previous：序对和列表]]

  [[file:slt.org][Home：目录]]
