#+TITLE: 哈希表
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: symbol.html   
#+HTML_LINK_HOME: slt.html
#+OPTIONS: num:nil timestamp:nil

本章中，会讲解用于表示 *数据关联* 的 _关联表_ 和 _哈希表_ 。关联的数据是由 *键* 和 *值* 组成的 *序对* ， *值由键唯一确定的* 。表1显示了书和作者构成的配对：

#+CAPTION: 作者和书
#+ATTR_HTML: :border 1 :rules all :frame boader
| Author                | Book |
| P. Graham             | On Lisp |
| P. Graham             | ANSI Common Lisp |
| E. S. Raymond         | The Cathedral and the Bazaar |
| K. Dybvig             | The Scheme Programming Language |
| F. P. Brooks, Jr.     | The Mythical Man-Month |
| L. Carroll            | Alice's Adventures in Wonderland |
| L. Carroll            | Through the Looking-Glass, and What Alice Found There  |

#+BEGIN_EXAMPLE
  书籍可以确定作者，反之由作者确定书籍则不可，这是因为一个作者可能会写很多本书

  表1中，由于P. Graham和L.Carroll分别写了两本书，因此他们的书无法被作者的名字唯一确定
#+END_EXAMPLE

+ R5RS 定义了 _关联表_ ，因此它在所有Scheme实现中都可用。但是 *使用关联表搜索速度较慢* （ _O(n)_ 的时间复杂度）
+ 使用 _哈希表_ 在速度方面更好一些（ _O(1)_ 的时间复杂度），但是哈希表并未在 R5RS 中定义而是依赖于相关实现

#+BEGIN_EXAMPLE
  MIT-Scheme实现了哈希表。如果你喜欢的Scheme实现没有哈希表，可以自己实现一个
#+END_EXAMPLE
* 关联表
  *关联表* 是一个由 *序对* 组成的表，它是一个用于 *表达关联* 的基本数据类型：
  + _符号_ ， _字符_ ，和 _数字_ 常被作为 *键* 使用，因为它们可以使用诸如 _eq?_ 或者 _eqv?_ 的 *快速比较函数* 被比较
  + 在作为键被使用前， _字符串_ 应该被转换为 *符号* ，从而获得更好的性能 

  关联表应该要么由 *点序对* 要么由 *普通表* 组成。下面是一个关联表的例子：
  #+BEGIN_EXAMPLE
    '((hi . 3) (everybody . 5) (nice . 3) (to . 10) (meet . 4) (you . 8))

    '((1 2 3) (4 5 6) (7 8 9))
  #+END_EXAMPLE

  函数 _assq_ ， _assv_ ，和 _assoc_ 从关联表中 *搜寻* 一个项：
  + 这些函数从 *开始* 一步步搜索关联表
    + 如果它们找到序对的 _car_ 等于给定的 _key_ ，就 *返回* 该 _序对_
    + 如果 *找不到* 函数返回 _#f_ 
  + 这些函数分别使用 _eq?_ ， _eqv?_ ，和 _equal?_ 比较键
    + 这意味着 assq 最快，assoc最慢
    + 作为键的话， _字符串_ ， _向量_ 和 _表_ 应该转化为 *符号* 或者 *数字* （如果可能的话）以 *提高性能* 

  #+BEGIN_SRC scheme
  (define wc '((hi . 3) (everybody . 5) (nice . 3) (to . 10) (meet . 4) (you . 8)))
  (assq 'hi wc) ; => (hi .3) 
  (assq 'you wc) ; => (you . 8) 
  (assq 'i wc) ; => #f 

  (define n '((1 2 3) (4 5 6) (7 8 9)))
  (assv 1 n) ; => ( 1 2 3) 
  (assv 8 n) ; => #f 
  #+END_SRC
* 哈希表
  _哈希表_ 是一种数据类型，它使用 *哈希函数* 将 _键_ 转化为 _整数_ ，并将*值存储在由该整数所指示的位置* 。当表足够 *稀疏* 时， _搜索_ ， _插入_ ， _更新_ 都能以 _O(1)_ 完成。下面展示了 MIT-Scheme 里哈希表的一些基本函数：

  + 创建哈希表， _初始大小_ 可以 *选择性指定* 
    + (make-eq-hash-table size) : 使用 _eq?_ 比较键的值
    + (make-eqv-hash-table size) : 使用 _eqv?_ 比较键的值
    + (make-equal-hash-table size) : 使用 _equal?_ 比较键的值
    + (make-string-hash-table size) : 使用 _string=?_ 比较键的值

  #+BEGIN_EXAMPLE
    由于只比较键的地址，所以 eq-hash-table 是最快的

    由于键是序列，所以 equal-hash-table 和 string-hash-table 比较慢
  #+END_EXAMPLE

  + (hash-table/put! hash-table key datum) : 将 _hash-table_ 中 _key_ 对应的 *值* 设为 _datum_
  + (hash-table/get hash-table key default) : *返回* _hash-table_ 中的 _key_ 对应的值
    + 如果 _key_ 不存在于 _hash-table_ 中，返回 _default_
  + (hash-table->alist hash-table): 将 _hash-table_ 转换为 _关联表_ 
* 实例：生成密码
  写一个密码创建程序作为关联表和哈希表的例子

  从字典里得到的密码很容易被破解，但另一方面，完全随机的密码又很难记忆和输入。程序使用无规则的拼写创建10个密码。密码应该尽可能频繁更改，但是懒于自己创建密码。使用这个程序，可以简单地改变密码

  程序由两部分构成：
  1. stat-spell.scm : 用于创建连续字符出现频率的数据
  2. make-pw.scm : 用于基于这个数据创建密码

** stat-spell
   (skip-char? c) : 如果 c 不是图像字符 或者 c 是 _#\:_ ,  _#\;_ ,  _#\'_ , or _#\"_ ，就返回 _#t_ 。 *读取文本时，这些字符会被跳过* 
   #+BEGIN_SRC scheme
  (define (skip-char? c)
    (or (not (char-graphic? c))
	(memv c '(#\: #\; #\' #\" #\`))))
   #+END_SRC

   (ss-make-alist c alist) : 有两个参数 
   + alist :  _字符频率_ 的 _关联表_
   + c: 字符 

   + 如果 c 在 alist 中，在 _序对的cdr_ 部分增加 1
   + 如果不在，返回  _(cons (cons c 1) alist)_ 

   这个函数使用了 *set-cdr!* 

   #+BEGIN_SRC scheme
  (define (ss-make-alist c alist)
    (let ((p (assv c alist)))
      (if p
	  (begin
	    (set-cdr! p (1+ (cdr p)))
	    alist)
	  (cons (cons c 1) alist))))
   #+END_SRC

   (ss-make-dat filename) : 
   + 从名为 _filename_ 的文件中 *读取字符*
   + 并使用跟随 _字符频率的关联表_ 来 *关联* 这些读出的 _字符_
   + 结果以 _关联表_ 形式存储在文件 _stat-spell.dat_ 
     + 它在哈希表中更新了频率的关联表
     + 存储在 _stat-spell.dat_ 的最终数据是一个 *关联表的关联表* 

   #+BEGIN_SRC scheme
  (define (ss-make-dat filename)
    (let ((char-hash (make-eqv-hash-table)))
      (with-input-from-file filename
	(lambda ()
	  (let loop ((c #\Space))
	    (let ((c1 (read-char)))
	      (if (not (eof-object? c1))
		  (if (skip-char? c1)
		      (loop c)
		      (let ((c1 (char-downcase c1)))
			(hash-table/put! char-hash c
					 (ss-make-alist c1 (hash-table/get char-hash c '())))
			(loop c1))))))))
      (with-output-to-file "stat-spell.dat"
	(lambda ()
	  (display "(define *stat-spell* \'(")
	  (newline)
	  (let loop ((alst (sort (hash-table->alist char-hash) 
				 (lambda (x y) (char<? (car x) (car y))))))
	    (if (pair? alst)
		(begin
		  (write (car alst))
		  (newline)
		  (loop (cdr alst)))))
	  (display "))")
	  (newline)))))
   #+END_SRC
** make-pw
   基于 stat-spell.dat 创建十个密码。过程如下：
   1. 基于 _频率数据_ 创建由 9 到 13个随机字符组成字符串表。字符 _#\Space_ 被添加在 *表结尾*
   2. 添加一个 _00_ 到 _99_ 之间的 *随机数* 在随机选取的字符串 *表结尾*
   3. 随机地将  _#\Space_ 转换为 #- ,  #_ , #\/, #\Space, #., 或者 #\
   4. 随机地将 _30%的字母_ 字符变为 *大写* 

   (alist->hash al mode) : 转换一个关联表到哈希表
   #+BEGIN_SRC scheme
  (define (alist->hash al mode)
    (let ((h (case mode
	       ((eq) (make-eq-hash-table))
	       ((eqv) (make-eqv-hash-table))
	       ((equal) (make-equal-hash-table))
	       ((string) (make-string-hash-table)))))
      (for-each (lambda (p)
		  (hash-table/put! h (car p) (cdr p)))
		al)
      h))
   #+END_SRC

   (pw-random-select vec) : 随机从一个向量表里获得一个元素
   #+BEGIN_SRC scheme
  (define *stat-spell-hash* (alist->hash *stat-spell* 'eqv))

  (define (pw-random-select vec)
    (vector-ref vec (random (vector-length vec))))
   #+END_SRC

   (random00) : 生成一个 00~99 的随机数
   #+BEGIN_SRC scheme
  (define (random00)
    (let loop ((i 0) (acc '()))
      (if (= i 2)
	  (list->string acc)
	  (loop (1+ i)
		(cons (pw-random-select
		       '#(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))
		      acc)))))
   #+END_SRC

   (occasional-upcase c)：把 30%的字符变成大写
   #+BEGIN_SRC scheme
  (define (occasional-upcase c)
    (if (< (random 10) 3)
	(char-upcase c)
	c))
   #+END_SRC
   (pw-enhance ls) ：加强密码的安全性 
   + 替换 \#Space 为特殊字符
   + 30%几率把字符替换为大写
   #+BEGIN_SRC scheme
  (define (pw-enhance ls)
    (list->string
     (map (lambda (c)
	    (cond
	     ((char=? c #\Space)
	      (pw-random-select  '#(#\- #\_ #\/  #\Space  #\. #\, #\@ #\? #\( #\))))
	     ((char-alphabetic? c)
	      (occasional-upcase c))
	     (else c)))
	  (cdr (reverse! ls)))))
   #+END_SRC
   (random-following alist) : 根据频率从字符关联表随机获得一个字符
   #+BEGIN_SRC scheme
  (define (random-following alist)
    (let ((n (random (apply + (map cdr alist)))))
      (let loop ((j 0) (alist alist))
	(if (pair? alist)
	    (let* ((pair (car alist))
		   (k (+ j (cdr pair))))
	      (if (> k n)
		  (car pair)
		  (loop k (cdr alist))))))))
   #+END_SRC

   (make-pw h n) : 创建一个 n + 3 长度的密码，最后2位是随机数字
   #+BEGIN_SRC scheme
  (define (make-pw h n)
    (let loop ((i 0) (c #\Space) (acc '()))
      (if (= i n)
	  (string-append
	   (pw-enhance (cons #\Space (cons c acc)))
	   (random00))
	  (loop (1+ i)
		(random-following (hash-table/get h c '((#\Space . 1))))
		(cons c acc)))))
   #+END_SRC
   (pw-candidates) : 随机生成10个 12～15 个字符的密码 

   #+BEGIN_SRC scheme
  (define (pw-candidates)
    (let loop ((i 0))
      (if (< i 10)
	  (begin
	    (display i)
	    (display ": ")
	    (write (make-pw *stat-spell-hash* (+ 9 (random 4))))
	    (newline)
	    (loop (1+ i)))
	  'done)))
   #+END_SRC

   测试代码：
   #+BEGIN_SRC scheme
  (compile-file "stat-spell.scm")
  (load "stat-spell")
  ;;; creating spelling data according to sicp_foreword.txt
  (ss-make-dat "sicp_foreword.txt")

  (compile-file "make-pw.scm")
  (load "make-pw")

  ;;; making ten passwords using the spelling data.
  (pw-candidates)
   #+END_SRC

   [[file:struct.org][Next：结构体]]

   [[file:symbol.org][Previous：符号]]

   [[file:slt.org][Home：目录]]
