#+TITLE: 字符串
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: assign.html   
#+HTML_LINK_HOME: slt.html
#+OPTIONS: num:nil timestamp:nil

以前只介绍了 _表_ 和 _数_ ，因为它们在 Scheme 中最为常用。然而，Scheme也有像 *字符* 、 *字符串* 、 *符号* 、 *向量* 等的其它数据类型
* 字符
  在某个字符前添加 _#\_ 来表明它是一个 *字符* 

  #+BEGIN_EXAMPLE
    例如：

    #\a 表示字符 a
    #\Space 表示 空格
    #\Tab 表示 制表符
    #\Linefeed 表示 Linefeed
    #\Return 表示回车
  #+END_EXAMPLE

  R5RS 中定义了下面的与字符相关的函数：

  + (char? obj) ：如果 _obj_ 是一个 *字符* 则返回 _#t_
  + (char=? c1 c3) :  如果 _c1_ 和 _c2_ 是 *同一个字符* 的话则返回 _#t_
  + (char->integer c) : 将 _c_ 转化为对应的 _整数_ (character code) 

  #+BEGIN_SRC scheme
    (char->integer #\a) ;  97
  #+END_SRC

  + (integer->char n) : 将一个 _整数_ 转化为对应的 _字符_ 
  + 比较字符：
    + (char<? c1 c2)
    + (char<= c1 c2)
    + (char> c1 c2)
    + (char>= c1 c2)

  #+BEGIN_EXAMPLE
    实际上是比较的 字符代码的大小

    例如，(char<? c1 c2)等同于(< (char->integer c1) (char->integer c2))
  #+END_EXAMPLE
  + (char-ci=? c1 c2)
  + (char-ci<? c1 c2)
  + (char-ci<=? c1 c2)
  + (char-ci>? c1 c2)
  + (char-ci>=? c1 c2)

  #+BEGIN_EXAMPLE
    这些比较函数对大小写不敏感
  #+END_EXAMPLE
  + 这些函数分别用于检测字符 _c_ 是否为 _字母_ 、 _数字_ 、 _空白符_ 、 _大写字母_ 或 _小写字母_ 
    + (char-alphabetic? c)
    + (char-numeric? c)
    + (char-whitespace? c)
    + (char-upper-case? c)
    + (char-lower-case? c) 
  + 这些函数分别返回字符 _c_ 对应的 _大写_ 或 _小写_ 
    + (char-upcase c)
    + (char-downcase c)
* 字符串
  *字符串* 通过两个 _闭合的双引号_ 表示：
  #+BEGIN_EXAMPLE
    例如，"abc" 表示字符串 abc
  #+END_EXAMPLE

  R5RS 定义了下面的函数：
  + (string? s)：如果 _s_ 是一个 *字符串* 则返回 _#t_
  + (make-string n c) :  返回由 _n个_ 字符 _c_ 组成的 _字符串_ 。参数 _c_ *可选*
  + (string-length s) :  返回字符串 _s_ 的 *长度*
  + (string=? s1 s2) : 如果字符串 _s1_ 和 _s2_  *相同* 的话则返回 _#t_
  + (string-ref s idx) :  返回字符串 _s_ 中 *索引* 为 _idx_ 的字符（索引从 0 开始计数）
  + (string-set! s idx c) : 将字符串 _s_ 中 _索引_ 为 _idx_ 的字符 *设置* 为 _c_
  + (substring s start end) : 返回字符串 _s_ 从 _start_ 开始到 _end - 1_ 处的 *子字符串* 
  #+BEGIN_SRC scheme
  (substring "abcdefg" 1 4) ;  "bcd"
  #+END_SRC
  + (string-append s1 s2 ...) : *连接* 两个字符串 _s1_ 和 _s2_
  + (string->list s) :  将字符串 _s_ 转换为由 *字符构成的表*
  + (list->string ls) : 将一个由 _字符构成的表_ 转换为 _字符串_
  + (string-copy s) : *复制* 字符串 _s_ 

  [[file:symbol.org][Next：符号]]

  [[file:assign.org][Previous：赋值]]

  [[file:slt.org][Home：目录]]
