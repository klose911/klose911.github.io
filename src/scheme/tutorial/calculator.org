#+TITLE: 将 Scheme 用作计算器
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: slt.html   
#+HTML_LINK_HOME: slt.html
#+OPTIONS: num:nil timestamp:nil

让我们把Scheme解释器当作计算器来使用。它比Windows附带的计算机方便多了
* 将Scheme作为一个计算器

点击 _开始_ → _所有程序_ → _MIT Scheme_ → _Scheme_ 来启动 *Scheme解释器* 以及如下图所示的控制台：

    #+ATTR_HTML: image :width 60% 
    [[file:pic/mit_scheme1.png]] 

首先，让我们计算1加2的值，在提示符中输入 _(+ 1 2)_ ：

#+BEGIN_EXAMPLE
  1 ]=> (+ 1 2)

  ;Value: 3

  1 ]=>
#+END_EXAMPLE

解释器返回 _3_ 作为答案。请注意以下三点：
1. 一对 _括号_ 代表了一次 *计算的步骤* 。本例中， _(+ 1 2)_ 代表 _步骤1+2_
2. 左括号后紧跟着一个 *函数的名字* ，然后是 *参数* 。Scheme中大多数的操作符都是函数。在本例中， _函数+_ 首先出现，然后紧跟两个参数： _1_ 和 _2_
3.  *标记的分隔符* 是 _空格_ （Space）、 _制表符_ （Tab）或者 _换行符_ （Newline）。 *逗号和分号不是分隔符* 

让我们来详细地分析计算过程。在这个函数中，当所有的参数被求值后，计算开始处理。对参数的求值顺序是没有被规范的，也就是说，参数并不是总是会从左到右求值。
+ 符号 + 被求值为 *加法过程* 。仅在前端输入+，解释器会返回：_[arity-dispatched-procedure 1]_  这表明 + 是代表 _过程1_ 的一个符号
+ 对 1 求值得到1。通常来说
  + *对 _布尔值_ ， _数字_ ， _字符_ 以及 _字符串_ 求值的结果* 就是 *它们本身*
  + *对符号求值的结果* 可能是一些它的东西。
+ 对 2 求值得到 2
+ 最后，对 (+ 1 2) 求值得到 3 并跳出括号。在Scheme中，求得的值会跳出括号外，并且这个值（表达式的最终值）会被 *打印到前端* 

函数 + 可以 *接受任意多的参数* 

#+BEGIN_SRC scheme
  (+)       ;→ 0
  (+ 1)     ;→ 1
  (+ 1 2)   ;→ 3
  (+ 1 2 3) ;→ 6
#+END_SRC
* 四种基本算术操作

+ Scheme 都可以 *处理分数*
+ 函数 _exact->inexact_ 用于把 *分数转换为浮点数*
+ Scheme也可以 *处理复数* 。复数是形如 _a+bi_ 的数，此处 a 称为 _实部_ ，b 称为 _虚部_
+ + 、- 、 * 和 / 分别代表 *加* 、 *减* 、 *乘* 、 *除* 。这些函数都 *接受任意多的参数* 

#+BEGIN_SRC scheme
  (- 10 3)    ;→ 7
  (- 10 3 5)  ;→ 2
  (* 2 3)     ;→ 6
  (* 2 3 4)   ;→ 24
  (/ 29 3)    ;→ 29/3
  (/ 29 3 7)  ;→ 29/21
  (/ 9 6)     ;→ 3/2
  (exact->inexact (/ 29 3 7)) ;→ 1.380952380952381
#+END_SRC 

括号可以像下面这样 *嵌套* ：
#+BEGIN_SRC scheme
  (* (+ 2 3) (- 5 3)) ;→ 10
  (/ (+ 9 1) (+ 2 3)) ;→ 2
#+END_SRC

形如这些由 _括号_ 、 _标记_ （token）以及 _分隔符_ 组成的式子，被称为 *S-表达式* 
* 其它算术操作
** 商数，余数，平方根
+ 函数 _quotient_ ： 求 *商数*
+ 函数 _remainder_ 和 _modulo_ ： 求 *余数*
+ 函数 _sqrt_ ：求参数的 *平方根* 

#+BEGIN_SRC scheme
  (quotient 7 3) ;→ 2
  (modulo 7 3)   ;→ 1
  (sqrt 8)       ;→ 2.8284271247461903
#+END_SRC
** 三角函数
数学上的三角函数，诸如 _sin_ ， _cos_ ， _tan_ ， _asin_ ， _acos_ 和 _atan_ 都可以在Scheme中使用

#+BEGIN_SRC scheme
  (atan 1)   ;→ 0.7853981633974483
  (atan 1 0) ;→ 1.5707963267948966
#+END_SRC

_atan_ *接受1个或2个参数* 。如果atan的参数为 _1/2_  _π_ ，那么就要使用两个参数来计算
** 指数和对数
+ *指数* 通过 _exp_ 函数运算
+ *对数* 通过 _log_ 函数运算

_a的b次幂_ 可以通过 _(exp a b)_ 来计算

[[file:pair_list.org][Next：序对和列表]]

[[file:slt.org][Home：目录]]
