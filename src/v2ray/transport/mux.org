#+TITLE: Mux 
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: transport.html
#+OPTIONS: num:nil timestamp:nil ^:nil

Mux 意为多路复用(multiplexing)，它能够将多条 TCP 连接合并成一条，节省资源，提高并发能力

#+begin_example
Mux 实质上不能提高网速，但对并发连接比较有效
#+end_example
* 配置

Mux 只需在客户端开启，服务器会自动识别，所以只给客户端的配置。只要在 outbound 或 outboundDetour 加入 "mux": {"enabled": true} 即可：

#+begin_src js 
  {
    "inbounds": [
      {
	"port": 1080, // 监听端口
	"protocol": "socks", // 入口协议为 SOCKS 5
	"sniffing": {
	  "enabled": true,
	  "destOverride": ["http", "tls"]
	},
	"settings": {
	  "auth": "noauth"  // 不认证
	}
      }
    ],
    "outbounds": [
      {
	"protocol": "vmess", // 出口协议
	"settings": {
	  "vnext": [
	    {
	      "address": "serveraddr.com", // 服务器地址，请修改为你自己的服务器 ip 或域名
	      "port": 16823,  // 服务器端口
	      "users": [
		{
		  "id": "b831381d-6324-4d53-ad4f-8cda48b30811",  // 用户 ID，必须与服务器端配置相同
		  "alterId": 64 // 此处的值也应当与服务器相同
		}
	      ]
	    }
	  ]
	},
	"mux": {"enabled": true}
      }
    ]
  }
#+end_src

#+ATTR_HTML: :border 1 :rules all :frame boader
| [[file:mkcp.org][Next: MKCP]] | [[file:transport.org][Home：传输]] |
