#+TITLE: ShadowSocks
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: basic.html
#+HTML_LINK_UP: vmess.html
#+OPTIONS: num:nil timestamp:nil ^:nil

#+begin_example
  作为一个代理工具集合，V2Ray 集成有 Shadowsocks 模块

  用 V2Ray 配置成 Shadowsocks 服务器或者 Shadowsocks 客户端都是可以的，兼容 Shadowsocks-libev, go-shadowsocks2 等基于 Shadowsocks 协议的客户端
#+end_example

配置与 VMess 大同小异，客户端服务器端都要有入口和出口，只不过是协议(protocol)和相关设置(settings)不同

* 配置
** 客户端
#+begin_src js 
  {
      "inbounds": [
	  {
	      "port": 1080, // 监听端口
	      "protocol": "socks", // 入口协议为 SOCKS 5
	      "sniffing": {
		  "enabled": true,
		  "destOverride": ["http", "tls"]
	      },
	      "settings": {
		  "auth": "noauth"  // 不认证
	      }
	  }
      ],
      "outbounds": [
	  {
	      "protocol": "shadowsocks",
	      "settings": {
		  "servers": [
		      {
			  "address": "serveraddr.com", // Shadowsocks 的服务器地址
			  "method": "aes-128-gcm", // Shadowsocks 的加密方式
			  "ota": true, // 是否开启 OTA，true 为开启
			  "password": "sspasswd", // Shadowsocks 的密码
			  "port": 1024  
		      }
		  ]
	      }
	  }
      ]
  }
#+end_src
** 服务器

#+begin_src js 
  {
      "inbounds": [
	  {
	      "port": 1024, // 监听端口
	      "protocol": "shadowsocks",
	      "settings": {
		  "method": "aes-128-gcm",
		  "ota": true, // 是否开启 OTA
		  "password": "sspasswd"
	      }
	  }
      ],
      "outbounds": [
	  {
	      "protocol": "freedom",  
	      "settings": {}
	  }
      ]
  }
#+end_src
* 注意
+ 因为协议漏洞，Shadowsocks 已放弃 OTA(一次认证) 转而使用 AEAD
  #+begin_example
    V2Ray 的 Shadowsocks 协议已经跟进 AEAD，但是仍然兼容 OTA

    建议使用 AEAD (method 为 aes-256-gcm、aes-128-gcm、chacha20-poly1305 即可开启 AEAD), 使用 AEAD 时 OTA 会失效
  #+end_example
+ Shadowsocks 已经弃用 simple-obfs
  #+begin_example
    可使用基于 V2Ray 的新版混淆插件

    也可以使用 V2Ray 的 Websocket/http2 + TLS 
  #+end_example
+ 可以使用 V2Ray 的传输层配置，但如果这么设置了将与原版 Shadowsocks 不兼容
  #+begin_example
    兼容 Shadowsocks 新增的 v2ray-plugin 插件 https://github.com/shadowsocks/v2ray-plugin
  #+end_example
