#+TITLE: 集群
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: basic.html   
#+HTML_LINK_HOME: kafka.html
#+OPTIONS: num:nil timestamp:nil ^:nli
* 组件
** 代理
   Kafka集群通常由多个代理组成以保持 *负载平衡* 
   + 一个Kafka代理实例可以每秒处理数十万次读取和写入，每个Broker可以处理TB的消息，而没有性能影响
   + Kafka代理是 *无状态* 的，所以他们使用 _ZooKeeper_ 来维护它们的集群状态
     + Kafka代理的 *领导选举* 可以由ZooKeeper完成

** ZooKeeper
   ZooKeeper用于 *管理和协调* Kafka代理：
   + *通知* _生产者和消费者_ Kafka系统中 _存在任何新代理_ 或Kafka系统中 _代理失败_
   + 根据Zookeeper的通知， _产品和消费者_ *采取决定* 并开始与 _某些其他代理_ *协调* 他们的任务

** 生产者
   生产者将 _数据_ *推送* 给 _代理_ ：
   + 当 _新代理启动_ 时， _所有生产者_ *搜索* 它并 *自动* 向该新代理 *发送* 消息
   + 生产者 *不等待来自代理的确认* ，并且发送消息的速度与代理可以处理的一样快

** 消费者
   + 因为Kafka代理是 _无状态_ 的，这意味着 _消费者_ 必须通过使用 _分区偏移_ 来 *维护* _已经消耗_ 了多少消息
   + 如果消费者 *确认* 特定的 _消息偏移_ ，则意味着消费者已经 *消费了所有先前的消息* 
   + _消费者_ 向 _代理_ 发出 *异步拉取请求* ，以具有 *准备好* _消耗的字节缓冲区_ 
   + 消费者可以简单地通过 _提供偏移值_ 来 *快退* 或 *跳到* _分区中的任何点_
     + 消费者偏移值由ZooKeeper通知

   下图显示Kafka的集群：

   #+ATTR_HTML: image :width 70% 
   [[file:pic/cluster_architecture.jpg]] 

   [[file:workflow.org][Next: 流程]]

   [[file:basic.org][Previous: 基础]]

   [[file:kafka.org][Home: 目录]]
