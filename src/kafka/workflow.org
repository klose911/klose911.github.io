#+TITLE: 流程
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: cluster.html   
#+HTML_LINK_HOME: kafka.html
#+OPTIONS: num:nil timestamp:nil ^:nli

#+BEGIN_EXAMPLE
  Kafka只是分为一个或多个分区的主题的集合。 Kafka分区是消息的线性有序序列，其中每个消息由它们的索引(称为偏移)来标识
  Kafka集群中的所有数据都是不相连的分区联合。 传入消息写在分区的末尾，消息由消费者顺序读取。 通过将消息复制到不同的代理提供持久性

  Kafka以快速，可靠，持久，容错和零停机的方式提供基于pub-sub和队列的消息系统
  在这两种情况下，生产者只需将消息发送到主题，消费者可以根据自己的需要选择任何一种类型的消息传递系统
#+END_EXAMPLE
* 发布/订阅消息
  以下是Pub/Sub消息的逐步工作流程：
  1. 生产者 *定期* 向 _主题_ *发送* _消息_ 
  2. _Kafka代理_ *存储* 为 _该特定主题_ 配置的 _分区_ 中的所有消息，它确保 *消息在分区之间平等共享* 
     + 如果生产者发送两个消息并且有两个分区，Kafka将在第一分区中存储一个消息，在第二分区中存储第二消息
  3. 消费者 *订阅* 特定 _主题_ 
  4. 一旦消费者订阅主题，Kafka将向消费者 *提供* _主题的当前偏移_ ，并且还将 _偏移_ *保存* 在Zookeeper系综中
  5. 消费者将 *定期请求* Kafka(如100 Ms)新消息
  6. 一旦Kafka收到来自生产者的消息，它将这些消息 *转发* 给 _消费者_ 
  7. 消费者将收到消息并进行处理
  8. 一旦  _消息被处理_ ， _消费者_ 将向 _Kafka代理_ *发送确认* 
  9. 一旦 _Kafka收到确认_ ，它将 _偏移_ *更改为新值* ，并在 _Zookeeper_ 中 *更新* 它
     + 由于偏移在Zookeeper中维护，消费者可以正确地读取下一封邮件，即使在服务器暴力期间。

  以上流程将重复，直到消费者停止请求

  #+BEGIN_EXAMPLE
    消费者可以随时回退/跳到所需的主题偏移量，并阅读所有后续消息
  #+END_EXAMPLE
* 队列消息/用户组的工作流
  _队列消息传递_ 系统： *具有相同组ID* 的 _一组消费者_ 将 *订阅* _主题_ 

  #+BEGIN_EXAMPLE
    简单来说，订阅具有相同 Group ID 的主题的消费者被认为是单个组，并且消息在它们之间共享
  #+END_EXAMPLE

  这个系统的实际工作流程：
  1. 生产者以固定间隔向某个主题发送消息
  2. Kafka存储在为该特定主题配置的分区中的所有消息，类似于前面的方案
  3. 单个消费者订阅特定主题，假设主题为 _Topic-01_ , Group ID 为 _Group-1_ 
  4. Kafka以与发布/订阅消息相同的方式与消费者交互，直到 *新消费者* 以 _相同的组ID_ (Group-1) *订阅* _相同主题_ (Topic-01)
  5. 一旦新消费者到达，Kafka将其操作切换到 *共享模式* ，并在 *两个消费者之间* 共享数据。 此共享将继续，直到 *用户数达到为该特定主题配置的分区数* 
  6. 一旦 _消费者的数量_ 超过 _分区的数量_ ， _新消费者_ 将 *不会接收* _任何进一步的消息_ ，直到 *任何一个现有消费者取消订阅* 

  #+BEGIN_EXAMPLE
    出现这种情况是因为Kafka中的每个消费者将被分配至少一个分区，并且一旦所有分区被分配给现有消费者，新消费者将必须等待
  #+END_EXAMPLE
* ZooKeeper的作用
  Kafka的一个关键依赖是 _Zookeeper_ ，它是一个 *分布式* _配置_ 和 _同步_ 服务：
  + Zookeeper是Kafka *代理和消费者之间的协调接口* 
  + Kafka服务器通过 _Zookeeper集群_ *共享信息* 
  + Kafka在Zookeeper中 *存储* _基本元数据_ ，例如： 
    + 主题
    + 代理
    + 消费者偏移

  #+BEGIN_EXAMPLE
    由于所有关键信息存储在Zookeeper中，并且它通常在其整体上复制此数据，因此Kafka代理/ Zookeeper的故障不会影响Kafka集群的状态

    一旦Zookeeper重新启动，Kafka将恢复状态，这为Kafka带来了零停机时间

    Kafka代理之间的领导者选举也通过使用Zookeeper在领导者失败的情况下完成
  #+END_EXAMPLE

  [[file:operation.org][Next: 操作]]

  [[file:cluster.org][Previous: 集群]]

  [[file:kafka.org][Home: 目录]]
