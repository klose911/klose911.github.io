#+TITLE: 外观模式
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+OPTIONS: num:nil timestamp:nil ^:nil *:nil
#+HTML_LINK_HOME: fdp.html

外观模式是为了解决类与类之间的依赖关系的，将他们的关系放在一个Facade类中，降低了类与类之间的耦合度

* UML
  #+ATTR_HTML: image :width 40% 
  [[file:pic/facade.png]] 

* Java

+ 编写CPU, Memory, Disk类

  #+BEGIN_SRC java
    public class CPU {
            public void startup() {
                    System.out.println("cpu startup!");
            }

            public void shutdown() {
                    System.out.println("cpu shutdown!");
            }
    }
  #+END_SRC


#+BEGIN_SRC java
  public class Memory {
          public void startup() {
                  System.out.println("memory startup!");
          }

          public void shutdown() {
                  System.out.println("memory shutdown!");
          }
  }
#+END_SRC

#+BEGIN_SRC java
  public class Disk {
          public void startup() {
                  System.out.println("disk startup!");
          }

          public void shutdown() {
                  System.out.println("disk shutdown!");
          }
  }
#+END_SRC

+ 编写Computer类来简化客户端调用：

  #+BEGIN_SRC java
    public class Computer {
            private CPU cpu;
            private Memory memory;
            private Disk disk;

            public Computer() {
                    cpu = new CPU();
                    memory = new Memory();
                    disk = new Disk();
            }

            public void startup() {
                    System.out.println("start the computer!");
                    cpu.startup();
                    memory.startup();
                    disk.startup();
                    System.out.println("start computer finished!");
            }

            public void shutdown() {
                    System.out.println("begin to close the computer!");
                    cpu.shutdown();
                    memory.shutdown();
                    disk.shutdown();
                    System.out.println("computer closed!");
            }
    }
  #+END_SRC

+ 测试类：

  #+BEGIN_SRC java
    public class ComputerTest {
            public static void main(String[] args) {
                    Computer computer = new Computer();
                    computer.startup();
                    System.out.println();
                    computer.shutdown();
            }
    }
  #+END_SRC

+ 测试结果：

  #+BEGIN_SRC sh
    start the computer!
    cpu startup!
    memory startup!
    disk startup!
    start computer finished!

    begin to close the computer!
    cpu shutdown!
    memory shutdown!
    disk shutdown!
    computer closed!
  #+END_SRC

* Racket/Common-Lisp
函数式编程往往使用module或者package来模块化代码：
+ 通过宏把函数编译到module或者package中
+ 客户端通过import module/require package来进行调用

[[file:bridge.org][Next：桥接模式]]

[[file:proxy.org][Previous：代理模式]]

[[file:fdp.org][Home：目录]]

