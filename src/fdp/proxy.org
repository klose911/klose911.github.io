#+TITLE: 代理模式
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+OPTIONS: num:nil timestamp:nil ^:nil *:nil
#+HTML_LINK_HOME: fdp.html

当无法直接访问某个对象或访问某个对象存在困难时可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，所访问的真实对象与代理对象需要实现相同的接口：

* UML
  #+ATTR_HTML: image :width 40% 
  [[file:pic/proxy.png]] 
  
* Java
+ 定义接口Sourceable：
  
  #+BEGIN_SRC java
    public interface Sourceable {
            void method();
    }
  #+END_SRC
  
+ Source实现Sourceable作为被代理的类：
  
  #+BEGIN_SRC java
    public class Source implements Sourceable {
            public void method() {
                    System.out.println("the original method!");
            }
    }
  #+END_SRC
  
+ 代理类Proxy注入Source实例，来实现Sourceable接口，作为代理类
  
  #+BEGIN_SRC java
    public class Proxy implements Sourceable {
            private Source source;

            public Proxy() {
                    super();
                    this.source = new Source();
            }

            public void method() {
                    before();
                    source.method();
                    atfer();
            }

            private void atfer() {
                    System.out.println("after proxy!");
            }

            private void before() {
                    System.out.println("before proxy!");
            }
    }
  #+END_SRC
  
+ 测试类：
  
  #+BEGIN_SRC java
    public class ProxyTest {
            public static void main(String[] args) {
                    Sourceable source = new Proxy();
                    source.method();
            }
    }
  #+END_SRC
  
+ 测试结果：
  
  #+BEGIN_SRC sh
    before proxy!
    the original method!
    after proxy!
  #+END_SRC
  
* Scheme 
实现方式和装饰器完全一样，通过高阶函数

[[file:facade.org][Next：外观模式]]

[[file:decorator.org][Previous：装饰器模式]]

[[file:fdp.org][Home：目录]]
