#+TITLE: 策略模式
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+OPTIONS: num:nil timestamp:nil ^:nil *:nil
#+HTML_LINK_HOME: fdp.html

策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户
* UML 
  #+ATTR_HTML: image :width 40% 
  [[file:pic/strategy.png]] 

* Java

+ 定义算法接口：

  #+BEGIN_SRC java
    public interface ICalculator {
            int calculate(String exp);
    }
  #+END_SRC

+ 抽象类，实现通用辅助方法：

  #+BEGIN_SRC java
    public abstract class AbstractCalculator implements ICalculator {
            public int[] split(String exp, String opt) {
                    String array[] = exp.split(opt);
                    int arrayInt[] = new int[2];
                    arrayInt[0] = Integer.parseInt(array[0]);
                    arrayInt[1] = Integer.parseInt(array[1]);
                    return arrayInt;
            }
    }
  #+END_SRC

+ 实现三种算法：

  #+BEGIN_SRC java
    public class Plus extends AbstractCalculator {
            public int calculate(String exp) {
                    int arrayInt[] = split(exp, "\\+");
                    return arrayInt[0] + arrayInt[1];
            }
    }
  #+END_SRC


#+BEGIN_SRC java
  public class Multiply extends AbstractCalculator {
          public int calculate(String exp) {
                  int arrayInt[] = split(exp, "\\*");
                  return arrayInt[0] * arrayInt[1];
          }
  }
#+END_SRC


#+BEGIN_SRC java
  public class Minus extends AbstractCalculator {
          public int calculate(String exp) {
                  int arrayInt[] = split(exp, "-");
                  return arrayInt[0] - arrayInt[1];
          }
  }
#+END_SRC

+ 测试类：

  #+BEGIN_SRC java
    public class CalculatorTest {
            public static void main(String[] args) {
                    String exp = "2+8";
                    ICalculator cal = new Plus();
                    int result = cal.calculate(exp);
                    System.out.println(result);
            }
    }
  #+END_SRC

+ 测试结果：

  #+BEGIN_SRC sh
    10
  #+END_SRC

* Scheme

+ 具体算法作为函数参数传入：
  #+BEGIN_SRC scheme
    (define calculator
      (lambda (operator)
        (lambda (op1 op2)
          (operator op1 op2)))) 
  #+END_SRC

+ 测试结果：
#+BEGIN_SRC scheme
  ((calculator +) 8 2) ;; => 10
  ((calculator -) 8 2) ;; => 6
  ((calculator *) 8 2) ;; => 16
#+END_SRC

[[file:template.org][Next：模板模式]]

[[file:fdp.org][Home：目录]]
