#+TITLE: 装饰器模式
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+OPTIONS: num:nil timestamp:nil ^:nil *:nil
#+HTML_LINK_HOME: fdp.html

装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例

* UML
  #+ATTR_HTML: image :width 40% 
  [[file:pic/decorator.png]] 

* Java
+ 定义接口Sourceable：

  #+BEGIN_SRC java
    public interface Sourceable {
            void method();
    }
  #+END_SRC

+ Source实现Sourceable作为被装饰类：

  #+BEGIN_SRC java
    public class Source implements Sourceable {
            public void method() {
                    System.out.println("the original method!");
            }
    }
  #+END_SRC

+ Decorator类是一个装饰类，可以为Source类动态的添加一些功能：

  #+BEGIN_SRC java
    public class Decorator implements Sourceable {

            private Sourceable source;

            public Decorator(Sourceable source) {
                    super();
                    this.source = source;
            }

            public void method() {
                    System.out.println("before decorator!");
                    source.method();
                    System.out.println("after decorator!");
            }

    }
  #+END_SRC

+ 测试类：

  #+BEGIN_SRC java
    public class DecoratorTest {
            public static void main(String[] args) {
                    Sourceable source = new Source();
                    Sourceable obj = new Decorator(source);
                    obj.method();
            }
    }
  #+END_SRC

+ 测试结果：

  #+BEGIN_SRC sh
    before decorator!
    the original method!
    after decorator!
  #+END_SRC

* Scheme

使用高阶函数来增加动态功能：
  #+BEGIN_SRC scheme
    (define method
      (lambda ()
        (begin 
          (display "the original method!")
          (newline)
          #t)))

    (define decorator
      (lambda (fn)
        (begin
          (display "before decorator!")
          (newline)
          (fn)
          (display "after decorator!")
          (newline)
          #t)))
  #+END_SRC

测试：

#+BEGIN_SRC scheme
  (decorator method)

  ;; 1 ]=> before decorator!
  ;; the original method!
  ;; after decorator!

  ;;Value: #t
#+END_SRC

[[file:proxy.org][Next：代理模式]]

[[file:adapter.org][Previous：适配器模式]]

[[file:fdp.org][Home：目录]]
