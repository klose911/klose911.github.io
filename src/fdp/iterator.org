#+TITLE: 迭代模式
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+OPTIONS: num:nil timestamp:nil ^:nil *:nil
#+HTML_LINK_HOME: fdp.html

代器模式就是顺序访问聚集中的对象，一般来说集合类中非常常见。这句话包含两层意思：一是需要遍历的对象，即聚集对象Collection，二是迭代器对象Iterator，用于对聚集对象进行遍历访问

* UML 
  #+ATTR_HTML: image :width 40% 
  [[file:pic/iterator.png]] 
  
* Java
+ 定义迭代操作接口Iterator：
  #+BEGIN_SRC java
    public interface Collection {
            Iterator iterator();

            /*取得集合元素*/
            Object get(int i);

            /*取得集合大小*/
            int size();
    }
  #+END_SRC
  
+ 定义集合接口Collection，注意：集合接口可以返回迭代接口：
  #+BEGIN_SRC java
    public interface Collection {
            Iterator iterator();

            /*取得集合元素*/
            Object get(int i);

            /*取得集合大小*/
            int size();
    }
  #+END_SRC
  
+ 实现迭代接口：
  #+BEGIN_SRC java
    public class MyIterator implements Iterator {
            private Collection collection;
            private int pos = -1;

            public MyIterator(Collection collection) {
                    this.collection = collection;
            }

            @Override
            public Object previous() {
                    if (pos > 0) {
                            pos--;
                    }
                    return collection.get(pos);
            }

            @Override
            public Object next() {
                    if (pos < collection.size() - 1) {
                            pos++;
                    }
                    return collection.get(pos);
            }

            @Override
            public boolean hasNext() {
                    if (pos < collection.size() - 1) {
                            return true;
                    } else {
                            return false;
                    }
            }

            @Override
            public Object first() {
                    pos = 0;
                    return collection.get(pos);
            }

    }
  #+END_SRC
  
+ 实现具体的集合对象：
  #+BEGIN_SRC java
    public class MyCollection implements Collection {
            public String string[] = {"A", "B", "C", "D", "E"};

            @Override
            public Iterator iterator() {
                    return new MyIterator(this);
            }

            @Override
            public Object get(int i) {
                    return string[i];
            }

            @Override
            public int size() {
                    return string.length;
            }
    }
  #+END_SRC
  
+ 测试类：
  #+BEGIN_SRC java
    public class IteratorTest {

            public static void main(String[] args) {
                    Collection collection = new MyCollection();
                    Iterator it = collection.iterator();

                    while (it.hasNext()) {
                            System.out.println(it.next());
                    }
            }
    }

  #+END_SRC
  
+ 测试结果：
  #+BEGIN_SRC sh
    A
    B
    C
    D
    E
  #+END_SRC
  
注意，这个实现至少有以下几个缺点：
+ 线程不安全
+ 类型不安全
+ 缺少比较器
  
* Scheme
+ 语言原生的map/reduce函数：
#+BEGIN_SRC scheme
  (map
   (lambda (s)
     (begin
       (display s)
       (newline)
       s)) 
   '(a b c d e))

  ;; => a
  ;;    b
  ;;    c
  ;;    d
  ;;    e
  ;;Value 16: (a b c d e)
#+END_SRC

[[file:chain.org][Next：责任链模式]]

[[file:observer.org][Previous：观察者模式]]

[[file:fdp.org][Home：目录]]
