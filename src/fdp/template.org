#+TITLE: 模板模式
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+OPTIONS: num:nil timestamp:nil ^:nil *:nil
#+HTML_LINK_HOME: fdp.html

定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用

* UML
  #+ATTR_HTML: image :width 40% 
  [[file:pic/template.png]]
  
* Java
+ 实现抽象类：
  
  #+BEGIN_SRC java
    public abstract class AbstractCalculator {
            /*主方法，实现对本类其它方法的调用*/
            public final int calculate(String exp, String opt) {
                    int array[] = split(exp, opt);
                    return calculate(array[0], array[1]);
            }

            /*被子类重写的方法*/
            abstract public int calculate(int num1, int num2);

            public int[] split(String exp, String opt) {
                    String array[] = exp.split(opt);
                    int arrayInt[] = new int[2];
                    arrayInt[0] = Integer.parseInt(array[0]);
                    arrayInt[1] = Integer.parseInt(array[1]);
                    return arrayInt;
            }
    }
  #+END_SRC
  
+ 子类继承抽象类，实现抽象方法：
  #+BEGIN_SRC java
    public class Plus extends AbstractCalculator {
            @Override
            public int calculate(int num1, int num2) {
                    return num1 + num2;
            }
    }
  #+END_SRC
  
+ 测试类：
  
  #+BEGIN_SRC java
    public class PlusTest {
            public static void main(String[] args) {
                    String exp = "2+8";
                    AbstractCalculator cal = new Plus();
                    int result = cal.calculate(exp, "\\+");
                    System.out.println(result);
            }
    }
  #+END_SRC
  
+ 测试结果：
  
  #+BEGIN_SRC sh
    10
  #+END_SRC

* CLOS
+ 使用通用方法：
  
#+BEGIN_SRC lisp
  (defclass calculator () () )

  (defclass plus (calculator) ())
  (defclass minus (calculator) ())
  (defclass multiply (calculator) ())

  (defmethod calculate ((p plus) op1 op2)
    (+ op1 op2))
  (defmethod calculate ((m minus) op1 op2)
    (- op1 op2))
  (defmethod calculate ((m multiply) op1 op2)
    (* op1 op2))
#+END_SRC

+ 测试结果：
  
#+BEGIN_SRC lisp
  (calculate (make-instance 'plus) 8 2) ;; => 10 
  (calculate (make-instance 'minus) 8 2) ;; => 6 
  (calculate (make-instance 'multiply) 8 2) ;; => 16 
#+END_SRC

[[file:observer.org][Next：观察者模式]]

[[file:strategy.org][Previous：策略模式]]

[[file:fdp.org][Home：目录]]
