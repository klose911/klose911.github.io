#+TITLE: 工厂方法模式
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+OPTIONS: num:nil timestamp:nil ^:nil *:nil
#+HTML_LINK_HOME: fdp.html

* UML
  使用工厂类的静态方法生成对象：
  
  #+ATTR_HTML: image :width 40% 
  [[file:pic/factory-method.png]]
  
* Java 
  创建二者的共同接口：
  #+BEGIN_SRC java
    public interface Sender {
            void send();
    }
  #+END_SRC
  
  创建实现类：
  
  #+BEGIN_SRC java
  class MailSender implements Sender {
          public void send() {
                  System.out.println("this is mail sender!");
          }
  }
  #+END_SRC
  
  #+BEGIN_SRC java
  class SmsSender implements Sender {
          public void send() {
                  System.out.println("this is sms sender!");
          }
  }
  #+END_SRC
  
  建工厂类：
  
  #+BEGIN_SRC java
  class SenderFactory {

          static Sender produceMail() {
                  return new MailSender();
          }

          static Sender produceSms() {
                  return new SmsSender();
          }
  }
  #+END_SRC
  
  测试类：
  #+BEGIN_SRC java
  public class SenderTest {
          public static void main(String[] args) {      
                  Sender sender = SenderFactory.produceMail();  
                  sender.send();  
          }  
  }

  #+END_SRC
  
* Scheme 
  不需要创建子类，创建不同的函数来包装不同的行为，把函数作为参数传入：
  #+BEGIN_SRC scheme
  (define (send fn) ;; fn
    (fn)
    #t)

  (define (sms)
    (begin 
      (display "this is sms sender!")
      (newline)))

  (define (email)
    (begin
      (display "this is email sender!")
      (newline)))

  #+END_SRC
  
  测试代码：
  #+BEGIN_SRC scheme
(send sms) 

;; => this is sms sender!
;; Value: #t
  #+END_SRC

[[file:builder.org][Next：建造器模式]]

[[file:fdp.org][Home：目录]]
