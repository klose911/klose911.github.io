#+TITLE: 所有权
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: concept.html   
#+HTML_LINK_HOME: rust.html
#+OPTIONS: num:nil timestamp:nil ^:nil

#+BEGIN_EXAMPLE
  所有权是 Rust 最为与众不同的特性，它让 Rust 无需垃圾回收即可保障内存安全

  因此，理解 Rust 中所有权如何工作是十分重要的

  本章将讲到所有权以及相关功能：借用、slice 以及 Rust 如何在内存中布局数据
#+END_EXAMPLE
* 概念
  所有运行的程序都必须管理其使用计算机内存的方式：
  + 一些语言中具有 _垃圾回收_ 机制，在程序运行时不断地寻找不再使用的内存
  + 在另一些语言中，程序员必须亲自 _分配_ 和 _释放_ 内存
  + Rust 则选择了第三种方式：通过 _所有权_ 系统管理内存
    + _编译器_ 在 _编译_ 时会根据一系列的 _规则_ 进行 *检查*
    + 在运行时，所有权系统的任何功能都不会减慢程序

  #+BEGIN_EXAMPLE
    因为所有权对很多程序员来说都是一个新概念，需要一些时间来适应
    好消息是随着对 Rust 和所有权系统的规则越来越有经验，就越能自然地编写出安全和高效的代码。持之以恒！

    当理解了所有权，将有一个坚实的基础来理解那些使 Rust 独特的功能

    在这节中，将通过完成一些示例来学习所有权，这些示例基于一个常用的数据结构：“字符串”
  #+END_EXAMPLE

** 栈和堆 
   #+BEGIN_EXAMPLE
     在很多语言中，并不需要经常考虑到栈与堆

     不过在像 Rust 这样的系统编程语言中，值是位于栈上还是堆上在更大程度上影响了语言的行为以及为何必须做出这样的抉择
     会在稍后部分描述所有权与栈和堆相关的内容，所以这里只是一个用来预热的简要解释
   #+END_EXAMPLE

   _栈_ 和 _堆_ 都是代码在运行时 _可供使用的内存_ ，但是它们的 *结构不同* ：
   + 栈以 _放入值的顺序_ *存储* 值并以 _相反顺序_ *取出* 值。这也被称作 _后进先出_ 
     + 增加数据叫做 _进栈_ 
     + 移出数据叫做 _出栈_
   #+BEGIN_EXAMPLE
     想象一下一叠盘子：当增加更多盘子时，把它们放在盘子堆的顶部，当需要盘子时，也从顶部拿走

     不能从中间也不能从底部增加或拿走盘子！
   #+END_EXAMPLE
   + 栈中的所有数据都必须占用已知且固定的大小。在 _编译_ 时 *大小未知* 或 *大小可能变化* 的数据，要改为存储在 _堆_ 上
     + 堆是 *缺乏组织* 的：当向堆 _放入_ 数据时，要 *请求* 一定大小的 *空间* ， _操作系统_ 在 _堆的某处_ 找到一块 _足够大的空位_ ，把它 *标记为已使用* ，并 *返回* 一个表示 _该位置地址的指针_
       + 这个过程称作 _在堆上分配内存_ ，有时简称为 _分配_
       + 将数据推入栈中并不被认为是分配。因为指针的大小是已知并且固定的，可以将指针存储在栈上，不过当需要实际数据时，必须访问指针

   #+BEGIN_EXAMPLE
     想象一下去餐馆就座吃饭

     当进入时，你说明有几个人，餐馆员工会找到一个够大的空桌子并领你们过去

     如果有人来迟了，他们也可以通过询问来找到你们坐在哪
   #+END_EXAMPLE

   _访问堆_ 上的数据比 _访问栈_ 上的数据 *慢* ，因为必须通过 _指针_ 来访问，现代处理器在内存中跳转越少就越快

   #+BEGIN_EXAMPLE
     继续类比，假设有一个服务员在餐厅里处理多个桌子的点菜
     在一个桌子报完所有菜后再移动到下一个桌子是最有效率的。从桌子 A 听一个菜，接着桌子 B 听一个菜，然后再桌子 A，然后再桌子 B 这样的流程会更加缓慢

     出于同样原因，处理器在处理的数据彼此较近的时候（比如在栈上）比较远的时候（比如可能在堆上）能更好的工作

     另外，在堆上分配大量的空间也可能消耗时间
   #+END_EXAMPLE


   + 当调用一个函数时， _传递给函数的值_ （包括可能指向堆上数据的指针）和 _函数的局部变量_ 被 *压入栈* 中
   + 当函数结束时，这些值被 *移出栈*  

   #+BEGIN_EXAMPLE
     跟踪哪部分代码正在使用堆上的哪些数据，最大限度的减少堆上的重复数据的数量，以及清理堆上不再使用的数据确保不会耗尽空间，这些问题正是所有权系统要处理的

     一旦理解了所有权，就不需要经常考虑栈和堆了，不过明白了所有权的存在就是为了管理堆数据，能够帮助解释为什么所有权要以这种方式工作
   #+END_EXAMPLE

** 所有权规则
   首先，看一下所有权的规则。后面通过举例说明时，请谨记这些规则：
   1. Rust 中的 _每一个值_ 都有一个被称为其 _所有者_ 的 *变量*
   2. _值_ *有且只有一个* _所有者_
   3. 当 _所有者_ （变量） *离开* 作用域，这个 _值_ 将被 *丢弃*

** 变量作用域
   在所有权的第一个例子中，看看一些变量的 _作用域_ 。作用域是一个 _项_ 在 _程序_ 中 *有效* 的范围。假设有这样一个变量：

   #+BEGIN_SRC rust 
  let s = "hello";
   #+END_SRC

   变量 s 绑定到了一个字符串字面值，这个字符串值是硬编码进程序代码中的。这个变量从 _声明的点_ 开始直到 _当前作用域0结束_ 时都是 *有效的* 。下面注释标明了变量 s 在何处是有效的：

   #+BEGIN_SRC rust 
  {                      // s 在这里无效, 它尚未声明
      let s = "hello";   // 从此处起，s 是有效的

      // 使用 s
  } 
   #+END_SRC

   换句话说，这里有 *两个* 重要的 _时间点_ ：
   + 当 s _进入_ 作用域 时，它就是有效的
   + 这一直持续到它 _离开_ 作用域 为止

   #+BEGIN_EXAMPLE
     目前为止，变量是否有效与作用域的关系跟其他编程语言是类似的

     现在在此基础上介绍 String 类型
   #+END_EXAMPLE

*** String 类型

    #+BEGIN_EXAMPLE
      这里使用 String 作为例子，并专注于 String 与所有权相关的部分，这些方面也同样适用于标准库提供的或自己创建的其他复杂数据类型

      我们已经见过字符串字面值，字符串值被硬编码进程序里。字符串字面值是很方便的，不过他们并不适合使用文本的每一种场景，原因之一就是他们是不可变的
      另一个原因是并不是所有字符串的值都能在编写代码时就知道：例如，要是想获取用户输入并存储该怎么办呢
    #+END_EXAMPLE
    为此，Rust 有第二个字符串类型， _String_ 。这个类型被 *分配到堆* 上，所以能够存储在编译时未知大小的文本。可以使用 _from_ 函数基于字符串字面值来创建 String，如下：

    #+BEGIN_SRC rust 
  let s = String::from("hello");
    #+END_SRC

    #+BEGIN_EXAMPLE
      这两个冒号 :: 是运算符，允许将特定的 from 函数置于 String 类型的命名空间下，而不需要使用类似 string_from 这样的名字
    #+END_EXAMPLE

    *可以* 修改此类字符串：

    #+BEGIN_SRC rust 
  let mut s = String::from("hello");

  s.push_str(", world!"); // push_str() 在字符串后追加字面值

  println!("{}", s); // 将打印 `hello, world!`
    #+END_SRC

    #+BEGIN_EXAMPLE
      那么这里有什么区别呢？为什么 String 可变而字面值却不行呢？

      区别在于两个类型对内存的处理上
    #+END_EXAMPLE

*** 内存与分配
    #+BEGIN_EXAMPLE
      就字符串字面值来说，在编译时就知道其内容，所以文本被直接硬编码进最终的可执行文件中

      这使得字符串字面值快速且高效，不过这些特性都只得益于字符串字面值的不可变性

      不幸的是，不能为了每一个在编译时大小未知的文本而将一块内存放入二进制文件中，并且它的大小还可能随着程序运行而改变
    #+END_EXAMPLE

    对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：
    + 必须在运行时向操作系统请求内存
    + 需要一个当处理完 String 时将内存返回给操作系统的方法

    #+BEGIN_EXAMPLE
      第一部分由我们完成：当调用 String::from 时，它的实现中请求其所需的内存

      这在编程语言中是非常通用的
    #+END_EXAMPLE

    #+BEGIN_EXAMPLE
      然而，第二部分实现起来就各有区别了。在有垃圾回收的语言中，GC 记录并清除不再使用的内存，而我们并不需要关心它

      没有 GC 的话，识别出不再使用的内存并调用代码显式释放就是我们的责任了，跟请求内存的时候一样
      从历史的角度上说正确处理内存回收曾经是一个困难的编程问题
      如果忘记回收了会浪费内存
      如果过早回收了，将会出现无效变量
      如果重复回收，这也是个 bug

      需要精确的为一个 allocate 配对一个 free ！
    #+END_EXAMPLE

    Rust 采取了一个不同的策略： *内存在拥有它的变量离开作用域后就被自动释放* 。下面是作用域例子的一个使用 String 而不是字符串字面值的版本：

    #+BEGIN_SRC rust 
  {
      let s = String::from("hello"); // 从此处起，s 是有效的

      // 使用 s
  }                                  // 此作用域已结束，
				     // s 不再有效
    #+END_SRC

    这是一个将 String 需要的内存返回给操作系统的很自然的位置：当 s 离开作用域的时候。当变量离开作用域，Rust 会 *调用* 一个特殊的函数。这个函数叫做 _drop_ ，在这里 String 的作者可以放置释放内存的代码。Rust *在结尾的 } 处自动调用 drop* 

    #+BEGIN_EXAMPLE
      注意：在 C++ 中，这种 item 在生命周期结束时释放资源的模式有时被称作 资源获取即初始化

      如果你使用过 RAII 模式的话应该对 Rust 的 drop 函数并不陌生

      这个模式对编写 Rust 代码的方式有着深远的影响
      现在它看起来很简单，不过在更复杂的场景下代码的行为可能是不可预测的，比如当有多个变量使用在堆上分配的内存时
    #+END_EXAMPLE

**** 变量与数据交互的方式（一）：移动
     Rust 中的多个变量可以采用一种独特的方式与同一数据交互。下面是中一个使用整型的例子：
     #+BEGIN_SRC rust 
  let x = 5;
  let y = x;
     #+END_SRC

     #+BEGIN_EXAMPLE
       大致可以猜到这在干什么：

       “将 5 绑定到 x；接着生成一个值 x 的拷贝并绑定到 y”
       现在有了两个变量，x 和 y，都等于 5。这也正是事实上发生了的

       因为整数是有已知固定大小的简单值，所以这两个 5 被放入了栈中
     #+END_EXAMPLE

     现在看看这个 String 版本：
     #+BEGIN_SRC rust 
  let s1 = String::from("hello");
  let s2 = s1;
     #+END_SRC

     #+BEGIN_EXAMPLE
       这看起来与上面的代码非常类似，所以可能会假设他们的运行方式也是类似的：
       也就是说，第二行可能会生成一个 s1 的拷贝并绑定到 s2 上

       不过，事实上并不完全是这样
     #+END_EXAMPLE

     看看下图以了解 String 的底层会发生什么。String 由三部分组成：
     + 如图左侧所示，这一组数据 *存储在栈* 上：
       + 一个指向 _存放字符串内容内存_ 的指针
       + 一个 _长度_ 
       + 和一个 _容量_ 
     + 右侧则是 *堆上存放内容* 的内存部分

       #+ATTR_HTML: image :width 10% 
       [[file:pic/trpl04-01.svg]] 

     #+BEGIN_EXAMPLE
       长度表示 String 的内容当前使用了多少字节的内存
       容量是 String 从操作系统总共获取了多少字节的内存

       长度与容量的区别是很重要的，不过在当前上下文中并不重要，所以现在可以忽略容量
     #+END_EXAMPLE

     当将 s1 赋值给 s2，String 的数据被复制了，这意味着从 _栈上_  *拷贝* 了它的 _指针_ 、 _长度_ 和 _容量_ 。并 *没有复制* 指针指向的 _堆上数据_ 。换句话说，内存中数据的表现如图所示：

     #+ATTR_HTML: image :width 10% 
     [[file:pic/trpl04-02.svg]] 

     这个表现形式看起来 并不像图 4-3 中的那样，如果 Rust 也 *拷贝* 了 _堆上的数据_ ，那么内存看起来就是这样的。如果 Rust 这么做了，那么操作 s2 = s1 在堆上数据比较大的时候会对运行时性能造成非常大的影响

     #+ATTR_HTML: image :width 10% 
     [[file:pic/trpl04-03.svg]] 


     #+BEGIN_EXAMPLE
       之前提到过当变量离开作用域后，Rust 自动调用 drop 函数并清理变量的堆内存，不过图 4-2 展示了两个数据指针指向了同一位置

       这就有了一个问题：当 s2 和 s1 离开作用域，他们都会尝试释放相同的内存。这是一个叫做“二次释放”的错误，也是之前提到过的内存安全性 bug 之一

       两次释放（相同）内存会导致内存污染，它可能会导致潜在的安全漏洞
     #+END_EXAMPLE

     为了确保内存安全，这种场景下 Rust 的处理有另一个细节值得注意。 *与其尝试拷贝被分配的内存，Rust 则认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西* 。看看在 s2 被创建之后尝试使用 s1 会发生什么；这段代码不能运行：

     #+BEGIN_SRC rust 
  let s1 = String::from("hello");
  let s2 = s1;

  println!("{}, world!", s1);
     #+END_SRC

     将会得到一个类似如下的错误，因为 Rust *禁止使用无效的引用* ：

     #+BEGIN_SRC sh 
  error[E0382]: use of moved value: `s1`
   --> src/main.rs:5:28
    |
  3 |     let s2 = s1;
    |         -- value moved here
  4 |
  5 |     println!("{}, world!", s1);
    |                            ^^ value used here after move
    |
    = note: move occurs because `s1` has type `std::string::String`, which does
    not implement the `Copy` trait
     #+END_SRC

     #+BEGIN_EXAMPLE
       如果在其他语言中听说过术语 浅拷贝 和 深拷贝 ，那么拷贝指针、长度和容量而不拷贝数据可能听起来像浅拷贝
     #+END_EXAMPLE
     不过因为 Rust  *同时使第一个变量无效了* ，这个操作被称为 _移动_ ，而不是浅拷贝。上面的例子可以解读为 s1 被 移动 到了 s2 中。那么具体发生了什么，如图 4-4 所示：

     #+ATTR_HTML: image :width 10% 
     [[file:pic/trpl04-04.svg]] 


     这样就解决了的问题：因为只有 s2 是有效的，当其离开作用域，它就释放自己的内存，完毕

     #+BEGIN_EXAMPLE
       另外，这里还隐含了一个设计选择：Rust 永远也不会自动创建数据的 “深拷贝”

       因此，任何“自动的”复制可以被认为对运行时性能影响较小
     #+END_EXAMPLE

**** 变量与数据交互的方式（二）：克隆
     如果确实需要 *深度复制* String 中堆上的数据，而不仅仅是栈上的数据，可以使用一个叫做 _clone_ 的通用函数，这是一个实际使用 clone 方法的例子：

     #+BEGIN_SRC rust
  let s1 = String::from("hello");
  let s2 = s1.clone();

  println!("s1 = {}, s2 = {}", s1, s2);
     #+END_SRC

     这段代码能正常运行，并且明确产生图 4-3 中行为，这里堆上的数据 *确实* 被复制了

     #+BEGIN_EXAMPLE
       当出现 clone 调用时，就知道一些特定的代码被执行而且这些代码可能相当消耗资源

       很容易察觉到一些不寻常的事情正在发生
     #+END_EXAMPLE

**** 只在栈上的数据：拷贝
     这里还有一个没有提到的小窍门。这些代码使用了整型并且是有效的，他们是示例 4-2 中的一部分：

     #+BEGIN_SRC rust 
  let x = 5;
  let y = x;

  println!("x = {}, y = {}", x, y);
     #+END_SRC

     #+BEGIN_EXAMPLE
       但这段代码似乎与刚刚学到的内容相矛盾：没有调用 clone，不过 x 依然有效且没有被移动到 y 中

       原因是像整型这样的在编译时已知大小的类型被整个存储在栈上，所以拷贝其实际的值是快速的。这意味着没有理由在创建变量 y 后使 x 无效
       换句话说，这里没有深浅拷贝的区别，所以这里调用 clone 并不会与通常的浅拷贝有什么不同，可以不用管它
     #+END_EXAMPLE

     Rust 有一个叫做 _Copy trait_ 的 *特殊注解* ，可以用在类似整型这样的存储在栈上的类型上。如果一个类型拥有 Copy trait， *一个旧的变量在将其赋值给其他变量后仍然可用* 
     #+BEGIN_EXAMPLE
       Rust 不允许自身或其任何部分实现了 Drop trait 的类型使用 Copy trait

       如果我们对其值离开作用域时需要特殊处理的类型使用 Copy 注解，将会出现一个编译时错误

       要学习如何为你的类型增加 Copy 注解，请阅读附录 C 中的 “可派生的 trait”
     #+END_EXAMPLE

     作为一个通用的规则， *任何简单标量值的组合* 可以是 Copy 的， *不需要分配内存或某种形式资源* 的类型是 Copy 的。如下是一些 Copy 的类型：
     + 所有 _整数_ 类型，比如 u32
     + _布尔_ 类型 bool，它的值是 true 和 false
     + 所有 _浮点数_ 类型，比如 f64
     + _字符_ 类型，char
     + _元组_ ， *当且仅当其包含的类型* 也都是 Copy 的时候
       + 比如，(i32, i32) 是 Copy 的
       + 但 _(i32, String)_ 就不是


*** 所有权与函数

    将值传递给函数在语义上与给变量赋值相似。向函数传递值可能会 _移动_ 或者 _复制_ ，就像赋值语句一样。示例 4-3 使用注释展示变量何时进入和离开作用域：

    #+BEGIN_SRC rust 
  fn main() {
      let s = String::from("hello");  // s 进入作用域

      takes_ownership(s);             // s 的值移动到函数里 ...
				      // ... 所以到这里不再有效

      let x = 5;                      // x 进入作用域

      makes_copy(x);                  // x 应该移动函数里，
				      // 但 i32 是 Copy 的，所以在后面可继续使用 x

  } // 这里, x 先移出了作用域，然后是 s。但因为 s 的值已被移走，
    // 所以不会有特殊操作

  fn takes_ownership(some_string: String) { // some_string 进入作用域
      println!("{}", some_string);
  } // 这里，some_string 移出作用域并调用 `drop` 方法。占用的内存被释放

  fn makes_copy(some_integer: i32) { // some_integer 进入作用域
      println!("{}", some_integer);
  } // 这里，some_integer 移出作用域。不会有特殊操作
    #+END_SRC

    当尝试在调用 _takes_ownership_ 后使用 _s_ 时，Rust 会抛出一个 *编译时错误* 

    #+BEGIN_EXAMPLE
      这些静态检查使我们免于犯错

      试试在 main 函数中添加使用 s 和 x 的代码来看看哪里能使用他们，以及所有权规则会在哪里阻止我们这么做
    #+END_EXAMPLE

*** 返回值与作用域
    返回值也可以转移所有权。示例 4-4 与示例 4-3 一样带有类似的注释：
    #+BEGIN_SRC rust 
  fn main() {
      let s1 = gives_ownership();         // gives_ownership 将返回值
      // 移给 s1

      let s2 = String::from("hello");     // s2 进入作用域

      let s3 = takes_and_gives_back(s2);  // s2 被移动到
      // takes_and_gives_back 中, 
      // 它也将返回值移给 s3
  } // 这里, s3 移出作用域并被丢弃。s2 也移出作用域，但已被移走，
  // 所以什么也不会发生。s1 移出作用域并被丢弃

  fn gives_ownership() -> String {             // gives_ownership 将返回值移动给
      // 调用它的函数

      let some_string = String::from("hello"); // some_string 进入作用域.

      some_string                              // 返回 some_string 并移出给调用的函数
  }

  // takes_and_gives_back 将传入字符串并返回该值
  fn takes_and_gives_back(a_string: String) -> String { // a_string 进入作用域

      a_string  // 返回 a_string 并移出给调用的函数
  }
    #+END_SRC


    变量的所有权总是遵循相同的模式：
    + *将值赋给另一个变量时移动它*
    + 当持有堆中数据值的变量离开作用域时，其值将通过 drop 被清理掉，除非数据被移动为另一个变量所有

    #+BEGIN_EXAMPLE
      在每一个函数中都获取所有权并接着返回所有权有些啰嗦

      如果想要函数使用一个值但不获取所有权该怎么办呢？如果还要接着使用它的话，每次都传进去再返回来就有点烦人了

      除此之外，也可能想返回函数体中产生的一些数据
    #+END_EXAMPLE

    可以使用 _元组_ 来返回多个值（其中包含想要接着使用的变量，比如下面calculte_length中的参数s），如下面示例所示：

    #+BEGIN_SRC rust 
  fn main() {
      let s1 = String::from("hello");

      let (s2, len) = calculate_length(s1);

      println!("The length of '{}' is {}.", s2, len);
  }

  fn calculate_length(s: String) -> (String, usize) {
      let length = s.len(); // len() 返回字符串的长度

      (s, length)
  }
    #+END_SRC

    #+BEGIN_EXAMPLE
      但是这未免有些形式主义，而且这种场景应该很常见。幸运的是，Rust 对此提供了一个功能，叫做“引用“
    #+END_EXAMPLE

* 引用与借用
  #+BEGIN_EXAMPLE
    上面实例中的元组代码有这样一个问题：
    必须将 String 返回给调用函数，以便在调用 calculate_length 后仍能使用 String，因为 String 被移动到了 calculate_length 内
  #+END_EXAMPLE

  下面是如何定义并使用一个（新的）calculate_length 函数，它以一个 *对象的引用* 作为参数而不是 _获取值的所有权_ ：

  #+BEGIN_SRC rust 
  fn main() {
      let s1 = String::from("hello");

      let len = calculate_length(&s1);

      println!("The length of '{}' is {}.", s1, len);
  }

  fn calculate_length(s: &String) -> usize {
      s.len()
  }
  #+END_SRC

  注意：
  + 变量声明和函数返回值中的所有元组代码都消失了
  + 在函数定义中，获取 *&String* 而不是 _String_ 
    + 传递 *&s1* 给 calculate_length

  这里的 _&_ 符号就是 *引用* ，它们 *允许使用值* 但 *不获取其所有权* 。下图展示了一张示意图：

  #+ATTR_HTML: image :width 10% 
  [[file:pic/trpl04-05.svg]] 

  #+BEGIN_EXAMPLE
    注意：与使用 & 引用相反的操作是 解引用，它使用解引用运算符 '*' 
  #+END_EXAMPLE

  仔细看看这个函数调用：

  #+BEGIN_SRC rust 
  let s1 = String::from("hello");

  let len = calculate_length(&s1);
  #+END_SRC

  #+BEGIN_EXAMPLE
    &s1 语法创建了一个”指向值s1的引用“，但是并不拥有它

    因为并不拥有这个值，当引用离开作用域时其指向的值也不会被丢弃
  #+END_EXAMPLE

  同理， _函数签名_ 使用 _&_ 来表明 _参数s的类型_ 是一个 *引用* ： 

  #+BEGIN_SRC rust 
  fn calculate_length(s: &String) -> usize { // s 是对 String 的引用
      s.len()
  } // 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，
    // 所以什么也不会发生
  #+END_SRC

  #+BEGIN_EXAMPLE
    ”变量s有效的作用域“ 与 ”函数参数的作用域“一样，不过当引用离开作用域后并不丢弃它指向的数据，因为没有所有权

    当函数使用引用而不是实际值作为参数，无需返回值来交还所有权，因为就不曾拥有所有权
  #+END_EXAMPLE

  将 _获取引用_ 作为 _函数参数_ 称为 *借用* 
  #+BEGIN_EXAMPLE
    正如现实生活中，如果一个人拥有某样东西，你可以从他那里借来，但当你使用完毕，必须还回去
  #+END_EXAMPLE

  如果尝试修改借用的变量呢？

  #+BEGIN_SRC rust 
  fn main() {
      let s = String::from("hello");

      change(&s);
  }

  fn change(some_string: &String) {
      some_string.push_str(", world");
  }
  #+END_SRC

  编译时会报错：
  #+BEGIN_SRC sh 
  $ cargo run 
     Compiling change_reference v0.1.0 (/home/klose/Documents/programming/html/klose911.github.io/src/rust/src/ownership/change_reference)
  error[E0596]: cannot borrow `*some_string` as mutable, as it is behind a `&` reference
   --> src/main.rs:8:5
    |
  7 | fn change(some_string: &String) {
    |                        ------- help: consider changing this to be a mutable reference: `&mut std::string::String`
  8 |     some_string.push_str(", world");
    |     ^^^^^^^^^^^ `some_string` is a `&` reference, so the data it refers to cannot be borrowed as mutable

  error: aborting due to previous error

  For more information about this error, try `rustc --explain E0596`.
  error: Could not compile `change_reference`.

  To learn more, run the command again with --verbose.
  #+END_SRC

  正如变量默认是不可变的，引用也一样。 *默认不允许修改引用的值* 

** 可变引用
   通过一个小调整就能修复上面示例代码中的错误：

   #+BEGIN_SRC rust 
  fn main() {
      let mut s = String::from("hello");

      change(&mut s);
  }

  fn change(some_string: &mut String) {
      some_string.push_str(", world");
  }
   #+END_SRC

   1. 必须将 _s_ 改为 *mut*
   2. 必须 *创建* 一个 *可变引用* _&mut s_
   3. *接受* 一个 *可变引用* _some_string: &mut String_ 

   不过可变引用有一个很大的 _限制_ ：在 _特定作用域_ 中的 _特定数据_ *有且只有* _一个可变引用_ 。这些代码会失败：

   #+BEGIN_SRC rust 
  let mut s = String::from("hello");

  let r1 = &mut s;
  let r2 = &mut s;

  println!("{}, {}", r1, r2);
   #+END_SRC

   错误如下：
   #+BEGIN_SRC sh 
  $ cargo run 
     Compiling multiple_mutable_references v0.1.0 (/home/klose/Documents/programming/html/klose911.github.io/src/rust/src/ownership/multiple_mutable_references)
  error[E0499]: cannot borrow `s` as mutable more than once at a time
   --> src/main.rs:5:14
    |
  4 |     let r1 = &mut s;
    |              ------ first mutable borrow occurs here
  5 |     let r2 = &mut s;
    |              ^^^^^^ second mutable borrow occurs here
  6 | 
  7 |     println!("{}, {}", r1, r2);
    |                        -- first borrow later used here

  error: aborting due to previous error

  For more information about this error, try `rustc --explain E0499`.
  error: Could not compile `multiple_mutable_references`.

  To learn more, run the command again with --verbose.
   #+END_SRC

   #+BEGIN_EXAMPLE
     这个限制允许可变性，不过是以一种受限制的方式允许

     新 Rustacean 们经常与此作斗争，因为大部分语言中变量任何时候都是可变的
   #+END_EXAMPLE

   这个限制的好处是Rust可以在 *编译时就避免数据竞争* 。 _数据竞争_ 类似于竞态条件，它可由这三个行为造成：
   1. *两个或更多* _指针_ *同时访问* _同一数据_ 
   2. *至少有一个* _指针_ 被用来 *写入数据* 
   3. *没有* *同步数据访问* 的 _机制_ 

   #+BEGIN_EXAMPLE
     数据竞争会导致未定义行为，难以在运行时追踪，并且难以诊断和修复

     Rust 避免了这种情况的发生，因为它甚至不会编译存在数据竞争的代码
   #+END_EXAMPLE

   可以使用大括号来创建一个新的作用域，以允许拥有多个可变引用，只是不能 *同时* 拥有： 

   #+BEGIN_SRC rust 
  let mut s = String::from("hello");

  {
      let r1 = &mut s;

  } // r1 在这里离开了作用域，所以我们完全可以创建一个新的引用

  let r2 = &mut s;
   #+END_SRC

   类似的规则也存在于 *同时使用* _可变_ 与 _不可变_ 引用中。这些代码会导致一个错误：

   #+BEGIN_SRC rust 
  let mut s = String::from("hello");

  let r1 = &s; // 没问题
  let r2 = &s; // 没问题
  let r3 = &mut s; // 大问题

  println!("{}, {}, and {}", r1, r2, r3);
   #+END_SRC

   编译报错如下：
   #+BEGIN_SRC sh 
  $ cargo run 
     Compiling both_mut_immut_references v0.1.0 (/home/klose/Documents/programming/html/klose911.github.io/src/rust/src/ownership/both_mut_immut_references)
  error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable
   --> src/main.rs:6:14
    |
  4 |     let r1 = &s; // 没问题
    |              -- immutable borrow occurs here
  5 |     let r2 = &s; // 没问题
  6 |     let r3 = &mut s; // 大问题
    |              ^^^^^^ mutable borrow occurs here
  7 | 
  8 |     println!("{}, {}, and {}", r1, r2, r3);
    |                                -- immutable borrow later used here

  error: aborting due to previous error

  For more information about this error, try `rustc --explain E0502`.
  error: Could not compile `both_mut_immut_references`.

  To learn more, run the command again with --verbose.
   #+END_SRC

   #+BEGIN_EXAMPLE
     不能在拥有不可变引用的同时拥有可变引用，不可变引用的用户可不希望在他们的眼皮底下值就被意外的改变了

     然而，多个不可变引用是可以的，因为没有哪个只能读取数据的人有能力影响其他人读取到的数据
   #+END_EXAMPLE

   注意：一个 _引用的作用域_ 从 *声明的地方* 开始一直持续到 *最后一次使用* 为止。例如，因为最后一次使用不可变引用在声明可变引用之前，所以如下代码是可以编译的：

   #+BEGIN_SRC rust 
  let mut s = String::from("hello");

  let r1 = &s; // 没问题
  let r2 = &s; // 没问题
  println!("{} and {}", r1, r2);
  // 此位置之后 r1 和 r2 不再使用

  let r3 = &mut s; // 没问题
  println!("{}", r3);
   #+END_SRC
   _不可变引用_ r1 和 r2 的作用域在 _println!_ *最后一次使用* 之后 *结束* ，这也是 *创建* _可变引用_ r3 的地方。它们的作用域没有重叠，所以代码是可以编译的

   #+BEGIN_EXAMPLE
     尽管这些错误有时使人沮丧，但请牢记这是 Rust 编译器在提前指出一个潜在的 bug（在编译时而不是在运行时）并精准显示问题所在

     这样就不必去跟踪为何数据并不是想象中的那样
   #+END_EXAMPLE

** 悬垂引用
   在具有指针的语言中，很容易通过 *释放内存* 时 *保留指向它的指针* 而错误地生成一个 _悬垂指针_ 
   #+BEGIN_EXAMPLE
     所谓悬垂指针是其指向的内存可能已经被分配给其它持有者，在C语言里这也被称为”野指针“
   #+END_EXAMPLE

   相比之下，在 Rust 中 _编译器_ *确保* _引用_ *永远也不会* 变成 _悬垂_ 状态： *当拥有一些数据的引用，编译器确保数据不会在其引用之前离开作用域* 。试着创建一个悬垂引用：

   #+BEGIN_SRC rust 
  fn main() {
      let reference_to_nothing = dangle();
  }

  fn dangle() -> &String {
      let s = String::from("hello");

      &s
  }
   #+END_SRC

   编译报错：
   #+BEGIN_SRC sh 
  $ cargo run 
     Compiling dangling_reference v0.1.0 (/home/klose/Documents/programming/html/klose911.github.io/src/rust/src/ownership/dangling_reference)
  error[E0106]: missing lifetime specifier
   --> src/main.rs:5:16
    |
  5 | fn dangle() -> &String {
    |                ^ help: consider giving it a 'static lifetime: `&'static`
    |
    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from

  error: aborting due to previous error

  For more information about this error, try `rustc --explain E0106`.
  error: Could not compile `dangling_reference`.

  To learn more, run the command again with --verbose.
   #+END_SRC

   #+BEGIN_EXAMPLE
     错误信息引用了一个还未介绍的功能：生命周期

     不过，如果你不理会生命周期部分，错误信息中确实包含了为什么这段代码有问题的关键信息：
     this function's return type contains a borrowed value, but there is no value for it to be borrowed from 
   #+END_EXAMPLE

   仔细看看 dangle 代码的每一步到底发生了什么：

   #+BEGIN_SRC rust 
  fn dangle() -> &String { // dangle 返回一个字符串的引用

      let s = String::from("hello"); // s 是一个新字符串

      &s // 返回字符串 s 的引用
  } // 这里 s 离开作用域并被丢弃。其内存被释放。
    // 危险！
   #+END_SRC

   #+BEGIN_EXAMPLE
     因为 s 是在 dangle 函数内创建的，当 dangle 的代码执行完毕后，s 将被释放
     当尝试返回它的引用，这意味着这个引用会指向一个无效的 String

     Rust 不会允许这么做！
   #+END_EXAMPLE

   这里的解决方法是直接返回 String：

   #+BEGIN_SRC rust 
  fn dangle() -> String { 

      let s = String::from("hello"); 

      s 
  } 
   #+END_SRC

   这样就没有任何错误了。所有权被移动出去，所以没有值被释放

** 引用规则
   概括一下之前对引用的讨论：
   + 在 *任意* 给定时间，要么 _只能有_ *一个可变* 引用，要么 _只能有_ *多个不可变* 引用
   + _引用_ 必须 *总是有效* 的

   #+BEGIN_SRC 
接下来看一下另外一种不拥有”所有权“的数据类型：slice 
   #+END_SRC

* slice 
  slice 允许 *引用* _集合_ 中一段 *连续的* _元素序列_ ，而不用引用整个集合

  #+BEGIN_EXAMPLE
    这里有一个编程小习题：

    编写一个函数，该函数接收一个字符串，并返回在该字符串中找到的第一个单词
    如果函数在该字符串中并未找到空格，则整个字符串就是一个单词，所以应该返回整个字符串
  #+END_EXAMPLE

  先考虑一下这个函数的签名：
  #+BEGIN_SRC rust 
  fn first_word(s: &String) -> ?
  #+END_SRC

  #+BEGIN_EXAMPLE
    first_word 函数有一个参数 &String，因为我们不需要所有权，所以这没有问题

    不过应该返回什么呢？
  #+END_EXAMPLE
  并没有一个真正获取 *部分* 字符串的办法。不过，可以返回 _单词结尾的索引_ 。试试下面的代码：

  #+BEGIN_SRC rust 
  fn first_word(s: &String) -> usize {
      let bytes = s.as_bytes();

      for (i, &item) in bytes.iter().enumerate() {
	  if item == b' ' {
	      return i;
	  }
      }

      s.len()
  }
  #+END_SRC

  因为需要逐个元素的检查String中的值是否为空格，需要用 _as_bytes_ 方法将String转化为 _字节数组_ ： 

  #+BEGIN_SRC rust 
  let bytes = s.as_bytes();
  #+END_SRC

  接下来，使用 _iter_ 方法在字节数组上创建一个 *迭代器* ： 
  #+BEGIN_SRC rust 
  for (i, &item) in bytes.iter().enumerate() {
  #+END_SRC

  #+BEGIN_EXAMPLE
    现在，只需知道 iter 方法返回集合中的每一个元素，而 enumerate 包装了 iter 的结果，将这些元素作为元组的一部分来返回
    enumerate 返回的元组中，第一个元素是索引，第二个元素是集合中元素的引用

    这比自己计算索引要方便一些。
  #+END_EXAMPLE

  因为 _enumerate_ 方法返回一个元组，可以使用 _模式_ 来 *解构* ，就像Rust中其他任何地方所做的一样

  #+BEGIN_EXAMPLE
    所以在 for 循环中，指定了一个模式，其中元组中的 i 是索引而元组中的 &item 是单个字节

    因为从 .iter().enumerate() 中获取了“集合元素的引用”，所以模式中使用了 & 
  #+END_EXAMPLE

  在for循环中，通过字节的字面值语法来寻找代表空格的字节。如果找到了一个空格，返回它的位置。否则，使用 _s.len()_ 返回字符串的长度：

  #+BEGIN_SRC rust 
      if item == b' ' {
	  return i;
      }
  }

  s.len()
  #+END_SRC

  #+BEGIN_EXAMPLE
    现在有了一个找到字符串中第一个单词结尾索引的方法，不过这有一个问题

    虽然返回了一个独立的 usize，不过它只在 &String 的上下文中才是一个有意义的数字
    换句话说，因为它是一个与 String 相分离的值，无法保证将来它仍然有效
  #+END_EXAMPLE

  考虑下面first_word的使用例子：

  #+BEGIN_SRC rust 
  fn main() {
      let mut s = String::from("hello world");

      let word = first_word(&s); // word 的值为 5

      s.clear(); // 这清空了字符串，使其等于 ""

      // word 在此处的值仍然是 5，
      // 但是没有更多的字符串让我们可以有效地应用数值 5。word 的值现在完全无效！
  }
  #+END_SRC

  #+BEGIN_EXAMPLE
    这个程序编译时没有任何错误，而且在调用 s.clear() 之后使用 word 也不会出错
    因为 word 与 s 状态完全没有联系，所以 word 仍然包含值 5

    可以尝试用值 5 来提取变量 s 的第一个单词，不过这是有 bug 的，因为在将 5 保存到 word 之后 s 的内容已经改变
    这样就不得不时刻担心 word 的索引与 s 中的数据不再同步，这很啰嗦且易出错！
  #+END_EXAMPLE

  如果编写这么一个 _second_word_ 函数的话，管理索引这件事将更加容易出问题。它的签名看起来像这样：
  #+BEGIN_SRC rust 
  fn second_word(s: &String) -> (usize, usize) {
  #+END_SRC

  #+BEGIN_EXAMPLE
    这要跟踪一个开始索引 和 一个结尾索引，同时有了更多从数据的某个特定状态计算而来的值，但都完全没有与这个状态相关联

    现在有三个飘忽不定的不相关变量需要保持同步！
  #+END_EXAMPLE

  幸运的是，Rust 为这个问题提供了一个解决方法： _字符串 slice_ 

** 字符串 slice 
   _字符串 slice_ 是 _String_ 中 *一部分值的引用* ，它看起来像这样：

   #+BEGIN_SRC rust 
  let s = String::from("hello world");

  let hello = &s[0..5];
  let world = &s[6..11];
   #+END_SRC

   #+BEGIN_EXAMPLE
     这类似于引用整个 String 不过带有额外的 [0..5] 部分

     它不是对整个 String 的引用，而是对部分 String 的引用
   #+END_EXAMPLE

   使用一个由中括号中的 _[starting_index..ending_index]_ 指定的 _range_ 创建一个 *slice* ，其中：
   + starting_index 是 slice 的 *第一个位置*
   + ending_index 则是 slice *最后一个位置的后一个值*
   + 在其内部，slice 的数据结构存储了 slice 的开始位置和长度，长度对应于 ending_index 减去 starting_index 的值

   #+BEGIN_EXAMPLE
     所以对于 let world = &s[6..11]; 的情况，world 将是一个包含指向 s 第 7 个字节（索引从 0 开始）的指针和长度值 5 的 slice
   #+END_EXAMPLE

   下图展示了一个图例：

   #+ATTR_HTML: image :width 10% 
   [[file:pic/trpl04-06.svg]] 

   对于 Rust 的 _.._ range 语法，如果想要从 _第一个索引_ （0）开始，可以 *不写两个点号之前的值* 。换句话说，如下两个语句是相同的：

   #+BEGIN_SRC rust 
  let s = String::from("hello");

  let slice = &s[0..2];
  let slice = &s[..2];
   #+END_SRC

   依此类推，如果 slice 包含 String 的 _最后一个字节_ ，也可以 *舍弃尾部的数字* 。这意味着如下也是相同的：

   #+BEGIN_SRC rust 
  let s = String::from("hello");

  let len = s.len();

  let slice = &s[3..len];
  let slice = &s[3..];
   #+END_SRC

   也可以同时舍弃这两个值来获取整个字符串的 slice。所以如下亦是相同的：

   #+BEGIN_SRC rust 
  let s = String::from("hello");

  let len = s.len();

  let slice = &s[0..len];
  let slice = &s[..];
   #+END_SRC

   #+BEGIN_EXAMPLE
     注意：字符串 slice range 的索引必须位于有效的 UTF-8 字符边界内
     如果尝试从一个多字节字符的中间位置创建字符串 slice，则程序将会因错误而退出

     出于介绍字符串 slice 的目的，本部分假设只使用 ASCII 字符集； 以后会更加全面的讨论 UTF-8 处理问题
   #+END_EXAMPLE

   现在重写 first_word 来返回一个 slice。 *字符串 slice* 的 _类型声明_ 写作 *&str* ： 
   #+BEGIN_SRC rust 
  fn first_word(s: &String) -> &str {
      let bytes = s.as_bytes();

      for (i, &item) in bytes.iter().enumerate() {
	  if item == b' ' {
	      return &s[0..i];
	  }
      }

      &s[..]
  }
   #+END_SRC

   现在当调用 first_word 时，会返回与底层数据关联的单个值。这个值由一个 _slice 开始位置的引用_ 和 _slice 中元素的数量_ 组成
   #+BEGIN_EXAMPLE
     使用跟开始相同的方式获取单词结尾的索引，通过寻找第一个出现的空格
     当找到一个空格，返回一个字符串 slice，它使用字符串的开始和空格的索引作为开始和结束的索引
   #+END_EXAMPLE

   second_word 函数也可以改为返回一个 slice：
   #+BEGIN_SRC rust 
  fn second_word(s: &String) -> &str {
   #+END_SRC

   #+BEGIN_EXAMPLE
     现在有了一个不易混淆且直观的 API 了，因为编译器会确保指向 String 的引用持续有效

     还记得那个获取第一个单词结尾的索引后，接着就清除了字符串导致索引就无效的 bug 吗？
     那些代码在逻辑上是不正确的，但却没有显示任何直接的错误，问题会在之后尝试对空字符串使用第一个单词的索引时出现

     slice 就不可能出现这种 bug 并更早的报出问题了
   #+END_EXAMPLE

   使用 slice 版本的 first_word 会抛出一个编译时错误：
   #+BEGIN_SRC rust 
  fn main() {
      let mut s = String::from("hello world");

      let word = first_word(&s);

      s.clear(); // 错误!

      println!("the first word is: {}", word);
  }
   #+END_SRC

   这里是编译错误：

   #+BEGIN_SRC sh 
  error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable
   --> src/main.rs:6:5
    |
  4 |     let word = first_word(&s);
    |                           -- immutable borrow occurs here
  5 | 
  6 |     s.clear(); // 错误!
    |     ^^^^^^^^^ mutable borrow occurs here
  7 | 
  8 |     println!("the first word is: {}", word);
    |                                       ---- immutable borrow later used here

  error: aborting due to previous error

  For more information about this error, try `rustc --explain E0502`.
  error: Could not compile `string_slice`.

  To learn more, run the command again with --verbose.
   #+END_SRC

   回忆一下借用规则， *当拥有某值的不可变引用时，就不能再获取一个可变引用* 

   #+BEGIN_EXAMPLE
     因为 clear 需要清空 String，它尝试获取一个可变引用
     Rust不允许这样做，所以编译失败

     Rust 不仅使得我们的 API 简单易用，也在编译时就消除了一整类的错误！
   #+END_EXAMPLE

*** 字符串字面值就是 slice 

    #+BEGIN_EXAMPLE
      还记得讲到过字符串字面值被储存在二进制文件中吗
    #+END_EXAMPLE
    现在知道 slice 了，就可以正确的理解字符串字面值了：

    #+BEGIN_SRC rust 
  let s = "Hello, world!";
    #+END_SRC

    这里 s 的类型是 _&str_ ：一个 *指向* _二进制程序_ *特定位置* 的 _slice_

    #+BEGIN_EXAMPLE
      这也就是为什么字符串字面值是不可变的：&str 是一个不可变引用
    #+END_EXAMPLE

*** 字符串 slice 作为参数
    在知道了能够获取字面值和 String 的 slice 后，对 first_word 做了改进，这是它的签名：
    #+BEGIN_SRC rust 
  fn first_word(s: &String) -> &str {
    #+END_SRC
    而更有经验的 Rustacean 会编写出下面的签名，因为它使得可以对 _String_ 值和 _&str_ 值使用相同的函数：

    #+BEGIN_SRC rust 
  fn first_word(s: &str) -> &str {
    #+END_SRC

    如果有一个字符串 slice，可以直接传递它。如果有一个 String，则可以传递整个 String 的 slice：

    #+BEGIN_SRC rust 
  fn main() {
      let my_string = String::from("hello world");

      // first_word 中传入 `String` 的 slice
      let word = first_word(&my_string[..]);

      let my_string_literal = "hello world";

      // first_word 中传入字符串字面值的 slice
      let word = first_word(&my_string_literal[..]);

      // 因为字符串字面值 **就是** 字符串 slice，
      // 这样写也可以，即不使用 slice 语法！
      let word = first_word(my_string_literal);
  }
    #+END_SRC

    #+BEGIN_EXAMPLE
      定义一个获取字符串 slice 而不是 String 引用的函数使得 API 更加通用并且不会丢失任何功能
    #+END_EXAMPLE


** 其他类型的 slice 
   #+BEGIN_EXAMPLE
     字符串 slice，正如你想象的那样，是针对字符串的
   #+END_EXAMPLE
   不过也有更通用的 slice 类型。考虑一下这个数组：

   #+BEGIN_SRC rust 
  let a = [1, 2, 3, 4, 5];
   #+END_SRC

   就跟想要获取字符串的一部分那样，也会想要引用数组的一部分。可以这样做：

   #+BEGIN_SRC rust 
  let a = [1, 2, 3, 4, 5];

  let slice = &a[1..3];
   #+END_SRC

   这个 slice 的类型是 _&[i32]_ ：它跟字符串 slice 的工作方式一样，通过存储第一个集合元素的引用和一个集合总长度

   #+BEGIN_EXAMPLE
     可以对其他所有集合使用这类 slice
   #+END_EXAMPLE

** 总结
   _所有权_ 、 _借用_ 和  _slice_ 这些概念让 Rust 程序在 *编译时确保内存安全* 

   #+BEGIN_EXAMPLE
     Rust 语言提供了跟其他系统编程语言相同的方式来控制使用的内存
     但”拥有数据所有者“在 ”离开作用域“ 后 ”自动清除其数据“ 的功能意味着：无须额外编写和调试相关的控制代码

     所有权系统影响了 Rust 中很多其他部分的工作方式
   #+END_EXAMPLE

   [[file:struct.org][Next: 结构体]]

   [[file:concept.org][Previous: 概念]]

   [[file:rust.org][Home: 目录]]


